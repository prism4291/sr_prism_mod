/*
 Copyright (C) 2008 ha55ii, http://dan-ball.jp/
 The games source code use is prohibition.
*/
'use strict'
//チートチェック無効化mod
//一応チート検出でログ出す
let game_cheated = 0;
var WINDOW = window;
var GameMode = 0;
var UserCode1;
var UserCode2;
var UserPartyId;
var UserName;
var UserPartyName;
var OpponentPartyId;
var OpponentName;
var OpponentPartyName;
var VsResult;
var UploadError = 0;
var UnixHour = 0;
var UserNameImage = new SrImage;
var UserPartyNameImage = new SrImage;
var OpponentNameImage = new SrImage;
var OpponentPartyNameImage = new SrImage;
var UserPartyNameBracketImage = new SrImage;
var OpponentPartyNameBracketImage = new SrImage;
var CookieSaveData;
var OpponentSaveData;
var UserCode2Array = [0, 0, 0, 0, 0, 0, 0, 0];
var Language;
var StageEffectCanvasImage = new SrImage;
var StageTerrainImage = new SrImage;
var TerrainTextureImageArray = Array(13);
var PlayerImage = new SrImage;
var SmallItemImage = new SrImage;
var LargeItemImage = new SrImage;
var EnemyHeadImage = new SrImage;
var SignImage = new SrImage;
var ProjectileImage = new SrImage;
var TitleImage = new SrImage;
var StageEffectImage = new SrImage;
var HouseImage = new SrImage;
var WaterImage = new SrImage;
var BloodImage = new SrImage;
var ForgetTreeImage = new SrImage;
var MapElevationImage = new SrImage;
var MapTileImage = new SrImage;
var MapImage = new SrImage;
var MapSymbolImage = new SrImage;
var SequenceStep = 0;
var TextFadeTime = 0;
var CurrentStage = 0;
var CurrentArea = 0;
var SignTouch = 0;
var SelectedPanel = 0;
var SelectedPlayer = 3;
var MouseUp = !1;
var MenuSelected = 0;
var MenuRow = 0;
var MenuEntry = 0;
var PlayerClassBackup = [0, 0, 0, 0];
var PlayerItemBackup = [0, 0, 0, 0];
var PlayerCompo1Backup = [0, 0, 0, 0];
var PlayerCompo2Backup = [0, 0, 0, 0];
var TargetEnemyCurrentLp = 0;
var TargetEnemyMaxLp = 0;
var TargetEnemyTime = 0;
var TargetEnemyIndex = 0;
var ClickToSell = 0;
var EnemySpawnScale = 100;
var AngerCrownLightningTime = 0;
var PartyLv = [1, 1];
var PartyFp = [1, 1];
var PartyRank = [0, 0];
var PlayerSp = [0, 0, 0, 0, 0, 0, 0, 0];
var PartyExp = 0;
var PartyGold = 0;
var PlayerClass = [0, 0, 0, 0, 0, 0, 0, 0];
var PlayerCurrentLp = [50, 50, 50, 50, 50, 50, 50, 50];
var PlayerMp = [0, 0, 0, 0, 0, 0, 0, 0];
var PlayerSpLp = [0, 0, 0, 0, 0, 0, 0, 0];
var PlayerSpStr = [0, 0, 0, 0, 0, 0, 0, 0];
var PlayerSpDex = [0, 0, 0, 0, 0, 0, 0, 0];
var PlayerSpMag = [0, 0, 0, 0, 0, 0, 0, 0];
var PlayerMaxLp = [50, 50, 50, 50, 50, 50, 50, 50];
var PlayerStr = [0, 0, 0, 0, 0, 0, 0, 0];
var PlayerDex = [0, 0, 0, 0, 0, 0, 0, 0];
var PlayerMag = [0, 0, 0, 0, 0, 0, 0, 0];
var PlayerMinAt = [0, 0, 0, 0, 0, 0, 0, 0];
var PlayerMaxAt = [0, 0, 0, 0, 0, 0, 0, 0];
var PlayerMinAgi = [0, 0, 0, 0, 0, 0, 0, 0];
var PlayerMaxAgi = [0, 0, 0, 0, 0, 0, 0, 0];
var PlayerAttackRange = [0, 0, 0, 0, 0, 0, 0, 0];
var PlayerAutoMove = [1, 1, 1, 1, 1, 1, 1, 1];
var PartyMoveIfDying = 0;
var PartyDamageEffect = 0;
var PartyShowLpBar = 0;
var PartyPlayerSymbol = 0;
var PartyDragDeadBody = 1;
var PlayerStrAura = [0, 0, 0, 0, 0, 0, 0, 0];
var PlayerDexAura = [0, 0, 0, 0, 0, 0, 0, 0];
var PlayerMagAura = [0, 0, 0, 0, 0, 0, 0, 0];
var InventoryItem = [
    0, 0, 0, 0,
    0, 0, 0, 0,
    0, 0, 0, 0,
    0, 0, 0, 0,
    0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0,
    0
];
var InventoryCompo1 = [
    0, 0, 0, 0,
    0, 0, 0, 0,
    0, 0, 0, 0,
    0, 0, 0, 0,
    0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0,
    0
];
var InventoryCompo2 = [
    0, 0, 0, 0,
    0, 0, 0, 0,
    0, 0, 0, 0,
    0, 0, 0, 0,
    0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0,
    0
];
var CLASS_NAME = "Stickman Boxer Gladiator Sniper Magician Priest Gunner Whipper Angel".split(" ");
var RANK_NAME = "123456789S".split("");
var SHOP_DATA = [
    [
        [3, 7, 11, 15, 54, 64, 68, 72, 116, 121, 131, 137, 153, 178, 202, 214, 226, 253, 312, 328, 345, 360, 394, 410, 429, 451, 471, 479, 496, 504, 512, 520, 549],
        [4, 8, 12, 16, 55, 65, 69, 73, 117, 122, 132, 138, 154, 179, 203, 215, 227, 254, 313, 329, 346, 361, 395, 411, 430, 452, 472, 480, 497, 505, 513, 521, 550],
        [5, 9, 13, 17, 56, 66, 70, 74, 118, 123, 133, 139, 155, 180, 204, 216, 228, 255, 314, 330, 347, 362, 396, 412, 431, 453, 473, 481, 498, 506, 514, 522, 551],
        [6, 10, 14, 18, 57, 67, 71, 75, 119, 124, 134, 140, 156, 181, 205, 217, 229, 256, 315, 331, 348, 363, 397, 413, 432, 454, 474, 482, 499, 507, 515, 523, 552],
        [58, 60, 61, 62, 63, 115, 126, 127, 128, 129, 135, 141, 157, 182, 206, 218, 230, 257, 316, 332, 349, 364, 398, 414, 433, 455, 475, 483, 500, 508, 516, 524, 553],
        [76, 77, 78, 79, 80, 81, 82, 83, 120, 125, 136, 142, 158, 183, 207, 219, 231, 258, 317, 333, 350, 365, 399, 415, 434, 456, 476, 484, 501, 509, 517, 525, 554],
        [188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 208, 220, 232, 259, 318, 334, 351, 366, 400, 416, 435, 457, 477, 485, 502, 510, 518, 526, 555],
        [289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 319, 335, 352, 367, 401, 417, 436, 458, 478, 486, 503, 511, 519, 527, 556]
    ],
    [
        [19, 20, 21, 22, 23, 0, 0, 0, 0],
        [24, 25, 26, 27, 28, 0, 0, 0, 0],
        [31, 32, 33, 34, 35, 36, 37, 38, 0],
        [29, 39, 40, 41, 42, 43, 44, 45, 47, 46, 341, 389, 406, 441, 459],
        [51, 52, 53, 48, 0, 0, 0, 0, 0],
        [243, 244, 245, 0, 0, 0, 0, 0, 0],
        [277, 285, 0, 0, 0, 0, 0, 0, 0]
    ],
    [
        [270, 270, 0, 0, 0, 0, 0, 0, 0],
        [271, 271, 0, 0, 0, 0, 0, 0, 0],
        [272, 272, 0, 0, 0, 0, 0, 0, 0],
        [273, 273, 0, 0, 0, 0, 0, 0, 0],
        [274, 274, 0, 0, 0, 0, 0, 0, 0],
        [275, 275, 0, 0, 0, 0, 0, 0, 0],
        [276, 276, 0, 0, 0, 0, 0, 0, 0],
        [307, 307, 0, 0, 0, 0, 0, 0, 0]],
    [
        [19, 84, 143, 209, 323, 418, 20, 85, 144, 210, 324, 419, 21, 86, 145, 211, 325, 420, 22, 87, 146, 212, 326, 421, 23, 88, 147, 213, 327, 422], [24, 89, 148, 221, 336, 0, 25, 90, 149, 222, 337, 0, 26, 91, 150, 223, 338, 0, 27, 92, 151, 224, 339, 0, 28, 93, 152, 225, 340, 0],
        [31, 96, 161, 260, 369, 0, 32, 97, 162, 261, 370, 0, 33, 98, 163, 262, 371, 0, 34, 99, 164, 263, 372, 0, 35, 100, 165, 264, 373, 0, 36, 101, 166, 265, 374, 0, 37, 102, 167, 266, 375, 0, 38, 103, 168, 267, 376, 0],
        [39, 104, 169, 237, 353, 0, 40, 105, 170, 242, 354, 0, 41, 106, 171, 240, 355, 0, 42, 107, 172, 268, 0, 0, 43, 108, 173, 269, 356, 0, 44, 109, 174, 238, 357, 0, 45, 110, 175, 249, 0, 0, 47, 111, 176, 239, 358, 0, 46, 130, 177, 241, 359, 0, 341, 342, 343, 344, 368, 0, 389, 390, 391, 392, 393, 0, 406, 407, 408, 409, 0, 0, 459, 460, 461, 462, 463, 0],
        [385, 386, 387, 388, 0, 0, 0, 0, 0],
        [243, 244, 245, 246, 247, 248, 250, 251, 252, 320, 321, 322],
        [277, 285, 377, 279, 287, 379, 281, 308, 381, 283, 310, 0]
    ]
];
var ITEM_DATA = Array(558);
ITEM_DATA[0] = ["NONE", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[59] = ["NG", 0, 0, 13, 12, 9, 4287137928, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[1] = ["gold", 0, 0, 1, 0, 0, 4294967295, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[2] = ["onigiri", 0, 0, 2, 0, 0, 4294967295, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[3] = ["glove", 0, 100, 3, 2, 1, 4284901119, 1, 0, 0, 1, 3, 0, 0, 15, 20, 15, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[4] = ["sword", 0, 100, 4, 3, 2, 4287137928, 1, 0, 0, 1, 5, 0, 0, 20, 30, 30, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[5] = ["bow", 0, 100, 5, 4, 3, 4294954086, 1, 4, 0, 2, 3, 1, 100, 30, 40, 90, 1, 3, 4294954086, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[6] = ["magic", 0, 100, 6, 5, 4, 4278255615, 1, 3, 0, 5, 10, 1, 30, 80, 90, 90, 0, 2, 4278225151, 1, 16, 16, 8, 8, 0, 0, 300, 10, 0, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[58] = ["staff", 0, 100, 12, 11, 5, 4288217343, 1, 6, 0, 1, 2, 1, 0, 80, 90, 70, 0, 15, 4291598847, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[76] = ["gun", 0, 100, 14, 13, 6, 4288256409, 1, 3, 0, 2, 6, 1, 30, 20, 30, 60, 1, 17, 4288256409, 1, 16, 16, 8, 8, 0, 0, 50, 10, 0, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[7] = ["mach punch", 1, 250, 3, 2, 1, 4291611852, 1, 0, 0, 1, 3, 0, 0, 5, 10, 15, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[11] = ["thunder glove", 1, 500, 3, 2, 1, 4294967142, 1, 3, 0, 2, 4, 1, 10, 15, 22, 15, 1, 1, 4294967040, 1, 12, 48, 16, 16, 0, 0, 10, 10, 0, 100, 0, 0, 0, 3, 0, 10, 0, 0, 1, 29, 0];
ITEM_DATA[15] = ["fire glove", 1, 750, 3, 2, 1, 4294919236, 1, 3, 0, 2, 4, 1, 8, 15, 22, 15, 1, 5, 4294927889, 2, 16, 32, 16, 32, 0, 0, 40, 10, 0, 100, 0, 0, 0, 1, 50, 10, 0, 0, 7, 9, 0];
ITEM_DATA[54] = ["poison glove", 1, 1E3, 3, 2, 1, 4278255360, 1, 3, 0, 2, 4, 1, 8, 15, 22, 15, 1, 6, 4278255360, 2, 16, 16, 16, 16, 0, 0, 10, 10, 0, 100, 0, 0, 0, 4, 15, 12, 0, 0, 2, 2, 0];
ITEM_DATA[64] = ["freeze glove", 2, 1500, 3, 2, 1, 4291611903, 1, 3, 0, 2, 4, 1, 10, 15, 24, 15, 1, 4, 4291611903, 1, 16, 32, 16, 16, 0, 0, 10, 10, 0, 100, 0, 0, 0, 5, 5, 15, 0, 0, 8, 12, 0];
ITEM_DATA[68] = ["needle glove", 2, 2E3, 3, 2, 1, 4291603080, 1, 3, 0, 2, 4, 9, 20, 15, 24, 15, 1, 9, 4291603080, 1, 16, 16, 16, 16, 30, 5, 10, 10, 0, 100, 0, 0, 0, 0, 0, 50, 0, 0, 10, 12, 0];
ITEM_DATA[72] = ["spark glove", 2, 2500, 3, 2, 1, 4294967176, 1, 4, 0, 2, 4, 6, 30, 15, 24, 15, 0, 13, 4294967244, 2, 16, 16, 8, 8, 8, 20, 80, 10, 5, 100, 0, 1, 0, 3, 0, 50, 0, 0, 1, 29, 0];
ITEM_DATA[116] = ["sonic punch", 2, 3E3, 3, 2, 1, 4294967295, 1, 1, 1, 1, 3, 0, 0, 5, 10, 15, 0, 14, 4294967295, 2, 16, 16, 0, 0, 0, 1, 0, 15, 0, 0, 0, 0, 0, 0, 0, -1, 0];
ITEM_DATA[121] = ["thunder knuckle", 3, 4E3, 3, 18, 1, 4294967142, 1, 3, 0, 4, 8, 2, 10, 15, 26, 15, 1, 10, 4294967091, 2, 12, 32, 16, 16, 10, 0, 8, 8, 0, 100, 0, 0, 0, 3, 0, 25, 0, 0, 1, 29, 0];
ITEM_DATA[131] = ["fire knuckle", 3, 4500, 3, 18, 1, 4294919236, 1, 2, 0, 5, 10, 1, 1, 15, 26, 15, 1, 5, 4294927889, 2, 16, 32, 32, 16, 0, 0, 40, 10, 0, 100, 0, 0, 0, 1, 50, 25, 0, 0, 15, 18, 0];
ITEM_DATA[137] = ["mach knuckle", 3, 5E3, 3, 18, 1, 4291611852, 1, 0, 0, 12, 18, 0, 0, 5, 10, 15, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[153] = ["poison knuckle", 3, 5500, 3, 18, 1, 4278255360, 1, 3, 0, 6, 12, 1, 8, 15, 26, 15, 1, 9, 4278255360, 2, 16, 32, 16, 16, 0, 0, 10, 20, 0, 100, 0, 0, 0, 4, 15, 30, 0, 0, 4, 4, 0];
ITEM_DATA[178] = ["freeze knuckle", 4, 6E3, 3, 18, 1, 4291611903, 1, 3, 0, 8, 16, 2, 10, 15, 28, 15, 1, 4, 4291611903, 1, 16, 32, 16, 16, 0, 0, 10, 10, 0, 100, 0, 0, 0, 5, 10, 30, 0, 0, 12, 20, 0];
ITEM_DATA[202] = ["needle knuckle", 4, 6500, 3, 18, 1, 4291603080, 1, 403, 0, 8, 16, 18, 20, 15, 28, 15, 1, 9, 4291603080, 1, 16, 16, 16, 16, 50, 5, 10, 10, 0, 100, 0, 0, 0, 0, 0, 80, 0, 0, 11, 13, 0];
ITEM_DATA[214] = ["spark knuckle", 4, 7E3, 3, 18, 1, 4294967176, 1, 1204, 0, 8, 16, 8, 30, 15, 28, 15, 1, 18, 4294967244, 2, 2, 8, 8, 8, 8, 20, 100, 10, 5, 100, 0, 2, 0, 3, 0, 80, 0, 0, 1, 50, 0];
ITEM_DATA[226] = ["sonic knuckle", 4, 7500, 3, 18, 1, 4294967295, 1, 5703, 1, 12, 18, 9, 10, 5, 10, 15, 1, 12, 4287137928, 2, 16, 3, 0, 0, 0, 10, 10, 15, 0, 90, 1, 0, 0, 0, 0, -1, 0];
ITEM_DATA[253] = ["thunder claw", 5, 8E3, 3, 19, 1, 4294967142, 1, 3, 0, 9, 18, 3, 20, 15, 30, 15, 1, 9, 4294967091, 2, 8, 24, 16, 16, 3, 3, 10, 10, 0, 95, 0, 0, 0, 3, 0, 35, 0, 0, 1, 45, 0];
ITEM_DATA[312] = ["fire claw", 5, 8500, 3, 19, 1, 4294919236, 1, 3, 0, 9, 18, 3, 3, 15, 30, 15, 1, 9, 4294927889, 2, 8, 24, 16, 16, 0, 0, 60, 10, 0, 100, 0, 0, 0, 1, 50, 35, 0, 0, 10, 15, 0];
ITEM_DATA[328] = ["mach claw", 5, 9E3, 3, 19, 1, 4291611852, 1, 0, 0, 36, 54, 0, 0, 5, 10, 15, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[345] = ["poison claw", 5, 9500, 3, 19, 1, 4278255360, 1, 3, 0, 9, 18, 3, 8, 15, 30, 15, 1, 9, 4278255360, 2, 8, 20, 8, 8, 0, 7, 10, 20, 0, 100, 0, 0, 0, 4, 15, 40, 0, 0, 5, 5, 0];
ITEM_DATA[360] = ["freeze claw", 6, 1E4, 3, 19, 1, 4291611903, 1, 3, 0, 10, 20, 3, 10, 15, 32, 15, 1, 9, 2295123199, 2, 8, 32, 8, 8, 0, 9, 10, 10, 0, 100, 1, 0, 0, 5, 15, 45, 0, 0, 18, 36, 0];
ITEM_DATA[394] = ["needle claw", 6, 11E3, 3, 19, 1, 4291603080, 1, 303, 0, 10, 20, 30, 20, 15, 32, 15, 1, 9, 4291603080, 1, 8, 8, 8, 8, 0, 5, 10, 10, 0, 90, 0, 2, 0, 0, 0, 90, 0, 0, 12, 14, 0];
ITEM_DATA[410] = ["spark claw", 6, 12E3, 3, 19, 1, 4294967176, 1, 109, 0, 10, 20, 10, 1, 15, 32, 15, 1, 13, 4294967244, 2, 8, 8, 8, 8, 8, 20, 120, 10, 1, 99, 0, 2, 20, 3, 0, 100, 0, 0, 1, 99, 0];
ITEM_DATA[429] = ["sonic claw", 6, 13E3, 3, 19, 1, 4294967295, 1, 3, 1, 36, 54, 7, 10, 5, 10, 15, 1, 12, 1157627903, 2, 32, 3, 0, 0, 0, 10, 10, 10, 0, 90, 1, 0, 0, 0, 0, -1, 0];
ITEM_DATA[451] = ["thunder cestus", 7, 15E3, 3, 20, 1, 4294967142, 1, 9, 0, 11, 22, 5, 4, 15, 34, 15, 1, 20, 4294967091, 2, 16, 48, 16, 16, 10, 3, 10, 10, 0, 95, 1, 0, 0, 3, 0, 40, 0, 0, 1, 120, 0];
ITEM_DATA[471] = ["fire cestus", 7, 16E3, 3, 20, 1, 4294919236, 1, 9, 0, 11, 22, 5, 2, 15, 34, 15, 1, 22, 4294927889, 2, 4, 24, 16, 16, 10, 0, 50, 10, 0, 95, 1, 0, 0, 1, 50, 40, 0, 0, 20, 40, 0];
ITEM_DATA[479] = ["mach cestus", 7, 17E3, 3, 20, 1, 4291611852, 1, 0, 0, 80, 120, 0, 0, 4, 6, 15, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[496] = ["poison cestus", 7, 18E3, 3, 20, 1, 4278255360, 1, 109, 0, 11, 22, 6, 5, 15, 34, 15, 0, 6, 4278242304, 2, 16, 16, 24, 24, 0, 9, 10, 10, 0, 80, 0, 1, 0, 4, 5, 50, 0, 0, 24, 24, 0];
ITEM_DATA[504] = ["freeze cestus", 8, 19E3, 3, 20, 1, 4291611903, 1, 109, 0, 12, 24, 6, 10, 15, 36, 15, 1, 16, 2295123199, 2, 16, 16, 12, 12, 0, 9, 10, 30, 0, 60, 1, 0, 0, 5, 20, 60, 0, 0, 26, 60, 0];
ITEM_DATA[8] = ["iron sword", 1, 250, 4, 3, 2, 4289374890, 1, 0, 0, 5, 10, 0, 0, 20, 30, 30, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[12] = ["fire sword", 1, 500, 4, 3, 2, 4294919236, 1, 1, 0, 10, 15, 0, 0, 20, 30, 30, 0, 5, 4294927889, 2, 16, 32, 16, 32, 0, 0, 50, 10, 50, 100, 0, 1, 0, 1, 20, 10, 0, 0, 1, 3, 10];
ITEM_DATA[16] = ["thunder sword", 1, 750, 4, 3, 2, 4294967142, 1, 1, 0, 10, 15, 0, 0, 20, 30, 30, 1, 10, 4294967108, 2, 16, 16, 8, 8, 0, 0, 12, 10, 50, 100, 0, 0, 0, 3, 0, 10, 0, 0, 1, 7, 10];
ITEM_DATA[55] = ["ice sword", 1, 1E3, 4, 3, 2, 4289374975, 1, 1, 0, 10, 15, 0, 0, 20, 30, 30, 0, 8, 2292886271, 2, 12, 12, 8, 8, 0, 0, 10, 10, 0, 100, 0, 0, 0, 2, 20, 12, 0, 0, 3, 5, 10];
ITEM_DATA[65] = ["long sword", 2, 1500, 4, 3, 2, 4290493371, 1, 0, 0, 10, 20, 0, 0, 20, 30, 35, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[69] = ["lightsaber", 2, 2E3, 4, 3, 2, 4294967142, 2, 7, 0, 10, 15, 1, 1, 20, 30, 30, 1, 10, 2298478404, 2, 16, 32, 16, 16, 0, 0, 10, 10, 0, 100, 0, 0, 0, 3, 0, 70, 0, 0, 1, 7, 70];
ITEM_DATA[73] = ["flame sword", 2, 2500, 4, 3, 2, 4294919236, 1, 7, 1, 10, 15, 1, 5, 20, 30, 30, 1, 6, 4294927889, 2, 8, 32, 16, 16, 0, 0, 20, 10, 0, 100, 0, 0, 0, 1, 50, 70, 0, 0, 1, 3, 70];
ITEM_DATA[117] = ["frozen sword", 2, 3E3, 4, 3, 2, 4288269567, 1, 7, 1, 10, 15, 1, 20, 20, 30, 30, 1, 4, 4288269567, 2, 16, 64, 64, 32, 0, 5, 10, 40, 0, 100, 0, 0, 0, 2, 20, 70, 0, 0, 20, 30, 3];
ITEM_DATA[122] = ["sabel", 3, 4E3, 4, 21, 2, 4289374890, 1, 0, 0, 20, 40, 0, 0, 20, 30, 30, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[132] = ["fire sabel", 3, 4500, 4, 21, 2, 4294919236, 1, 7, 0, 12, 18, 1, 1, 20, 30, 30, 1, 6, 4294927889, 2, 20, 6, 16, 16, 0, 0, 50, 15, 0, 99, 1, 0, 0, 1, 25, 20, 0, 0, 5, 6, 10];
ITEM_DATA[138] = ["thunder sabel", 3, 5E3, 4, 21, 2, 4294967142, 1, 10, 0, 12, 18, 1, 20, 20, 30, 30, 1, 10, 4294967108, 2, 16, 16, 8, 8, 0, 3, 9, 10, 10, 100, 0, 0, 0, 3, 0, 20, 0, 0, 1, 29, 10];
ITEM_DATA[154] = ["ice sabel", 3, 5500, 4, 21, 2, 4289374975, 1, 7, 0, 12, 18, 1, 1, 20, 30, 30, 1, 4, 2292886271, 2, 16, 32, 16, 16, 0, 0, 50, 10, 0, 90, 1, 0, 0, 2, 20, 25, 0, 0, 10, 20, 10];
ITEM_DATA[179] = ["long sabel", 4, 6E3, 4, 21, 2, 4290493371, 1, 0, 0, 20, 50, 0, 0, 20, 30, 40, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[203] = ["lightsaber", 4, 6500, 4, 21, 2, 4284940134, 2, 7, 0, 15, 20, 1, 1, 20, 30, 30, 1, 18, 2286223172, 2, 16, 32, 16, 16, 0, 0, 10, 10, 0, 100, 0, 0, 0, 3, 0, 100, 0, 0, 1, 14, 100];
ITEM_DATA[215] = ["flame sabel", 4, 7E3, 4, 21, 2, 4294919236, 1, 7, 1, 15, 20, 1, 5, 20, 30, 30, 1, 6, 4294927889, 2, 8, 32, 16, 16, 0, 0, 20, 10, 0, 100, 0, 0, 50, 1, 50, 100, 0, 0, 2, 6, 100];
ITEM_DATA[227] = ["frozen sabel", 4, 7500, 4, 21, 2, 4288269567, 1, 7, 0, 15, 20, 1, 15, 20, 30, 30, 1, 4, 4288269567, 2, 12, 16, 8, 8, 0, 15, 100, 10, 0, 100, 0, 0, 100, 5, 5, 100, 0, 0, 20, 30, 10];
ITEM_DATA[254] = ["blade", 5, 8E3, 4, 22, 2, 4289374890, 1, 0, 0, 50, 80, 0, 0, 20, 30, 30, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[313] = ["fire blade", 5, 8500, 4, 22, 2, 4294919236, 1, 7, 0, 20, 20, 1, 1, 20, 30, 30, 1, 9, 2298439185, 2, 8, 32, 16, 16, 0, 0, 200, 15, 0, 99, 0, 0, 0, 1, 30, 30, 0, 0, 3, 4, 10];
ITEM_DATA[329] = ["thunder blade", 5, 9E3, 4, 22, 2, 4294967142, 1, 7, 0, 20, 20, 30, 1, 20, 30, 30, 1, 10, 2298478404, 2, 16, 40, 32, 16, 90, 0, 3, 3, 0, 100, 0, 0, 0, 3, 0, 30, 0, 0, 1, 29, 1];
ITEM_DATA[346] = ["ice blade", 5, 9500, 4, 22, 2, 4289374975, 1, 7, 0, 20, 20, 1, 15, 20, 30, 30, 1, 4, 2292886271, 2, 8, 16, 8, 8, 0, 20, 60, 10, 0, 100, 1, 0, 50, 2, 20, 35, 0, 0, 15, 35, 10];
ITEM_DATA[361] = ["long blade", 6, 1E4, 4, 22, 2, 4290493371, 1, 0, 0, 50, 100, 0, 0, 20, 30, 45, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[395] = ["lightsaber", 6, 11E3, 4, 22, 2, 4284901119, 2, 7, 0, 20, 25, 1, 1, 20, 30, 30, 1, 9, 2286175487, 2, 16, 32, 16, 16, 0, 0, 10, 10, 0, 100, 0, 0, 0, 3, 0, 120, 0, 0, 1, 45, 120];
ITEM_DATA[411] = ["flame blade", 6, 12E3, 4, 22, 2, 4294919236, 1, 7, 1, 20, 25, 1, 10, 20, 30, 30, 1, 6, 2298430481, 2, 10, 30, 16, 16, 0, 0, 60, 10, -1, 90, 1, 0, 0, 1, 50, 120, 0, 0, 6, 9, 120];
ITEM_DATA[430] = ["frozen blade", 6, 13E3, 4, 22, 2, 4288269567, 1, 3, 1, 20, 25, 1, 20, 20, 30, 30, 1, 4, 3432631551, 2, 16, 64, 48, 48, 0, 5, 10, 40, 0, 100, 0, 0, 0, 5, 5, 120, 0, 0, 40, 60, 3];
ITEM_DATA[452] = ["GreatSword", 7, 15E3, 4, 23, 2, 4289374890, 1, 0, 0, 150, 250, 0, 0, 20, 30, 30, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[472] = ["fire GS", 7, 16E3, 4, 23, 2, 4294919236, 1, 1, 0, 30, 30, 0, 0, 20, 30, 30, 0, 23, 3439289873, 2, 16, 32, 16, 32, 0, 0, 200, 10, 50, 100, 0, 1, 0, 1, 35, 40, 0, 0, 6, 8, 15];
ITEM_DATA[480] = ["thunder GS", 7, 17E3, 4, 23, 2, 4294967142, 1, 7, 0, 30, 30, 9, 1, 20, 30, 30, 1, 10, 2298478404, 2, 8, 32, 16, 16, 30, 0, 3, 3, 0, 100, 0, 0, 0, 3, 0, 40, 0, 0, 1, 29, 10];
ITEM_DATA[497] = ["ice GS", 7, 18E3, 4, 23, 2, 4289374975, 1, 7, 1, 30, 30, 1, 40, 20, 30, 30, 1, 22, 2292886271, 2, 8, 48, 48, 48, 0, 5, 6, 10, 0, 100, 1, 0, 0, 2, 25, 45, 0, 0, 25, 55, 10];
ITEM_DATA[505] = ["long GS", 8, 19E3, 4, 23, 2, 4290493371, 1, 0, 0, 100, 200, 0, 0, 20, 30, 50, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[9] = ["triple shot", 1, 250, 5, 14, 3, 4294954086, 1, 3, 0, 2, 3, 3, 100, 30, 40, 150, 1, 3, 4294954086, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[13] = ["poison arrow", 1, 500, 5, 4, 3, 4278255360, 1, 4, 0, 4, 6, 1, 100, 30, 40, 90, 1, 3, 4278255360, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 4, 50, 10, 1, 0, 1, 1, 1, 0, 6, 4278255360, 1, 32, 32, 32, 32, 0, 0, 100, 10, 0, 100, 0, 0];
ITEM_DATA[17] = ["double arrow", 1, 750, 5, 15, 3, 4294954086, 1, 4, 0, 8, 12, 2, 100, 30, 40, 90, 1, 3, 4294954086, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[56] = ["fire arrow", 1, 1E3, 5, 4, 3, 4294919236, 1, 4, 0, 8, 12, 1, 100, 30, 40, 90, 1, 3, 4294919236, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 1, 50, 12, 1, 1, 4, 6, 1, 0, 5, 4294927889, 2, 16, 32, 16, 32, 0, 0, 100, 10, 30, 100, 0, 1];
ITEM_DATA[66] = ["triple arrow", 2, 1500, 5, 16, 3, 4294954086, 1, 4, 0, 8, 12, 3, 100, 30, 40, 90, 1, 3, 4294954086, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[70] = ["quad arrow", 2, 2E3, 5, 17, 3, 4294954086, 1, 4, 0, 8, 12, 4, 100, 30, 40, 90, 1, 3, 4294954086, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[74] = ["oct arrow", 2, 2500, 5, 17, 3, 4294954086, 1, 4, 0, 4, 6, 8, 100, 45, 60, 90, 1, 3, 4294954086, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[118] = ["double poison", 2, 3E3, 5, 15, 3, 4288269312, 1, 4, 0, 8, 12, 2, 100, 30, 40, 90, 1, 3, 4288269312, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 4, 50, 20, 1, 0, 1, 2, 1, 0, 6, 2291780608, 1, 32, 32, 32, 32, 0, 0, 100, 10, 0, 100, 0, 0];
ITEM_DATA[123] = ["quint shot", 3, 4E3, 5, 14, 3, 4294954086, 1, 3, 0, 4, 6, 5, 100, 30, 40, 150, 1, 3, 4294954086, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[133] = ["double fire", 3, 4500, 5, 15, 3, 4294919236, 1, 4, 0, 9, 15, 2, 100, 30, 40, 90, 1, 3, 4294919236, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 1, 50, 20, 1, 1, 8, 9, 1, 0, 5, 4294927889, 2, 16, 32, 16, 32, 0, 0, 100, 10, 30, 100, 0, 1];
ITEM_DATA[139] = ["double iron arrow", 3, 5E3, 5, 15, 3, 4284900966, 1, 4, 0, 16, 24, 2, 80, 30, 40, 90, 1, 3, 4284900966, 1, 16, 16, 8, 8, 0, 0, 300, 10, 8, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[155] = ["triple iron arrow", 3, 5500, 5, 16, 3, 4284900966, 1, 104, 0, 15, 20, 3, 80, 30, 40, 90, 1, 3, 4284900966, 1, 16, 16, 8, 8, 30, 0, 300, 10, 8, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[180] = ["triple poison", 4, 6E3, 5, 16, 3, 4288269312, 1, 4, 0, 10, 16, 3, 80, 30, 40, 90, 1, 3, 4288269312, 1, 16, 16, 8, 8, 0, 0, 300, 10, 8, 100, 0, 0, 0, 4, 50, 25, 1, 0, 2, 2, 1, 0, 6, 2291780608, 1, 32, 32, 32, 32, 0, 0, 100, 10, 0, 100, 0, 0];
ITEM_DATA[204] = ["fire shot", 4, 6500, 5, 14, 3, 4294919236, 1, 3, 0, 4, 6, 3, 15, 30, 40, 90, 1, 3, 4294919236, 1, 16, 16, 8, 8, 0, 0, 300, 10, 0, 100, 0, 0, 0, 1, 50, 30, 5, 1, 6, 8, 1, 1, 5, 4294927889, 2, 16, 32, 16, 16, 0, 0, 100, 10, 0, 100, 1, 0];
ITEM_DATA[216] = ["quad iron arrow", 4, 7E3, 5, 17, 3, 4284900966, 1, 4, 0, 16, 24, 4, 80, 30, 40, 90, 1, 3, 4284900966, 1, 16, 16, 8, 8, 0, 0, 300, 10, 8, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[228] = ["nonuple arrow", 4, 7500, 5, 17, 3, 4284900966, 1, 4, 0, 8, 12, 9, 80, 45, 60, 90, 1, 3, 4284900966, 1, 16, 16, 8, 8, 0, 0, 300, 10, 8, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[255] = ["poison shot", 5, 8E3, 5, 14, 3, 4288269312, 1, 3, 0, 4, 6, 3, 15, 30, 40, 90, 1, 3, 4288269312, 1, 16, 16, 4, 4, 0, 0, 300, 10, 0, 100, 0, 0, 0, 4, 50, 35, 1, 0, 2, 2, 1, 0, 6, 2291780608, 1, 24, 24, 8, 8, 0, 0, 100, 10, 0, 100, 1, 0];
ITEM_DATA[314] = ["flame arrow", 5, 8500, 5, 4, 3, 4294940979, 1, 4, 0, 16, 24, 1, 80, 30, 40, 90, 1, 3, 4294940979, 1, 16, 16, 8, 8, 0, 0, 300, 10, 8, 100, 0, 0, 0, 1, 50, 35, 3, 1, 8, 9, 5, 0, 6, 4294927889, 2, 16, 16, 16, 16, 0, 0, 100, 10, 0, 98, 0, 1];
ITEM_DATA[330] = ["sept shot", 5, 9E3, 5, 14, 3, 4294954086, 1, 803, 0, 6, 9, 7, 80, 30, 40, 150, 1, 3, 4294954086, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[347] = ["pierce arrow", 5, 9500, 5, 17, 3, 4293848814, 1, 4, 0, 16, 24, 4, 80, 30, 40, 90, 1, 3, 4293848814, 1, 16, 16, 8, 8, 0, 0, 300, 10, 8, 100, 1, 0, 0, 0, 0, 0, 0];
ITEM_DATA[362] = ["quint poison", 6, 1E4, 5, 17, 3, 4288269312, 1, 4, 0, 16, 24, 5, 80, 30, 40, 90, 1, 3, 4288269312, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 4, 50, 40, 1, 0, 2, 2, 1, 0, 6, 2291780608, 1, 24, 24, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0];
ITEM_DATA[396] = ["double flame", 6, 11E3, 5, 15, 3, 4294940979, 1, 4, 0, 16, 24, 2, 80, 30, 40, 90, 1, 3, 4294940979, 1, 16, 16, 8, 8, 0, 0, 300, 10, 8, 100, 0, 0, 0, 1, 50, 40, 3, 1, 8, 9, 3, 0, 6, 4294927889, 2, 16, 16, 16, 16, 0, 0, 100, 10, 0, 98, 0, 1];
ITEM_DATA[412] = ["quad steel arrow", 6, 12E3, 5, 17, 3, 4288256409, 1, 604, 0, 48, 72, 4, 60, 30, 40, 90, 1, 3, 4288256409, 1, 16, 16, 8, 8, 0, 0, 300, 10, 8, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[431] = ["undecuple arrow", 6, 13E3, 5, 17, 3, 4288256409, 1, 4, 0, 24, 36, 11, 80, 45, 60, 90, 1, 3, 4288256409, 1, 16, 16, 8, 8, 0, 0, 300, 10, 8, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[453] = ["nonuple shot", 7, 15E3, 5, 14, 3, 4294954086, 1, 803, 0, 8, 12, 9, 80, 30, 40, 150, 1, 3, 4294954086, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[473] = ["flame shot", 7, 16E3, 5, 14, 3, 4294919236, 1, 803, 0, 8, 12, 5, 10, 30, 40, 90, 1, 3, 4294919236, 1, 16, 16, 8, 8, 0, 0, 300, 10, 0, 100, 0, 0, 0, 1, 50, 45, 5, 1, 12, 16, 1, 1, 22, 4294927889, 2, 16, 16, 16, 16, 0, 0, 100, 10, 0, 100, 1, 0];
ITEM_DATA[481] = ["oct poison", 7, 17E3, 5, 17, 3, 4288269312, 1, 4, 0, 16, 24, 8, 80, 30, 40, 90, 1, 3, 4288269312, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 4, 50, 45, 1, 0, 3, 3, 1, 0, 6, 2291780608, 1, 24, 24, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0];
ITEM_DATA[498] = ["double hell fire", 7, 18E3, 5, 15, 3, 4294901862, 1, 4, 0, 16, 24, 2, 70, 30, 40, 90, 1, 3, 4288217139, 1, 16, 16, 8, 8, 0, 0, 300, 10, 9, 100, 0, 0, 0, 1, 50, 50, 1, 1, 90, 99, 1, 0, 24, 4294910532, 2, 16, 32, 16, 32, 0, 0, 100, 10, 30, 100, 0, 1];
ITEM_DATA[506] = ["quint gold arrow", 8, 19E3, 5, 4, 3, 4294956800, 1, 104, 0, 96, 144, 5, 80, 30, 40, 90, 1, 3, 4294956800, 1, 16, 16, 8, 8, 30, 0, 300, 10, 8, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[10] = ["explosion", 1, 250, 6, 5, 4, 4294936576, 1, 3, 0, 5, 10, 1, 30, 80, 90, 90, 0, 2, 4294936576, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 1, 0, 0, 1, 1, 5, 10, 1, 0, 2, 1157597184, 1, 48, 48, 32, 32, 0, 0, 10, 10, 0, 100, 0, 0];
ITEM_DATA[14] = ["ice", 1, 500, 6, 5, 4, 4290493439, 1, 3, 0, 5, 10, 1, 30, 80, 90, 90, 0, 7, 4287138047, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 2, 30, 0, 0];
ITEM_DATA[18] = ["fire", 1, 750, 6, 5, 4, 4294910498, 1, 4, 0, 2, 6, 1, 60, 80, 90, 80, 1, 5, 4294927889, 2, 16, 32, 16, 16, 0, 0, 100, 10, 5, 100, 0, 0, 0, 1, 80, 0, 1, 1, 2, 6, 1, 0, 5, 4294927889, 2, 32, 32, 32, 32, 0, 0, 200, 10, 50, 100, 0, 1];
ITEM_DATA[57] = ["thunder", 1, 1E3, 6, 5, 4, 4294967142, 1, 5, 0, 1, 30, 3, 5, 80, 90, 80, 1, 10, 4294967142, 2, 16, 16, 16, 16, 0, 0, 100, 10, 0, 100, 0, 0, 0, 3, 0, 0, 0];
ITEM_DATA[67] = ["freeze", 2, 1500, 6, 5, 4, 4291611903, 1, 3, 0, 5, 10, 1, 30, 80, 90, 90, 1, 16, 4291611903, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 5, 50, 0, 0];
ITEM_DATA[71] = ["blizzard", 2, 2E3, 6, 5, 4, 4287138047, 1, 8, 0, 5, 10, 9, 30, 120, 135, 90, 1, 16, 4287138047, 1, 16, 16, 8, 8, 100, 0, 100, 10, 8, 100, 0, 0, 0, 2, 30, 0, 0];
ITEM_DATA[75] = ["volcano", 2, 2500, 6, 5, 4, 4294919168, 1, 4, 0, 2, 6, 1, 50, 120, 135, 80, 0, 12, 4294919168, 2, 16, 16, 8, 8, 0, 0, 100, 10, 8, 100, 0, 0, 0, 1, 50, 0, 4, 1, 2, 6, 9, 0, 5, 4294927889, 2, 16, 32, 16, 32, 50, 0, 100, 10, 5, 98, 0, 1];
ITEM_DATA[119] = ["thunder storm", 2, 3E3, 6, 5, 4, 4294967091, 1, 8, 0, 1, 30, 12, 0, 120, 135, 90, 1, 10, 4294967091, 2, 16, 16, 8, 8, 100, 0, 100, 10, 90, 100, 0, 0, 0, 3, 0, 0, 0];
ITEM_DATA[124] = ["delta explosion", 3, 4E3, 6, 24, 4, 4294936576, 1, 9, 1, 10, 20, 3, 5, 80, 90, 80, 1, 2, 2298447906, 2, 8, 40, 24, 24, 10, 10, 15, 3, 0, 80, 1, 0, 0, 1, 0, 0, 0];
ITEM_DATA[134] = ["icicle", 3, 4500, 6, 24, 4, 4290493439, 1, 3, 0, 15, 25, 1, 50, 80, 90, 90, 1, 9, 4287138047, 1, 16, 24, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 2, 35, 0, 0];
ITEM_DATA[140] = ["fire rise", 3, 5E3, 6, 24, 4, 4294910498, 1, 4, 0, 2, 6, 5, 80, 80, 90, 80, 1, 5, 4294927889, 2, 16, 32, 16, 16, 20, 0, 100, 10, -2, 99, 0, 1, 0, 1, 30, 0, 0];
ITEM_DATA[156] = ["big thunder", 3, 5500, 6, 24, 4, 4294967142, 1, 5, 1, 1, 150, 1, 8, 80, 90, 80, 1, 10, 4294967142, 2, 32, 64, 64, 64, 0, 5, 100, 10, 0, 100, 1, 0, 0, 3, 0, 0, 0];
ITEM_DATA[181] = ["big icicle", 4, 6E3, 6, 24, 4, 4291611903, 1, 5, 1, 10, 20, 1, 8, 80, 90, 90, 1, 9, 4291611903, 1, 32, 64, 64, 64, 0, 5, 100, 10, 0, 100, 1, 0, 0, 5, 50, 0, 0];
ITEM_DATA[205] = ["ice meteor", 4, 6500, 6, 24, 4, 4287138047, 1, 5, 0, 100, 150, 1, 5, 120, 135, 90, 1, 16, 4287138047, 2, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 2, 30, 0, 4, 0, 10, 15, 9, 1, 16, 4287138047, 2, 16, 16, 8, 8, 0, 10, 100, 10, 5, 100, 0, 0];
ITEM_DATA[217] = ["super volcano", 4, 7E3, 6, 24, 4, 4294919168, 1, 4, 0, 2, 6, 1, 50, 120, 135, 80, 0, 12, 4294919168, 2, 16, 16, 8, 8, 0, 0, 100, 10, 8, 100, 0, 0, 0, 1, 50, 0, 6, 1, 4, 8, 15, 0, 5, 4294927889, 2, 16, 32, 16, 32, 50, 0, 100, 10, 5, 98, 0, 1];
ITEM_DATA[229] = ["thunder spear", 4, 7500, 6, 24, 4, 4294967091, 1, 108, 0, 1, 30, 24, 0, 120, 135, 90, 1, 10, 4294967091, 2, 5, 32, 5, 32, 200, 10, 100, 10, 90, 90, 0, 1, 0, 3, 0, 0, 0];
ITEM_DATA[256] = ["time explosion", 5, 8E3, 6, 25, 4, 4294919185, 1, 4, 0, 20, 40, 1, 40, 80, 90, 80, 0, 12, 4294919185, 1, 16, 16, 8, 8, 0, 100, 500, 10, 10, 98, 0, 1, 0, 1, 0, 0, 4, 1, 15, 25, 10, 1, 6, 1157588480, 1, 8, 32, 32, 32, 10, 10, 20, 5, 0, 98, 1, 0];
ITEM_DATA[315] = ["ice spike", 5, 8500, 6, 25, 4, 4290493439, 1, 3, 0, 15, 25, 1, 50, 80, 90, 90, 1, 9, 4287138047, 1, 16, 24, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 2, 40, 0, 7, 0, 5, 15, 3, 1, 9, 4287138047, 1, 8, 16, 8, 8, 0, 9, 10, 10, 0, 98, 0, 2];
ITEM_DATA[331] = ["inferno", 5, 9E3, 6, 25, 4, 4294910498, 1, 103, 0, 2, 6, 7, 5, 80, 90, 60, 1, 6, 2298439185, 2, 20, 20, 16, 16, 70, 0, 200, 10, 0, 100, 0, 0, 0, 1, 30, 0, 0];
ITEM_DATA[348] = ["electric shock", 5, 9500, 6, 25, 4, 4294967142, 1, 9, 0, 1, 20, 30, 1, 80, 90, 30, 1, 10, 2298478438, 2, 16, 12, 16, 16, 60, 0, 30, 10, 0, 90, 0, 0, 0, 3, 0, 0, 0];
ITEM_DATA[363] = ["freeze explosion", 6, 1E4, 6, 25, 4, 4291611903, 1, 9, 1, 5, 10, 6, 9, 80, 90, 90, 1, 4, 2295123199, 2, 16, 48, 48, 48, 0, 25, 30, 10, 0, 80, 0, 2, 0, 5, 10, 0, 0];
ITEM_DATA[397] = ["ice orb", 6, 11E3, 6, 25, 4, 4287138047, 1, 3, 0, 0, 0, 1, 6, 120, 135, 60, 1, 2, 4287138047, 2, 16, 16, 16, 16, 0, 150, 150, 10, 0, 100, 0, 0, 0, 2, 30, 0, 2, 0, 10, 15, 50, 1, 9, 4287138047, 2, 16, 16, 8, 8, 0, 6, 50, 10, 0, 95, 0, 0];
ITEM_DATA[413] = ["lava", 6, 12E3, 6, 25, 4, 4294919168, 1, 4, 0, 2, 6, 1, 50, 120, 135, 80, 0, 12, 4294919168, 2, 16, 16, 8, 8, 0, 0, 100, 10, 8, 100, 0, 0, 0, 1, 50, 0, 9, 1, 6, 9, 30, 0, 5, 1157588497, 2, 16, 24, 16, 32, 50, 0, 100, 10, 1, 100, 0, 1];
ITEM_DATA[432] = ["thunder orb", 6, 13E3, 6, 25, 4, 4294967091, 2, 3, 0, 0, 0, 1, 10, 120, 135, 60, 0, 2, 4294967142, 2, 16, 16, 16, 16, 0, 200, 200, 10, 0, 100, 0, 0, 0, 3, 0, 0, 2, 0, 1, 90, 25, 0, 15, 4294967142, 2, 16, 16, 8, 8, 0, 10, 50, 10, 0, 60, 0, 0];
ITEM_DATA[454] = ["spread explosion", 7, 15E3, 6, 26, 4, 4294936576, 1, 4, 0, 20, 40, 10, 50, 80, 90, 80, 0, 12, 4294936610, 2, 16, 16, 8, 8, 15, 50, 200, 10, 5, 100, 0, 2, 0, 1, 0, 0, 1, 1, 30, 50, 1, 0, 21, 4294936610, 2, 48, 48, 32, 32, 0, 0, 10, 20, 0, 100, 0, 0];
ITEM_DATA[474] = ["ice bolt", 7, 16E3, 6, 26, 4, 4290493439, 1, 5, 0, 25, 35, 3, 5, 80, 90, 90, 1, 9, 4287138047, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 2, 45, 0, 0];
ITEM_DATA[482] = ["hell fire", 7, 17E3, 6, 26, 4, 4294910498, 1, 103, 0, 2, 6, 30, 5, 80, 90, 40, 1, 6, 2298439185, 2, 16, 16, 16, 16, 40, 0, 80, 10, 0, 100, 0, 0, 0, 1, 50, 0, 0];
ITEM_DATA[499] = ["lightning", 7, 18E3, 6, 26, 4, 4294967142, 1, 11, 0, 1, 90, 30, 5, 80, 90, 80, 1, 20, 4294967142, 2, 16, 16, 16, 16, 60, 0, 150, 10, 0, 100, 0, 0, 0, 3, 0, 0, 0];
ITEM_DATA[507] = ["permafrost", 8, 19E3, 6, 26, 4, 4291611903, 1, 9, 1, 15, 25, 6, 9, 80, 90, 90, 1, 22, 1724697855, 2, 24, 48, 48, 48, 0, 25, 30, 10, 0, 70, 1, 0, 0, 5, 30, 0, 0];
ITEM_DATA[60] = ["staff of wood", 1, 250, 12, 11, 5, 4287120384, 1, 6, 0, 2, 3, 1, 0, 80, 90, 70, 0, 15, 4288243251, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[61] = ["long staff", 1, 500, 12, 11, 5, 4289374890, 1, 6, 0, 3, 4, 1, 0, 80, 90, 110, 0, 15, 4289374890, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[62] = ["staff of thunder", 1, 750, 12, 11, 5, 4294967142, 1, 6, 0, 1, 9, 1, 0, 80, 90, 70, 0, 15, 4294967142, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 3, 0, 0, 0];
ITEM_DATA[63] = ["staff of ice", 1, 1E3, 12, 11, 5, 4290493439, 1, 6, 0, 4, 5, 1, 0, 80, 90, 70, 0, 15, 4290493439, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 2, 10, 0, 0];
ITEM_DATA[115] = ["battle staff", 2, 1500, 12, 11, 5, 4294919236, 1, 6, 0, 10, 10, 1, 0, 80, 90, 30, 0, 15, 4294927974, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[126] = ["staff of fire", 2, 2E3, 12, 11, 5, 4294927889, 1, 6, 0, 2, 3, 1, 0, 80, 90, 70, 0, 15, 4294927889, 2, 24, 24, 24, 24, 0, 0, 100, 10, 0, 100, 0, 0, 0, 1, 30, 0, 0];
ITEM_DATA[127] = ["lightning staff", 2, 2500, 12, 11, 5, 4294967142, 1, 5, 0, 1, 25, 1, 10, 80, 90, 70, 1, 10, 4294967142, 2, 16, 24, 16, 16, 10, 0, 100, 20, 0, 100, 0, 0, 0, 3, 0, 0, 0];
ITEM_DATA[128] = ["staff of poison", 2, 3E3, 12, 11, 5, 4282711876, 1, 6, 0, 0, 1, 1, 0, 80, 90, 70, 0, 15, 4282711876, 1, 24, 24, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 4, 20, 0, 0];
ITEM_DATA[129] = ["long wood staff", 3, 4E3, 12, 11, 5, 4288243251, 1, 6, 0, 10, 15, 1, 0, 80, 90, 130, 0, 15, 4288243251, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[135] = ["staff of freeze", 3, 4500, 12, 11, 5, 4291611903, 1, 6, 0, 5, 10, 1, 0, 80, 90, 70, 0, 15, 4291611903, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 5, 20, 0, 0];
ITEM_DATA[141] = ["staff of light", 1, 5E3, 12, 11, 5, 4294967295, 1, 6, 0, 5, 5, 1, 0, 80, 90, 70, 0, 13, 2298478591, 2, 16, 16, 8, 8, 0, 100, 200, 40, 0, 100, 1, 0, 50, 3, 0, 0, 0];
ITEM_DATA[157] = ["staff of flame", 3, 5500, 12, 34, 5, 4294927889, 1, 6, 0, 4, 6, 1, 0, 80, 90, 70, 0, 15, 4294927889, 2, 24, 24, 24, 24, 0, 0, 100, 10, 0, 100, 0, 0, 0, 1, 30, 0, 0];
ITEM_DATA[182] = ["combat staff", 4, 6E3, 12, 34, 5, 4294919236, 1, 6, 0, 25, 25, 1, 0, 80, 90, 30, 0, 15, 4294919236, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[206] = ["staff of poisoner", 4, 6500, 12, 34, 5, 4284874956, 1, 6, 0, 1, 1, 1, 0, 80, 90, 70, 0, 15, 4284874956, 1, 24, 24, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 4, 30, 0, 0];
ITEM_DATA[218] = ["long iron staff", 4, 7E3, 12, 34, 5, 4284900966, 1, 6, 0, 10, 15, 1, 0, 80, 90, 150, 0, 15, 4288256409, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[230] = ["staff of icicle", 4, 7500, 12, 34, 5, 4290493439, 1, 6, 0, 10, 15, 1, 0, 80, 90, 70, 0, 15, 4290493439, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 2, 15, 0, 0];
ITEM_DATA[257] = ["explosion staff", 5, 8E3, 12, 34, 5, 4294936576, 1, 6, 1, 10, 15, 1, 0, 80, 90, 70, 0, 2, 2298447906, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 1, 0, 0, 0];
ITEM_DATA[316] = ["warrior staff", 5, 8500, 12, 34, 5, 4288217088, 1, 6, 0, 35, 35, 1, 0, 80, 90, 30, 0, 15, 4288217088, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[332] = ["inferno staff", 5, 9E3, 12, 45, 5, 4294927889, 1, 6, 0, 10, 15, 1, 0, 80, 90, 70, 1, 6, 4294927889, 2, 16, 16, 16, 16, 0, 0, 100, 10, 0, 96, 0, 0, 20, 1, 30, 0, 0];
ITEM_DATA[349] = ["electric staff", 5, 9500, 12, 45, 5, 4294967142, 1, 6, 0, 1, 9, 3, 2, 80, 90, 70, 0, 14, 2298478438, 2, 16, 16, 16, 16, 15, 0, 30, 10, 0, 90, 0, 0, 0, 3, 0, 0, 0];
ITEM_DATA[364] = ["long silver staff", 6, 1E4, 12, 45, 5, 4294967295, 1, 6, 0, 10, 15, 1, 0, 80, 90, 170, 0, 15, 4294967295, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[398] = ["poisonous staff", 6, 11E3, 12, 45, 5, 4284874905, 1, 6, 0, 1, 2, 1, 0, 80, 90, 70, 0, 15, 4284874905, 1, 24, 24, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 4, 40, 0, 0];
ITEM_DATA[414] = ["freeze exp staff", 6, 12E3, 12, 45, 5, 4291611903, 1, 6, 1, 5, 5, 1, 0, 80, 90, 70, 0, 15, 4291611903, 2, 16, 16, 12, 12, 0, 0, 100, 40, 0, 100, 0, 0, 0, 5, 5, 0, 0];
ITEM_DATA[433] = ["mega exp staff", 6, 13E3, 12, 45, 5, 4294936576, 1, 6, 1, 10, 15, 1, 0, 80, 90, 70, 0, 2, 2298447906, 2, 32, 32, 32, 32, 0, 0, 100, 40, 0, 100, 0, 0, 0, 1, 0, 0, 0];
ITEM_DATA[455] = ["strike rod", 7, 15E3, 12, 60, 5, 4294919236, 1, 6, 0, 55, 55, 1, 0, 80, 90, 30, 0, 21, 4294919236, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[475] = ["inferno rod", 7, 16E3, 12, 60, 5, 4294927889, 1, 6, 0, 20, 25, 1, 0, 80, 90, 70, 1, 22, 4294927889, 2, 12, 12, 16, 16, 0, 0, 150, 10, 0, 96, 1, 0, 20, 1, 30, 0, 0];
ITEM_DATA[483] = ["thunder rod", 7, 17E3, 12, 60, 5, 4294967142, 1, 6, 0, 1, 30, 3, 0, 80, 90, 70, 0, 21, 2298478438, 2, 16, 16, 16, 16, 15, 0, 100, 10, 0, 100, 0, 0, 0, 3, 0, 0, 0];
ITEM_DATA[500] = ["long gold rod", 7, 18E3, 12, 60, 5, 4294956800, 1, 6, 0, 10, 15, 1, 0, 80, 90, 190, 0, 15, 4294956800, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[508] = ["poisonous rod", 8, 19E3, 12, 60, 5, 4288217343, 1, 6, 0, 2, 2, 1, 0, 80, 90, 70, 0, 15, 4288217343, 1, 24, 24, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 4, 50, 0, 0];
ITEM_DATA[77] = ["handgun", 1, 250, 14, 13, 6, 4291611852, 1, 3, 0, 8, 12, 1, 30, 20, 30, 60, 1, 17, 4291611852, 1, 16, 16, 8, 8, 0, 0, 50, 10, 0, 100, 0, 0, 0, 0, 0, 5, 0];
ITEM_DATA[78] = ["submachine-gun", 1, 500, 14, 27, 6, 4284901017, 1, 3, 0, 4, 8, 1, 30, 5, 10, 50, 1, 17, 4284901017, 1, 16, 16, 8, 8, 0, 0, 50, 10, 0, 100, 0, 0, 0, 0, 0, 5, 0];
ITEM_DATA[79] = ["shotgun", 1, 750, 14, 28, 6, 4288243251, 1, 3, 0, 1, 20, 5, 30, 50, 60, 50, 0, 13, 4288243251, 1, 16, 16, 8, 8, 5, 0, 30, 10, 0, 100, 0, 1, 0, 0, 0, 15, 0];
ITEM_DATA[80] = ["rifle", 1, 1E3, 14, 29, 6, 4284914073, 1, 3, 0, 20, 40, 1, 50, 50, 60, 120, 1, 17, 4284914073, 1, 16, 32, 8, 8, 0, 0, 300, 10, 0, 100, 0, 0, 0, 0, 0, 10, 0];
ITEM_DATA[81] = ["grenade", 2, 1500, 14, 30, 6, 4294927872, 1, 4, 0, 8, 12, 1, 40, 70, 80, 60, 1, 17, 4294927872, 1, 16, 16, 8, 8, 0, 0, 100, 10, 10, 100, 0, 0, 0, 1, 50, 25, 4, 1, 2, 6, 4, 0, 5, 4294927889, 2, 16, 32, 16, 32, 0, 0, 100, 10, 8, 98, 0, 1];
ITEM_DATA[82] = ["laser gun", 2, 2E3, 14, 31, 6, 4288217088, 1, 3, 1, 8, 12, 1, 30, 20, 30, 50, 1, 18, 4288217088, 1, 8, 16, 8, 8, 0, 0, 200, 10, 0, 100, 1, 0, 0, 1, 100, 20, 0];
ITEM_DATA[83] = ["bazooka", 2, 2500, 14, 32, 6, 4278229248, 1, 3, 0, 40, 60, 1, 30, 80, 90, 60, 1, 17, 4278229248, 1, 32, 32, 16, 16, 0, 0, 50, 10, 5, 100, 0, 0, 0, 0, 0, 30, 3, 0, 20, 30, 6, 0, 6, 2291754547, 1, 24, 24, 12, 12, 10, 0, 50, 20, 0, 97, 1, 0];
ITEM_DATA[120] = ["homing laser", 2, 3E3, 14, 33, 6, 4288269312, 1, 3, 0, 8, 12, 2, 30, 20, 30, 70, 1, 11, 4288269312, 1, 16, 16, 8, 8, 0, 0, 200, 10, 0, 100, 0, 0, 50, 3, 0, 20, 0];
ITEM_DATA[125] = ["beretta", 3, 4E3, 14, 13, 6, 4291611852, 1, 3, 0, 24, 36, 1, 30, 20, 30, 60, 1, 17, 4291611852, 1, 16, 16, 8, 8, 0, 0, 50, 10, 0, 100, 0, 0, 0, 0, 0, 10, 0];
ITEM_DATA[136] = ["uzi", 3, 4500, 14, 27, 6, 4281545574, 1, 3, 0, 12, 24, 1, 30, 5, 10, 50, 1, 17, 4281545574, 1, 16, 16, 8, 8, 0, 0, 50, 10, 0, 100, 0, 0, 0, 0, 0, 15, 0];
ITEM_DATA[142] = ["remington", 3, 5E3, 14, 28, 6, 4282655266, 1, 3, 0, 1, 40, 7, 30, 50, 60, 50, 0, 13, 4282655266, 1, 16, 16, 8, 8, 7, 0, 30, 10, 0, 100, 0, 1, 0, 0, 0, 30, 0];
ITEM_DATA[158] = ["sniper rifle", 3, 5500, 14, 29, 6, 4278203187, 1, 3, 0, 60, 80, 1, 50, 50, 60, 120, 1, 17, 4284914073, 1, 16, 32, 8, 8, 0, 0, 300, 10, 0, 100, 0, 0, 0, 0, 0, 20, 0];
ITEM_DATA[183] = ["grenade launcher", 4, 6E3, 14, 30, 6, 4291572480, 1, 4, 0, 12, 24, 1, 40, 70, 80, 60, 1, 17, 4291572480, 1, 16, 16, 8, 8, 0, 0, 100, 10, 10, 100, 0, 0, 0, 1, 50, 40, 4, 1, 6, 18, 4, 0, 5, 2298426129, 2, 16, 32, 16, 32, 0, 0, 100, 10, 8, 96, 0, 1];
ITEM_DATA[207] = ["laser beam gun", 4, 6500, 14, 31, 6, 4291559424, 1, 3, 1, 16, 24, 1, 25, 20, 30, 50, 1, 18, 4291559424, 1, 8, 16, 8, 8, 0, 0, 200, 10, 0, 100, 1, 0, 0, 1, 100, 35, 0];
ITEM_DATA[219] = ["cannon", 4, 7E3, 14, 32, 6, 4288256256, 1, 3, 0, 80, 120, 1, 30, 80, 90, 60, 1, 17, 4288256256, 1, 32, 32, 16, 16, 0, 0, 50, 10, 5, 100, 0, 0, 0, 0, 0, 50, 3, 0, 50, 70, 6, 1, 6, 2295109939, 1, 12, 48, 16, 16, 0, 5, 25, 20, 0, 98, 1, 0];
ITEM_DATA[231] = ["homing laser beam", 4, 7500, 14, 33, 6, 4291624755, 1, 3, 0, 8, 12, 5, 30, 20, 30, 70, 1, 11, 4291624755, 1, 16, 16, 8, 8, 0, 0, 200, 10, 0, 100, 0, 0, 100, 3, 0, 35, 0];
ITEM_DATA[258] = ["3-round burst", 5, 8E3, 14, 13, 6, 4284900966, 1, 603, 0, 24, 36, 3, 30, 20, 30, 60, 1, 17, 4284900966, 1, 16, 16, 8, 8, 10, 0, 50, 10, 0, 100, 0, 0, 0, 0, 0, 10, 0];
ITEM_DATA[317] = ["mini uzi", 5, 8500, 14, 27, 6, 4281545625, 1, 103, 0, 12, 24, 2, 30, 5, 10, 50, 1, 17, 4281545625, 1, 16, 16, 8, 8, 5, 0, 50, 10, 0, 100, 0, 0, 0, 0, 0, 25, 0];
ITEM_DATA[333] = ["scattergun", 5, 9E3, 14, 28, 6, 4284883456, 1, 803, 0, 1, 80, 9, 30, 50, 60, 50, 0, 13, 4284883456, 1, 16, 16, 8, 8, 9, 0, 30, 10, 0, 100, 0, 2, 0, 0, 0, 40, 0];
ITEM_DATA[350] = ["hunting gun", 5, 9500, 14, 29, 6, 4284887859, 1, 3, 0, 140, 160, 1, 50, 50, 60, 120, 1, 17, 4284900966, 1, 16, 32, 8, 8, 0, 0, 300, 10, 0, 100, 0, 0, 0, 0, 0, 30, 0];
ITEM_DATA[365] = ["M9 grenade", 6, 1E4, 14, 30, 6, 4294910481, 1, 4, 0, 18, 48, 1, 40, 70, 80, 60, 1, 17, 4294910481, 1, 16, 16, 8, 8, 0, 0, 100, 10, 10, 100, 0, 0, 0, 1, 50, 55, 4, 1, 6, 18, 9, 0, 5, 3439272465, 2, 16, 32, 16, 32, 0, 0, 100, 10, 15, 90, 0, 1];
ITEM_DATA[399] = ["power laser gun", 6, 11E3, 14, 31, 6, 4291559424, 1, 3, 1, 24, 36, 1, 20, 20, 30, 50, 1, 18, 4291559424, 1, 8, 16, 8, 8, 0, 0, 200, 10, 0, 100, 1, 0, 0, 1, 100, 45, 0];
ITEM_DATA[415] = ["wave cannon", 6, 12E3, 14, 32, 6, 4284900864, 1, 3, 0, 120, 180, 1, 30, 80, 90, 60, 1, 17, 4284900864, 1, 32, 32, 16, 16, 0, 0, 50, 10, 5, 100, 0, 0, 0, 0, 0, 70, 9, 0, 100, 150, 6, 1, 11, 4284892194, 2, 12, 40, 20, 20, 25, 10, 50, 20, 0, 98, 1, 0];
ITEM_DATA[434] = ["pierce homing", 6, 13E3, 14, 33, 6, 4294967091, 1, 3, 0, 12, 16, 7, 30, 20, 30, 70, 1, 11, 4294967091, 1, 8, 16, 8, 8, 0, 0, 200, 10, 0, 100, 1, 0, 150, 3, 0, 45, 0];
ITEM_DATA[456] = ["magnum", 7, 15E3, 14, 61, 6, 4291611852, 1, 3, 1, 80, 120, 1, 30, 20, 30, 60, 1, 17, 4291611852, 1, 16, 16, 8, 8, 0, 0, 50, 10, 0, 100, 0, 0, 0, 0, 0, 15, 0];
ITEM_DATA[476] = ["micro uzi", 7, 16E3, 14, 27, 6, 4280427110, 1, 103, 0, 16, 32, 3, 30, 5, 10, 50, 1, 17, 4280427110, 1, 16, 16, 8, 8, 5, 0, 50, 10, 0, 100, 0, 0, 0, 0, 0, 35, 0];
ITEM_DATA[484] = ["triple shotgun", 7, 17E3, 14, 28, 6, 4287120418, 1, 803, 0, 1, 120, 15, 30, 50, 60, 50, 0, 13, 4287120418, 1, 16, 16, 8, 8, 11, 0, 30, 10, 0, 100, 0, 2, 0, 0, 0, 50, 0];
ITEM_DATA[501] = ["rail gun", 7, 18E3, 14, 29, 6, 4282664004, 1, 3, 0, 300, 320, 1, 50, 50, 60, 150, 1, 17, 4282664004, 1, 16, 32, 8, 8, 0, 0, 300, 10, 0, 100, 0, 0, 0, 0, 0, 40, 0];
ITEM_DATA[509] = ["napalm gun", 8, 19E3, 14, 30, 6, 4294906112, 1, 4, 0, 26, 96, 1, 40, 70, 80, 60, 1, 17, 4294906112, 1, 16, 16, 8, 8, 0, 0, 100, 10, 10, 100, 0, 0, 0, 1, 50, 70, 4, 1, 15, 45, 9, 0, 5, 3439269896, 2, 16, 32, 16, 32, 0, 0, 100, 10, 8, 94, 0, 1];
ITEM_DATA[188] = ["whip", 0, 100, 15, 35, 7, 4294936576, 1, 0, 0, 1, 4, 0, 0, 15, 20, 40, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[189] = ["stone whip", 1, 250, 15, 35, 7, 4287120384, 1, 4, 0, 1, 4, 3, 80, 15, 20, 40, 0, 12, 4282664004, 1, 16, 16, 8, 8, 0, 20, 200, 10, 5, 100, 0, 0, 0, 0, 0, 10, 0, 0, 3, 5, 0];
ITEM_DATA[190] = ["fire whip", 1, 500, 15, 35, 7, 4294919236, 1, 4, 0, 1, 4, 4, 50, 15, 20, 40, 0, 5, 2298439185, 2, 16, 32, 16, 32, 0, 0, 100, 10, 8, 95, 0, 1, 0, 1, 30, 40, 0, 0, 3, 5, 0];
ITEM_DATA[191] = ["iron whip", 1, 750, 15, 35, 7, 4289374890, 1, 0, 0, 10, 20, 0, 0, 15, 20, 40, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[192] = ["thunder whip", 1, 1E3, 15, 35, 7, 4294967040, 1, 5, 0, 1, 4, 5, 5, 15, 20, 40, 1, 10, 4294967108, 2, 16, 16, 8, 8, 50, 0, 100, 10, 0, 100, 0, 0, 0, 3, 0, 90, 0, 0, 1, 33, 0];
ITEM_DATA[193] = ["ice whip", 2, 1500, 15, 35, 7, 4291611903, 1, 103, 0, 2, 5, 5, 30, 15, 20, 40, 1, 4, 2295123199, 2, 16, 16, 8, 8, 0, 30, 200, 10, 5, 100, 0, 1, 0, 2, 20, 60, 0, 0, 15, 20, 0];
ITEM_DATA[194] = ["thorn whip", 2, 2E3, 15, 35, 7, 4291603080, 1, 3, 0, 2, 6, 7, 20, 15, 20, 40, 1, 9, 4291603080, 1, 16, 16, 8, 8, 0, 5, 100, 10, 0, 100, 1, 0, 0, 0, 0, 80, 0, 0, 18, 22, 0];
ITEM_DATA[195] = ["poison whip", 2, 2500, 15, 35, 7, 4287103231, 1, 9, 0, 2, 7, 5, 1, 15, 20, 40, 0, 6, 2290614527, 1, 16, 16, 8, 8, 50, 10, 200, 10, 0, 99, 0, 1, 0, 4, 100, 120, 0, 0, 1, 1, 0];
ITEM_DATA[196] = ["explosion whip", 2, 3E3, 15, 35, 7, 4294927906, 1, 9, 1, 2, 8, 3, 5, 15, 20, 40, 1, 2, 2298430498, 2, 8, 40, 16, 16, 10, 10, 15, 3, 0, 80, 1, 0, 0, 1, 0, 150, 0, 0, 30, 40, 0];
ITEM_DATA[197] = ["stone chain", 3, 4E3, 15, 36, 7, 4287120384, 1, 4, 0, 3, 9, 3, 80, 15, 20, 40, 0, 13, 4284900966, 1, 16, 16, 8, 8, 0, 20, 200, 10, 7, 100, 0, 0, 0, 0, 0, 40, 0, 0, 18, 30, 0];
ITEM_DATA[198] = ["fire chain", 3, 4500, 15, 36, 7, 4294919236, 1, 9, 0, 3, 10, 4, 1, 15, 20, 40, 1, 5, 1728026897, 2, 12, 24, 24, 24, 0, 0, 100, 10, 0, 95, 1, 0, 0, 1, 30, 60, 0, 0, 6, 10, 0];
ITEM_DATA[199] = ["iron chain", 3, 5E3, 15, 36, 7, 4289374890, 1, 0, 0, 20, 40, 0, 0, 15, 20, 40, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[200] = ["thunder chain", 3, 5500, 15, 36, 7, 4294967040, 1, 105, 0, 3, 12, 5, 5, 15, 20, 40, 1, 18, 2298478404, 2, 8, 32, 8, 8, 50, 0, 100, 10, 0, 100, 0, 0, 0, 3, 0, 130, 0, 0, 1, 66, 0];
ITEM_DATA[201] = ["ice chain", 4, 6E3, 15, 36, 7, 4291611903, 1, 103, 0, 4, 13, 5, 30, 15, 20, 40, 1, 4, 2295123199, 2, 16, 16, 8, 8, 0, 20, 200, 10, 20, 100, 0, 1, 0, 2, 20, 90, 0, 0, 30, 40, 0];
ITEM_DATA[208] = ["thorn chain", 4, 6500, 15, 36, 7, 4291603080, 1, 803, 0, 4, 14, 15, 20, 15, 20, 40, 1, 9, 4291603080, 1, 16, 16, 8, 8, 0, 5, 100, 10, 0, 100, 1, 0, 0, 0, 0, 120, 0, 0, 18, 22, 0];
ITEM_DATA[220] = ["poison chain", 4, 7E3, 15, 36, 7, 4287103231, 1, 9, 0, 4, 15, 5, 1, 15, 20, 40, 0, 6, 2290614527, 1, 16, 16, 8, 8, 0, 20, 300, 10, 0, 99, 0, 1, 0, 4, 150, 180, 0, 0, 2, 2, 0];
ITEM_DATA[232] = ["explosion chain", 4, 7500, 15, 36, 7, 4294927906, 1, 9, 1, 4, 16, 3, 5, 15, 20, 40, 1, 2, 2298430498, 2, 32, 8, 16, 16, 0, 19, 20, 3, 0, 80, 1, 0, 0, 1, 0, 220, 0, 0, 60, 80, 0];
ITEM_DATA[259] = ["stone flail", 5, 8E3, 15, 37, 7, 4287120384, 1, 4, 0, 5, 17, 3, 80, 15, 20, 40, 0, 13, 4284900966, 1, 16, 16, 8, 8, 0, 20, 200, 10, 7, 100, 0, 0, 0, 0, 0, 60, 0, 0, 32, 52, 0];
ITEM_DATA[318] = ["fire flail", 5, 8500, 15, 37, 7, 4294919236, 1, 9, 0, 5, 18, 4, 1, 15, 20, 40, 1, 5, 2298452241, 2, 8, 16, 20, 20, 0, 0, 300, 10, 0, 99, 1, 0, 0, 1, 30, 80, 0, 0, 8, 15, 0];
ITEM_DATA[334] = ["iron flail", 5, 9E3, 15, 37, 7, 4289374890, 1, 0, 0, 40, 80, 0, 0, 15, 20, 40, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[351] = ["thunder flail", 5, 9500, 15, 37, 7, 4294967040, 1, 5, 0, 5, 20, 5, 5, 15, 20, 40, 1, 18, 4294967108, 2, 6, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 3, 0, 150, 0, 0, 1, 99, 0];
ITEM_DATA[366] = ["ice flail", 6, 1E4, 15, 37, 7, 4291611903, 1, 109, 0, 6, 21, 5, 3, 15, 20, 40, 1, 4, 2295123199, 2, 16, 16, 8, 8, 0, 20, 200, 10, 20, 100, 0, 1, 0, 2, 20, 120, 0, 0, 45, 60, 0];
ITEM_DATA[400] = ["thorn flail", 6, 11E3, 15, 37, 7, 4291603080, 1, 403, 0, 6, 22, 45, 20, 15, 20, 40, 1, 9, 4291603080, 1, 8, 8, 8, 8, 0, 5, 100, 10, 0, 100, 1, 0, 0, 0, 0, 160, 0, 0, 18, 22, 0];
ITEM_DATA[416] = ["poison flail", 6, 12E3, 15, 37, 7, 4287103231, 1, 9, 0, 6, 23, 5, 1, 15, 20, 40, 0, 6, 2290614527, 1, 16, 16, 8, 8, 100, 20, 300, 20, 0, 99, 0, 1, 0, 4, 200, 240, 0, 0, 4, 5, 0];
ITEM_DATA[435] = ["explosion flail", 6, 13E3, 15, 37, 7, 4294927906, 1, 9, 1, 6, 24, 3, 5, 15, 20, 40, 1, 19, 2298430498, 2, 16, 16, 16, 16, 0, 19, 20, 3, 0, 80, 1, 0, 0, 1, 0, 360, 0, 0, 120, 160, 0];
ITEM_DATA[457] = ["morning star", 7, 15E3, 15, 38, 7, 4289374890, 1, 0, 0, 100, 200, 0, 0, 15, 20, 40, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[477] = ["stone ms", 7, 16E3, 15, 38, 7, 4287120384, 1, 104, 0, 7, 26, 3, 80, 15, 20, 40, 0, 13, 4282664004, 1, 16, 16, 8, 8, 0, 20, 200, 10, 9, 100, 0, 0, 0, 0, 0, 70, 0, 0, 60, 110, 0];
ITEM_DATA[485] = ["fire ms", 7, 17E3, 15, 38, 7, 4294919236, 1, 9, 1, 7, 27, 4, 1, 15, 20, 40, 1, 22, 1728026897, 2, 16, 16, 20, 20, 0, 0, 100, 10, 0, 98, 1, 0, 0, 1, 30, 90, 0, 0, 8, 15, 0];
ITEM_DATA[502] = ["thunder ms", 7, 18E3, 15, 38, 7, 4294967040, 1, 5, 0, 7, 28, 5, 5, 15, 20, 40, 1, 20, 4294967108, 2, 16, 32, 8, 8, 50, 0, 100, 10, 0, 100, 0, 0, 0, 3, 0, 170, 0, 0, 1, 222, 0];
ITEM_DATA[510] = ["ice ms", 8, 19E3, 15, 38, 7, 4291611903, 1, 11, 0, 8, 29, 5, 3, 15, 20, 40, 1, 4, 2295123199, 2, 16, 16, 8, 8, 0, 20, 200, 10, 10, 100, 0, 1, 0, 2, 25, 120, 0, 0, 90, 120, 0];
ITEM_DATA[289] = ["ring", 0, 100, 18, 41, 8, 4291611852, 25, 0, 0, 2, 3, 0, 0, 20, 30, 60, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[290] = ["fire ring", 1, 250, 18, 41, 8, 4294919236, 25, 3, 0, 3, 4, 1, 1, 20, 30, 60, 0, 6, 2298439185, 2, 24, 24, 16, 16, 0, 0, 100, 10, 0, 98, 1, 0, 0, 1, 50, 30, 0, 0, 4, 6, 0];
ITEM_DATA[291] = ["thunder ring", 1, 500, 18, 41, 8, 4294967108, 25, 11, 0, 3, 4, 7, 10, 20, 30, 60, 1, 10, 4294967040, 1, 16, 16, 16, 16, 0, 10, 100, 10, 0, 90, 0, 0, 0, 3, 0, 90, 0, 0, 1, 29, 0];
ITEM_DATA[292] = ["long ring", 1, 750, 18, 41, 8, 4287120384, 25, 0, 0, 5, 10, 0, 0, 20, 30, 90, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[293] = ["ice ring", 1, 1E3, 18, 41, 8, 4289374975, 25, 9, 0, 3, 4, 3, 1, 20, 30, 60, 1, 4, 4289374975, 2, 16, 24, 16, 16, 0, 25, 50, 10, 0, 90, 0, 1, 0, 2, 20, 80, 0, 0, 15, 30, 0];
ITEM_DATA[294] = ["thorn ring", 2, 1500, 18, 41, 8, 4291603080, 25, 9, 0, 4, 5, 16, 5, 20, 30, 60, 1, 9, 4291603080, 1, 16, 16, 16, 16, 0, 10, 100, 10, 0, 100, 0, 0, 0, 0, 0, 110, 0, 0, 10, 30, 0];
ITEM_DATA[295] = ["power ring", 2, 2E3, 18, 41, 8, 4294967295, 25, 0, 0, 15, 30, 0, 0, 20, 30, 60, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[296] = ["quick ring", 2, 2500, 18, 41, 8, 4288282521, 25, 3, 1, 4, 5, 1, 1, 5, 10, 60, 0, 13, 4289396650, 1, 80, 12, 40, 8, 0, 15, 50, 10, 0, 98, 1, 0, 0, 0, 0, 50, 0, 0, 10, 10, 0];
ITEM_DATA[297] = ["charge ring", 2, 3E3, 18, 41, 8, 4294936644, 25, 3, 0, 4, 5, 1, 1, 20, 30, 60, 0, 2, 4294919236, 1, 16, 16, 16, 16, 0, 200, 200, 25, 0, 100, 1, 0, 50, 1, 50, 200, 2, 0, 4, 6, 20, 0, 6, 4294927889, 2, 16, 16, 16, 16, 0, 0, 50, 10, 0, 86, 0, 0];
ITEM_DATA[298] = ["fire circle", 3, 4E3, 18, 42, 8, 4294919236, 25, 3, 0, 5, 6, 1, 1, 20, 30, 60, 0, 6, 4294927889, 2, 16, 24, 16, 16, 0, 0, 100, 10, 0, 100, 1, 0, 0, 1, 50, 120, 2, 0, 6, 8, 20, 0, 6, 2298439185, 2, 16, 16, 16, 16, 0, 0, 50, 10, 0, 86, 0, 0];
ITEM_DATA[299] = ["thunder circle", 3, 4500, 18, 42, 8, 4294967108, 25, 11, 0, 5, 6, 11, 15, 20, 30, 60, 1, 10, 4294967040, 1, 16, 16, 16, 16, 0, 10, 100, 10, 0, 90, 0, 2, 0, 3, 0, 120, 0, 0, 1, 59, 0];
ITEM_DATA[300] = ["long circle", 3, 5E3, 18, 42, 8, 4287120384, 25, 0, 0, 10, 15, 0, 0, 20, 30, 120, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[301] = ["ice circle", 3, 5500, 18, 42, 8, 4289374975, 25, 11, 0, 5, 6, 1, 1, 20, 30, 60, 0, 7, 4289374975, 2, 16, 16, 16, 16, 0, 100, 100, 10, 0, 100, 1, 0, 0, 2, 20, 120, 2, 0, 5, 10, 30, 1, 4, 2292886271, 2, 8, 24, 8, 8, 0, 10, 50, 10, 0, 86, 0, 0];
ITEM_DATA[302] = ["thorn circle", 4, 6E3, 18, 42, 8, 4291603080, 25, 9, 0, 6, 7, 16, 5, 20, 30, 60, 1, 9, 4291603080, 1, 16, 16, 16, 16, 0, 10, 100, 10, 0, 100, 0, 2, 0, 0, 0, 130, 0, 0, 20, 60, 0];
ITEM_DATA[303] = ["power circle", 4, 6500, 18, 42, 8, 4294967295, 25, 0, 0, 30, 60, 0, 0, 20, 30, 60, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[304] = ["quick circle", 4, 7E3, 18, 42, 8, 4288282521, 25, 9, 1, 6, 7, 3, 1, 5, 10, 60, 0, 13, 4289396650, 1, 24, 24, 16, 16, 0, 15, 50, 10, 0, 95, 1, 0, 0, 0, 0, 50, 0, 0, 10, 10, 0];
ITEM_DATA[305] = ["charge circle", 4, 7500, 18, 42, 8, 4294967108, 25, 3, 0, 6, 7, 1, 1, 20, 30, 60, 0, 6, 4284900966, 1, 32, 24, 16, 16, 0, 200, 200, 25, 0, 100, 1, 0, 50, 3, 50, 400, 2, 0, 1, 99, 20, 1, 10, 2298478336, 2, 16, 16, 16, 16, 0, 0, 100, 10, 80, 86, 0, 0];
ITEM_DATA[306] = ["fire chakram", 5, 8E3, 18, 43, 8, 4294919236, 25, 3, 0, 7, 8, 1, 5, 20, 30, 60, 0, 6, 4294927889, 2, 16, 24, 16, 16, 0, 0, 180, 10, 2, 100, 0, 2, 0, 1, 50, 150, 2, 0, 12, 16, 20, 0, 6, 2298439185, 2, 16, 16, 16, 16, 0, 0, 50, 10, 0, 86, 0, 0];
ITEM_DATA[319] = ["thunder chakram", 5, 8500, 18, 43, 8, 4294967108, 25, 11, 0, 7, 8, 15, 20, 20, 30, 60, 1, 10, 2298478336, 1, 16, 16, 16, 16, 0, 10, 100, 10, 0, 95, 0, 2, 0, 3, 0, 150, 0, 0, 1, 149, 0];
ITEM_DATA[335] = ["long chakram", 5, 9E3, 18, 43, 8, 4287120384, 25, 0, 0, 20, 30, 0, 0, 20, 30, 150, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[352] = ["ice chakram", 5, 9500, 18, 43, 8, 4289374975, 20, 9, 0, 7, 8, 3, 1, 20, 30, 60, 1, 4, 4289374975, 2, 16, 24, 16, 16, 0, 25, 50, 10, 0, 90, 0, 1, 0, 2, 20, 40, 0, 0, 30, 45, 0];
ITEM_DATA[367] = ["thorn chakram", 6, 1E4, 18, 43, 8, 4291603080, 25, 9, 0, 8, 9, 16, 5, 20, 30, 60, 1, 9, 4291603080, 1, 16, 16, 16, 16, 0, 10, 150, 10, 0, 90, 0, 2, 0, 0, 0, 150, 0, 0, 30, 90, 0];
ITEM_DATA[401] = ["power chakram", 6, 11E3, 18, 43, 8, 4294967295, 20, 0, 0, 60, 120, 0, 0, 20, 30, 60, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[417] = ["quick chakram", 6, 12E3, 18, 43, 8, 4288282521, 25, 9, 1, 8, 9, 3, 1, 5, 10, 60, 1, 9, 4289396650, 2, 16, 16, 16, 16, 0, 15, 50, 10, 0, 95, 1, 0, 0, 0, 0, 50, 0, 0, 33, 33, 0];
ITEM_DATA[436] = ["charge chakram", 6, 13E3, 18, 43, 8, 4288269567, 25, 11, 0, 8, 9, 1, 1, 20, 30, 60, 0, 7, 4288269567, 2, 16, 16, 16, 16, 0, 200, 200, 25, 0, 100, 0, 2, 0, 2, 20, 600, 2, 0, 40, 60, 50, 1, 4, 2292886271, 2, 8, 16, 8, 8, 0, 5, 100, 10, 0, 104, 0, 0];
ITEM_DATA[458] = ["fire god", 7, 15E3, 18, 44, 8, 4294919236, 25, 109, 0, 9, 10, 20, 1, 20, 30, 60, 1, 22, 1728013841, 2, 16, 16, 16, 16, 0, 0, 100, 15, 0, 98, 1, 0, 0, 1, 50, 200, 0, 0, 36, 48, 0];
ITEM_DATA[478] = ["thunder god", 7, 16E3, 18, 44, 8, 4294967108, 25, 11, 0, 9, 10, 20, 20, 20, 30, 60, 1, 10, 2298478336, 1, 16, 16, 16, 16, 0, 5, 100, 10, 0, 98, 0, 2, 0, 3, 0, 180, 0, 0, 1, 399, 0];
ITEM_DATA[486] = ["long god", 7, 17E3, 18, 44, 8, 4287120384, 10, 0, 0, 40, 60, 0, 0, 20, 30, 180, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[503] = ["ice god", 7, 18E3, 18, 44, 8, 4289374975, 25, 11, 0, 9, 10, 1, 1, 20, 30, 60, 0, 7, 4289374975, 2, 16, 16, 16, 16, 0, 100, 100, 10, 0, 100, 1, 0, 0, 2, 30, 120, 2, 0, 30, 45, 30, 1, 9, 2292886271, 2, 16, 16, 8, 8, 0, 10, 50, 10, 0, 86, 0, 0];
ITEM_DATA[511] = ["thorn god", 8, 19E3, 18, 44, 8, 4291603080, 25, 9, 0, 10, 11, 32, 5, 20, 30, 60, 1, 9, 4291603080, 1, 16, 16, 16, 16, 0, 10, 100, 10, 0, 100, 0, 2, 0, 0, 0, 160, 0, 0, 40, 120, 0];
ITEM_DATA[270] = ["charge punch", 5, 8500, 3, 2, 1, 4284914175, 1, 109, 0, 9, 18, 5, 2, 15, 30, 15, 1, 9, 2282841855, 2, 32, 60, 32, 32, 0, 0, 200, 10, 0, 90, 1, 0, 0, 1, 50, 300, 0, 0, 8, 12, 0];
ITEM_DATA[271] = ["wooden sword", 5, 8500, 4, 22, 2, 4287120384, 1, 0, 0, 1, 1, 0, 0, 20, 30, 50, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[272] = ["pyramid arrow", 5, 8500, 5, 4, 3, 4284874803, 1, 4, 0, 9, 15, 1, 80, 30, 40, 90, 1, 3, 4284874803, 1, 16, 16, 8, 8, 0, 5, 500, 10, 8, 100, 0, 0, 0, 4, 66, 35, 2, 0, 3, 3, 30, 0, 6, 4284874854, 2, 16, 16, 16, 16, 0, 0, 66, 10, 0, 86, 0, 0];
ITEM_DATA[273] = ["atomic ray", 5, 8500, 6, 25, 4, 4294927889, 1, 3, 0, 10, 20, 1, 20, 80, 90, 90, 1, 18, 4294927889, 2, 12, 20, 16, 16, 0, 0, 500, 10, 0, 100, 0, 2, 0, 1, 80, 0, 0];
ITEM_DATA[274] = ["high light staff", 3, 8500, 12, 34, 5, 4294967295, 1, 6, 0, 10, 15, 1, 0, 80, 90, 140, 0, 13, 2298478591, 2, 16, 16, 8, 8, 0, 100, 200, 40, 0, 100, 1, 0, 50, 3, 0, 0, 0];
ITEM_DATA[275] = ["missile", 5, 8500, 14, 32, 6, 4294967295, 1, 4, 1, 300, 500, 1, 80, 160, 180, 80, 1, 17, 4294967295, 1, 16, 32, 16, 16, 0, 5, 100, 10, 10, 100, 0, 0, 0, 0, 0, 100, 2, 0, 0, 0, 50, 1, 6, 2288412262, 1, 16, 16, 16, 16, 10, 25, 25, 20, 0, 80, 0, 0];
ITEM_DATA[276] = ["freeze whip", 5, 8500, 15, 35, 7, 4291611903, 1, 105, 0, 5, 18, 1, 5, 15, 20, 40, 1, 8, 2295123199, 2, 8, 8, 8, 8, 50, 0, 100, 10, 0, 100, 0, 0, 0, 5, 5, 60, 0, 0, 3, 5, 0];
ITEM_DATA[307] = ["chakram", 5, 8500, 18, 43, 8, 4282664004, 5, 0, 0, 1, 1, 0, 0, 20, 30, 30, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[402] = ["Indra arrow", 6, 2E4, 5, 4, 3, 4294967040, 1, 4, 0, 1, 3333, 1, 120, 60, 80, 90, 1, 3, 4294967040, 1, 16, 16, 8, 8, 0, 0, 500, 10, 8, 100, 0, 0, 0, 3, 0, 0, 0];
ITEM_DATA[403] = ["Napalm bomb", 6, 2E4, 14, 32, 6, 4294914833, 1, 4, 0, 0, 0, 1, 120, 160, 180, 80, 1, 17, 4294914833, 1, 32, 32, 8, 8, 0, 200, 200, 10, 5, 100, 0, 0, 0, 1, 50, 200, 8, 1, 8, 8, 30, 1, 6, 2298426129, 2, 32, 32, 24, 24, 10, 0, 150, 30, 0, 95, 0, 2];
ITEM_DATA[512] = ["needle cestus", 8, 2E4, 3, 20, 1, 4291603080, 1, 303, 0, 12, 24, 60, 20, 15, 36, 15, 1, 9, 4291603080, 1, 4, 8, 8, 8, 15, 5, 10, 10, 0, 90, 0, 2, 0, 0, 0, 100, 0, 0, 13, 15, 0];
ITEM_DATA[513] = ["lightsaber", 8, 2E4, 4, 23, 2, 4294927974, 2, 7, 0, 30, 35, 1, 1, 20, 30, 30, 1, 18, 2298430532, 2, 16, 32, 16, 16, 0, 0, 10, 10, 0, 100, 0, 0, 0, 3, 0, 130, 0, 0, 1, 150, 130];
ITEM_DATA[514] = ["vigintuple arrow", 8, 2E4, 5, 17, 3, 4294956800, 1, 1604, 0, 48, 72, 20, 80, 45, 60, 90, 1, 3, 4294956800, 1, 16, 16, 8, 8, 0, 0, 300, 10, 8, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[515] = ["ice missile", 8, 2E4, 6, 26, 4, 4287138047, 1, 3, 0, 0, 0, 3, 30, 120, 135, 90, 1, 17, 4287138047, 2, 16, 16, 16, 16, 0, 100, 100, 10, 0, 100, 0, 0, 0, 2, 30, 0, 2, 0, 10, 15, 90, 1, 6, 4287138047, 2, 12, 12, 8, 8, 0, 4, 5, 20, 0, 90, 0, 0];
ITEM_DATA[516] = ["freeze exp rod", 8, 2E4, 12, 60, 5, 4291611903, 1, 6, 1, 5, 15, 1, 0, 80, 90, 70, 0, 21, 4291611903, 2, 16, 16, 16, 16, 0, 0, 100, 40, 0, 100, 0, 0, 0, 5, 10, 0, 0];
ITEM_DATA[517] = ["slow laser gun", 8, 2E4, 14, 31, 6, 4291559424, 1, 3, 1, 32, 48, 1, 10, 20, 30, 50, 1, 18, 4291559424, 1, 8, 12, 8, 8, 0, 0, 200, 10, 0, 100, 1, 0, 0, 1, 100, 55, 0];
ITEM_DATA[518] = ["thorn ms", 8, 2E4, 15, 38, 7, 4291603080, 1, 103, 0, 8, 30, 90, 20, 15, 20, 40, 1, 9, 4291603080, 1, 8, 8, 8, 8, 0, 0, 100, 10, 0, 100, 1, 0, 0, 0, 0, 160, 0, 0, 18, 22, 0];
ITEM_DATA[519] = ["power god", 8, 2E4, 18, 44, 8, 4294967295, 10, 0, 0, 180, 360, 0, 0, 20, 30, 60, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[520] = ["spark cestus", 8, 21E3, 3, 20, 1, 4294967176, 1, 109, 0, 12, 24, 12, 5, 15, 36, 15, 1, 15, 4294967244, 2, 8, 8, 8, 8, 8, 20, 120, 10, 1, 90, 0, 2, 50, 3, 0, 120, 0, 0, 1, 199, 0];
ITEM_DATA[521] = ["flame GS", 8, 21E3, 4, 23, 2, 4294919236, 1, 7, 1, 30, 35, 1, 50, 20, 30, 30, 1, 22, 2298439185, 2, 10, 20, 16, 16, 0, 0, 120, 10, 0, 90, 1, 0, 50, 1, 50, 130, 0, 0, 9, 12, 130];
ITEM_DATA[522] = ["oct poison shot", 8, 21E3, 5, 14, 3, 4288269312, 1, 3, 0, 8, 12, 8, 15, 30, 40, 90, 1, 3, 4288269312, 1, 16, 16, 4, 4, 0, 0, 300, 10, 0, 100, 0, 0, 0, 4, 50, 50, 1, 0, 4, 4, 1, 0, 6, 2291780608, 1, 24, 24, 8, 8, 0, 0, 100, 10, 0, 100, 1, 0];
ITEM_DATA[523] = ["pyroclastic flow", 8, 21E3, 6, 26, 4, 4294919168, 1, 4, 0, 2, 6, 1, 50, 120, 135, 90, 1, 12, 4294919168, 2, 16, 16, 8, 8, 0, 0, 200, 10, 5, 100, 0, 0, 0, 1, 50, 0, 2, 1, 9, 12, 50, 0, 5, 1157588497, 2, 16, 32, 16, 32, 0, 0, 150, 10, 5, 90, 0, 1];
ITEM_DATA[524] = ["giga exp rod", 8, 21E3, 12, 60, 5, 4294936576, 1, 6, 1, 10, 15, 1, 0, 80, 90, 70, 0, 2, 2298447906, 2, 48, 48, 48, 48, 0, 0, 100, 40, 0, 100, 0, 0, 0, 1, 0, 0, 0];
ITEM_DATA[525] = ["rocket launcher", 8, 21E3, 14, 32, 6, 4282663936, 1, 3, 0, 160, 240, 1, 30, 80, 90, 60, 1, 17, 4284900864, 1, 32, 32, 16, 16, 0, 0, 50, 10, 5, 100, 0, 0, 0, 0, 0, 80, 3, 0, 200, 300, 6, 1, 24, 4284892194, 2, 16, 64, 24, 24, 5, 5, 25, 20, 0, 90, 1, 0];
ITEM_DATA[526] = ["poison ms", 8, 21E3, 15, 38, 7, 4287103231, 1, 9, 1, 8, 31, 5, 1, 15, 20, 40, 0, 6, 2290614527, 1, 24, 24, 8, 8, 0, 20, 300, 20, 0, 99, 0, 1, 0, 4, 250, 300, 0, 0, 9, 9, 0];
ITEM_DATA[527] = ["quick god", 8, 21E3, 18, 44, 8, 4288282521, 10, 9, 1, 10, 11, 5, 1, 5, 10, 60, 1, 20, 4289396650, 2, 16, 16, 16, 16, 0, 15, 50, 10, 0, 95, 1, 0, 0, 0, 0, 50, 0, 0, 55, 55, 0];
ITEM_DATA[549] = ["sonic cestus", 8, 22E3, 3, 20, 1, 4294967295, 1, 5703, 1, 80, 120, 9, 10, 5, 8, 15, 1, 22, 1157627903, 2, 16, 8, 0, 0, 0, 10, 10, 5, 0, 90, 1, 0, 0, 0, 0, -1, 0];
ITEM_DATA[550] = ["frozen GS", 8, 22E3, 4, 23, 2, 4288269567, 1, 3, 1, 30, 35, 1, 20, 20, 30, 30, 1, 4, 3432631551, 2, 16, 64, 48, 48, 0, 5, 10, 40, 0, 100, 0, 0, 0, 5, 5, 130, 0, 0, 40, 60, 9];
ITEM_DATA[551] = ["hell fire shot", 8, 22E3, 5, 14, 3, 4294919236, 1, 3, 0, 16, 24, 3, 7, 30, 40, 90, 1, 3, 4294919236, 1, 16, 16, 8, 8, 0, 0, 300, 10, 0, 100, 0, 0, 0, 1, 50, 55, 5, 1, 24, 32, 3, 1, 22, 4294927889, 2, 16, 16, 16, 16, 50, 0, 100, 10, 0, 100, 1, 0];
ITEM_DATA[552] = ["thunderbolt", 8, 22E3, 6, 26, 4, 4294967091, 2, 3, 0, 0, 0, 1, 30, 120, 135, 90, 0, 2, 4294967142, 2, 16, 16, 4, 4, 0, 0, 200, 10, 0, 100, 0, 0, 0, 3, 0, 0, 1, 1, 1, 999, 1, 0, 18, 4294967142, 2, 64, 512, 64, 512, 0, 20, 50, 10, 0, 100, 0, 0];
ITEM_DATA[553] = ["power rod", 8, 22E3, 12, 60, 5, 4288217088, 1, 6, 0, 100, 100, 1, 0, 80, 90, 30, 0, 21, 4288217088, 2, 24, 24, 24, 24, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 0, 0, 0];
ITEM_DATA[554] = ["homing laser wave", 8, 22E3, 14, 33, 6, 4294967193, 1, 803, 0, 20, 30, 9, 30, 20, 30, 70, 1, 11, 4294967193, 1, 16, 16, 8, 8, 0, 0, 200, 10, 0, 100, 1, 0, 200, 3, 0, 55, 0];
ITEM_DATA[555] = ["explosion ms", 8, 22E3, 15, 38, 7, 4294927906, 1, 9, 1, 8, 32, 3, 5, 15, 20, 40, 1, 19, 2298430498, 2, 8, 40, 16, 16, 10, 10, 15, 3, 0, 80, 1, 0, 0, 1, 0, 500, 0, 0, 360, 480, 0];
ITEM_DATA[556] = ["charge god", 8, 22E3, 18, 44, 8, 4282664004, 25, 3, 0, 10, 11, 1, 1, 20, 30, 60, 0, 6, 4284892194, 1, 16, 16, 16, 16, 0, 200, 200, 25, 0, 100, 1, 0, 50, 0, 0, 800, 2, 1, 40, 60, 50, 1, 24, 4284892194, 2, 16, 64, 24, 24, 0, 5, 25, 20, 0, 90, 0, 0];
ITEM_DATA[19] = ["White Stone", 1, 400, 7, 6, 9, 4294967295, 1, 50, 0, "LP +50", ""];
ITEM_DATA[20] = ["Red Stone", 1, 400, 7, 6, 9, 4294914867, 2, 5, 0, "str +5", ""];
ITEM_DATA[21] = ["Green Stone", 1, 400, 7, 6, 9, 4281597747, 3, 5, 0, "dex +5", ""];
ITEM_DATA[22] = ["Blue Stone", 1, 400, 7, 6, 9, 4281545727, 4, 5, 0, "mag +5", ""];
ITEM_DATA[23] = ["Black Stone", 1, 400, 7, 6, 9, 4284900966, 5, 2, 0, "str dex mag +2", ""];
ITEM_DATA[24] = ["Red Crystal", 1, 1200, 8, 7, 9, 4294936712, 6, 1, 3, "AT +(1-3)", ""];
ITEM_DATA[25] = ["Yellow Crystal", 1, 1200, 8, 7, 9, 4294967176, 7, 20, 0, "AT +20%", ""];
ITEM_DATA[26] = ["Silver Crystal", 1, 1200, 8, 7, 9, 4291611852, 8, 1, 0, "Defense +1", ""];
ITEM_DATA[27] = ["Purple Crystal", 1, 1200, 8, 7, 9, 4291598847, 9, 10, 0, "Magic Defense 10%", ""];
ITEM_DATA[28] = ["Black Crystal", 1, 1200, 8, 7, 9, 4284900966, 10, 10, 0, "Block rate 10%", ""];
ITEM_DATA[29] = ["Vampire's Card", 1, 4E3, 10, 9, 9, 4288217088, 11, 3, 0, "3% LP recovery", "per damage"];
ITEM_DATA[30] = ["ONIGIRI's Card", 1, 8E3, 10, 9, 9, 4294967295, 12, 5, 0, "5% chance of", "ONIGIRI drop per hit"];
ITEM_DATA[31] = ["Ruby", 1, 2E3, 9, 8, 9, 4294901760, 13, 1, 2, "Add 1-2 fire", "damage"];
ITEM_DATA[32] = ["Garnet", 1, 2E3, 9, 8, 9, 4294914867, 14, 20, 0, "+0.4s Fire Length", ""];
ITEM_DATA[33] = ["Sapphire", 1, 2E3, 9, 8, 9, 4284914175, 15, 3, 5, "Add 3-5 ice", "damage"];
ITEM_DATA[34] = ["Aquamarine", 1, 2E3, 9, 8, 9, 4284927231, 16, 5, 0, "+5% Cold effect", ""];
ITEM_DATA[35] = ["Topaz", 1, 2E3, 9, 8, 9, 4294954035, 17, 0, 4, "Add 0-4 thunder", "damage"];
ITEM_DATA[36] = ["Emerald", 1, 2E3, 9, 8, 9, 4281597747, 18, 0, 1, "Add 0-1 poison", "damage"];
ITEM_DATA[37] = ["Peridot", 1, 2E3, 9, 8, 9, 4288282419, 19, 50, 0, "+1s Poison Length", ""];
ITEM_DATA[38] = ["Diamond", 1, 4E3, 9, 8, 9, 4294967295, 20, 5, 0, "+0.1s Freeze Length", ""];
ITEM_DATA[39] = ["Quick's Card", 1, 4E3, 10, 46, 9, 4287124736, 21, 10, 0, "-10% Limit AGI", ""];
ITEM_DATA[40] = ["Long Sword's Card", 1, 4E3, 10, 47, 9, 4281545523, 22, 5, 0, "+5 Length of sword", ""];
ITEM_DATA[41] = ["Catapult's Card", 1, 4E3, 10, 48, 9, 4284887808, 23, 20, 0, "+20 Length", ""];
ITEM_DATA[42] = ["Pierce's Card", 1, 4E3, 10, 49, 9, 4291611903, 24, 25, 0, "25% chance of", "penetrate"];
ITEM_DATA[43] = ["Guide's Card", 1, 4E3, 10, 50, 9, 4288282521, 25, 10, 0, "+10 guide length", ""];
ITEM_DATA[44] = ["Bullet's Card", 1, 4E3, 10, 51, 9, 4281545523, 26, 1, 0, "+1 bullet", ""];
ITEM_DATA[45] = ["Explosion's Card", 1, 4E3, 10, 52, 9, 4294940928, 27, 25, 0, "25% chance of", "Explosion damage"];
ITEM_DATA[47] = ["Critical's Card", 1, 4E3, 10, 53, 9, 4294967142, 29, 25, 100, "25% chance of", "AT +100%"];
ITEM_DATA[46] = ["Berserk Card", 1, 4E3, 10, 54, 9, 4291559424, 28, 50, 50, "AT +50%", "DF -50%"];
ITEM_DATA[341] = ["Big Card", 1, 4E3, 10, 55, 9, 4293848814, 42, 50, 0, "50% Attack range", ""];
ITEM_DATA[51] = ["Bronze Medal", 1, 2E3, 11, 10, 9, 4292708369, 33, 10, 0, "+10% Drop rate", ""];
ITEM_DATA[52] = ["Silver Medal", 1, 2E3, 11, 10, 9, 4291611852, 34, 10, 0, "+10% ONIGIRI Drop", ""];
ITEM_DATA[53] = ["Gold Medal", 1, 2E3, 11, 10, 9, 4294958336, 35, 10, 0, "+10% Gold UP", ""];
ITEM_DATA[48] = ["Iron Medal", 1, 2E3, 11, 10, 9, 4284900966, 36, 10, 0, "+10% EXP UP", ""];
ITEM_DATA[243] = ["Ice Charm", 1, 2E3, 16, 39, 9, 4284927231, 38, 50, 0, "50% Ice invalid", ""];
ITEM_DATA[244] = ["Poison Charm", 1, 2E3, 16, 39, 9, 4288282419, 39, 50, 0, "50% Poison invalid", ""];
ITEM_DATA[245] = ["Freeze Charm", 1, 2E3, 16, 39, 9, 4294967295, 40, 50, 0, "50% Freeze invalid", ""];
ITEM_DATA[50] = ["", 0, 4E3, 10, 9, 9, 4294967295, 0, 0, 0, "", ""];
ITEM_DATA[84] = ["White Stone", 2, 800, 7, 6, 9, 4294967295, 1, 100, 0, "LP +100", ""];
ITEM_DATA[85] = ["Red Stone", 2, 800, 7, 6, 9, 4294914867, 2, 10, 0, "str +10", ""];
ITEM_DATA[86] = ["Green Stone", 2, 800, 7, 6, 9, 4281597747, 3, 10, 0, "dex +10", ""];
ITEM_DATA[87] = ["Blue Stone", 2, 800, 7, 6, 9, 4281545727, 4, 10, 0, "mag +10", ""];
ITEM_DATA[88] = ["Black Stone", 2, 800, 7, 6, 9, 4284900966, 5, 4, 0, "str dex mag +4", ""];
ITEM_DATA[89] = ["Red Crystal", 2, 2400, 8, 7, 9, 4294936712, 6, 2, 6, "AT +(2-6)", ""];
ITEM_DATA[90] = ["Yellow Crystal", 2, 2400, 8, 7, 9, 4294967176, 7, 30, 0, "AT +30%", ""];
ITEM_DATA[91] = ["Silver Crystal", 2, 2400, 8, 7, 9, 4291611852, 8, 3, 0, "Defense +3", ""];
ITEM_DATA[92] = ["Purple Crystal", 2, 2400, 8, 7, 9, 4291598847, 9, 20, 0, "Magic Defense 20%", ""];
ITEM_DATA[93] = ["Black Crystal", 2, 2400, 8, 7, 9, 4284900966, 10, 20, 0, "Block rate 20%", ""];
ITEM_DATA[94] = ["Vampire's Card", 3, 8E3, 10, 9, 9, 4288217088, 11, 4, 0, "4% LP recovery", "per damage"];
ITEM_DATA[95] = ["Gold rush Card", 1, 16E3, 10, 9, 9, 4294967040, 37, 5, 0, "5% chance of", "GOLD drop per hit"];
ITEM_DATA[96] = ["Ruby", 2, 4E3, 9, 8, 9, 4294901760, 13, 3, 4, "Add 3-4 fire", "damage"];
ITEM_DATA[97] = ["Garnet", 2, 4E3, 9, 8, 9, 4294914867, 14, 30, 0, "+0.6s Fire Length", ""];
ITEM_DATA[98] = ["Sapphire", 2, 4E3, 9, 8, 9, 4284914175, 15, 6, 10, "Add 6-10 ice", "damage"];
ITEM_DATA[99] = ["Aquamarine", 2, 4E3, 9, 8, 9, 4284927231, 16, 10, 0, "+10% Cold effect", ""];
ITEM_DATA[100] = ["Topaz", 2, 4E3, 9, 8, 9, 4294954035, 17, 0, 9, "Add 0-9 thunder", "damage"];
ITEM_DATA[101] = ["Emerald", 2, 4E3, 9, 8, 9, 4281597747, 18, 1, 1, "Add 1-1 poison", "damage"];
ITEM_DATA[102] = ["Peridot", 2, 4E3, 9, 8, 9, 4288282419, 19, 100, 0, "+2s Poison Length", ""];
ITEM_DATA[103] = ["Diamond", 2, 4E3, 9, 8, 9, 4294967295, 20, 10, 0, "+0.2s Freeze Length", ""];
ITEM_DATA[104] = ["Quick's Card", 2, 8E3, 10, 46, 9, 4287124736, 21, 20, 0, "-20% Limit AGI", ""];
ITEM_DATA[105] = ["Long Sword's Card", 2, 8E3, 10, 47, 9, 4281545523, 22, 8, 0, "+8 Length of sword", ""];
ITEM_DATA[106] = ["Catapult's Card", 2, 8E3, 10, 48, 9, 4284887808, 23, 40, 0, "+40 Length", ""];
ITEM_DATA[107] = ["Pierce's Card", 2, 8E3, 10, 49, 9, 4291611903, 24, 50, 0, "50% chance of", "penetrate"];
ITEM_DATA[108] = ["Guide's Card", 2, 8E3, 10, 50, 9, 4288282521, 25, 20, 0, "+20 guide length", ""];
ITEM_DATA[109] = ["Bullet's Card", 2, 8E3, 10, 51, 9, 4281545523, 26, 2, 0, "+2 bullet", ""];
ITEM_DATA[110] = ["Explosion's Card", 2, 8E3, 10, 52, 9, 4294940928, 27, 50, 0, "50% chance of", "Explosion damage"];
ITEM_DATA[111] = ["Critical's Card", 2, 8E3, 10, 53, 9, 4294967142, 29, 25, 150, "25% chance of", "AT +150%"];
ITEM_DATA[130] = ["Berserk Card", 2, 8E3, 10, 54, 9, 4291559424, 28, 100, 100, "AT +100%", "DF -100%"];
ITEM_DATA[342] = ["Big Card", 2, 8E3, 10, 55, 9, 4293848814, 42, 100, 0, "100% Attack range", ""];
ITEM_DATA[112] = ["Bronze Medal", 2, 4E3, 11, 10, 9, 4292708369, 33, 20, 0, "+20% Drop rate", ""];
ITEM_DATA[113] = ["Silver Medal", 2, 4E3, 11, 10, 9, 4291611852, 34, 20, 0, "+20% ONIGIRI Drop", ""];
ITEM_DATA[114] = ["Gold Medal", 2, 4E3, 11, 10, 9, 4294958336, 35, 20, 0, "+20% Gold UP", ""];
ITEM_DATA[49] = ["Iron Medal", 2, 4E3, 11, 10, 9, 4284900966, 36, 20, 0, "+20% EXP UP", ""];
ITEM_DATA[246] = ["Ice Charm", 2, 4E3, 16, 39, 9, 4284927231, 38, 80, 0, "80% Ice invalid", ""];
ITEM_DATA[247] = ["Poison Charm", 2, 4E3, 16, 39, 9, 4288282419, 39, 80, 0, "80% Poison invalid", ""];
ITEM_DATA[248] = ["Freeze Charm", 2, 4E3, 16, 39, 9, 4294967295, 40, 80, 0, "80% Freeze invalid", ""];
ITEM_DATA[143] = ["White Stone", 3, 1200, 7, 6, 9, 4294967295, 1, 150, 0, "LP +150", ""];
ITEM_DATA[144] = ["Red Stone", 3, 1200, 7, 6, 9, 4294914867, 2, 15, 0, "str +15", ""];
ITEM_DATA[145] = ["Green Stone", 3, 1200, 7, 6, 9, 4281597747, 3, 15, 0, "dex +15", ""];
ITEM_DATA[146] = ["Blue Stone", 3, 1200, 7, 6, 9, 4281545727, 4, 15, 0, "mag +15", ""];
ITEM_DATA[147] = ["Black Stone", 3, 1200, 7, 6, 9, 4284900966, 5, 6, 0, "str dex mag +6", ""];
ITEM_DATA[148] = ["Red Crystal", 3, 3600, 8, 7, 9, 4294936712, 6, 3, 9, "AT +(3-9)", ""];
ITEM_DATA[149] = ["Yellow Crystal", 3, 3600, 8, 7, 9, 4294967176, 7, 40, 0, "AT +40%", ""];
ITEM_DATA[150] = ["Silver Crystal", 3, 3600, 8, 7, 9, 4291611852, 8, 6, 0, "Defense +6", ""];
ITEM_DATA[151] = ["Purple Crystal", 3, 3600, 8, 7, 9, 4291598847, 9, 30, 0, "Magic Defense 30%", ""];
ITEM_DATA[152] = ["Black Crystal", 3, 3600, 8, 7, 9, 4284900966, 10, 30, 0, "Block rate 30%", ""];
ITEM_DATA[159] = ["Vampire's Card", 4, 12E3, 10, 9, 9, 4288217088, 11, 5, 0, "5% LP recovery", "per damage"];
ITEM_DATA[160] = ["Zombie's Card", 4, 24E3, 10, 9, 9, 4281532518, 32, 50, 100, "LP +50% ", "-100% Fire damage"];
ITEM_DATA[161] = ["Ruby", 3, 6E3, 9, 8, 9, 4294901760, 13, 5, 6, "Add 5-6 fire", "damage"];
ITEM_DATA[162] = ["Garnet", 3, 6E3, 9, 8, 9, 4294914867, 14, 40, 0, "+0.8s Fire Length", ""];
ITEM_DATA[163] = ["Sapphire", 3, 6E3, 9, 8, 9, 4284914175, 15, 9, 15, "Add 9-15 ice", "damage"];
ITEM_DATA[164] = ["Aquamarine", 3, 6E3, 9, 8, 9, 4284927231, 16, 15, 0, "+15% Cold effect", ""];
ITEM_DATA[165] = ["Topaz", 3, 6E3, 9, 8, 9, 4294954035, 17, 0, 15, "Add 0-15 thunder", "damage"];
ITEM_DATA[166] = ["Emerald", 3, 6E3, 9, 8, 9, 4281597747, 18, 1, 2, "Add 1-2 poison", "damage"];
ITEM_DATA[167] = ["Peridot", 3, 6E3, 9, 8, 9, 4288282419, 19, 150, 0, "+3s Poison Length", ""];
ITEM_DATA[168] = ["Diamond", 3, 6E3, 9, 8, 9, 4294967295, 20, 15, 0, "+0.3s Freeze Length", ""];
ITEM_DATA[169] = ["Quick's Card", 3, 12E3, 10, 46, 9, 4287124736, 21, 30, 0, "-30% Limit AGI", ""];
ITEM_DATA[170] = ["Long Sword's Card", 3, 12E3, 10, 47, 9, 4281545523, 22, 10, 0, "+10 Length of sword", ""];
ITEM_DATA[171] = ["Catapult's Card", 3, 12E3, 10, 48, 9, 4284887808, 23, 60, 0, "+60 Length", ""];
ITEM_DATA[172] = ["Pierce's Card", 3, 12E3, 10, 49, 9, 4291611903, 24, 75, 0, "75% chance of", "penetrate"];
ITEM_DATA[173] = ["Guide's Card", 3, 12E3, 10, 50, 9, 4288282521, 25, 30, 0, "+30 guide length", ""];
ITEM_DATA[174] = ["Bullet's Card", 3, 12E3, 10, 51, 9, 4281545523, 26, 0, 75, "+75% bullet", ""];
ITEM_DATA[175] = ["Explosion's Card", 3, 12E3, 10, 52, 9, 4294940928, 27, 75, 0, "75% chance of", "Explosion damage"];
ITEM_DATA[176] = ["Critical's Card", 3, 12E3, 10, 53, 9, 4294967142, 29, 25, 200, "25% chance of", "AT +200%"];
ITEM_DATA[177] = ["Berserk Card", 3, 12E3, 10, 54, 9, 4291559424, 28, 150, 150, "AT +150%", "DF -150%"];
ITEM_DATA[343] = ["Big Card", 3, 12E3, 10, 55, 9, 4293848814, 42, 150, 0, "150% Attack range", ""];
ITEM_DATA[184] = ["Bronze Medal", 3, 6E3, 11, 10, 9, 4292708369, 33, 30, 0, "+30% Drop rate", ""];
ITEM_DATA[185] = ["Silver Medal", 3, 6E3, 11, 10, 9, 4291611852, 34, 30, 0, "+30% ONIGIRI Drop", ""];
ITEM_DATA[186] = ["Gold Medal", 3, 6E3, 11, 10, 9, 4294958336, 35, 30, 0, "+30% Gold UP", ""];
ITEM_DATA[187] = ["Iron Medal", 3, 6E3, 11, 10, 9, 4284900966, 36, 30, 0, "+30% EXP UP", ""];
ITEM_DATA[250] = ["Ice Charm", 3, 6E3, 16, 39, 9, 4284927231, 38, 90, 0, "90% Ice invalid", ""];
ITEM_DATA[251] = ["Poison Charm", 3, 6E3, 16, 39, 9, 4288282419, 39, 90, 0, "90% Poison invalid", ""];
ITEM_DATA[252] = ["Freeze Charm", 3, 6E3, 16, 39, 9, 4294967295, 40, 90, 0, "90% Freeze invalid", ""];
ITEM_DATA[209] = ["White Stone", 4, 1600, 7, 6, 9, 4294967295, 1, 200, 0, "LP +200", ""];
ITEM_DATA[210] = ["Red Stone", 4, 1600, 7, 6, 9, 4294914867, 2, 20, 0, "str +20", ""];
ITEM_DATA[211] = ["Green Stone", 4, 1600, 7, 6, 9, 4281597747, 3, 20, 0, "dex +20", ""];
ITEM_DATA[212] = ["Blue Stone", 4, 1600, 7, 6, 9, 4281545727, 4, 20, 0, "mag +20", ""];
ITEM_DATA[213] = ["Black Stone", 4, 1600, 7, 6, 9, 4284900966, 5, 8, 0, "str dex mag +8", ""];
ITEM_DATA[221] = ["Red Crystal", 4, 4800, 8, 7, 9, 4294936712, 6, 4, 12, "AT +(4-12)", ""];
ITEM_DATA[222] = ["Yellow Crystal", 4, 4800, 8, 7, 9, 4294967176, 7, 50, 0, "AT +50%", ""];
ITEM_DATA[223] = ["Silver Crystal", 4, 4800, 8, 7, 9, 4291611852, 8, 9, 0, "Defense +9", ""];
ITEM_DATA[224] = ["Purple Crystal", 4, 4800, 8, 7, 9, 4291598847, 9, 40, 0, "Magic Defense 40%", ""];
ITEM_DATA[225] = ["Black Crystal", 4, 4800, 8, 7, 9, 4284900966, 10, 40, 0, "Block rate 40%", ""];
ITEM_DATA[260] = ["Ruby", 4, 8E3, 9, 8, 9, 4294901760, 13, 6, 9, "Add 6-9 fire", "damage"];
ITEM_DATA[261] = ["Garnet", 4, 8E3, 9, 8, 9, 4294914867, 14, 55, 0, "+1.1s Fire Length", ""];
ITEM_DATA[262] = ["Sapphire", 4, 8E3, 9, 8, 9, 4284914175, 15, 12, 20, "Add 12-20 ice", "damage"];
ITEM_DATA[263] = ["Aquamarine", 4, 8E3, 9, 8, 9, 4284927231, 16, 20, 0, "+20% Cold effect", ""];
ITEM_DATA[264] = ["Topaz", 4, 8E3, 9, 8, 9, 4294954035, 17, 0, 22, "Add 0-22 thunder", "damage"];
ITEM_DATA[265] = ["Emerald", 4, 8E3, 9, 8, 9, 4281597747, 18, 2, 2, "Add 2-2 poison", "damage"];
ITEM_DATA[266] = ["Peridot", 4, 8E3, 9, 8, 9, 4288282419, 19, 200, 0, "+4s Poison Length", ""];
ITEM_DATA[267] = ["Diamond", 4, 8E3, 9, 8, 9, 4294967295, 20, 20, 0, "+0.4s Freeze Length", ""];
ITEM_DATA[237] = ["Quick's Card", 4, 16E3, 10, 46, 9, 4287124736, 21, 40, 0, "-40% Limit AGI", ""];
ITEM_DATA[242] = ["Long Sword's Card", 4, 16E3, 10, 47, 9, 4281545523, 22, 12, 0, "+12 Length of sword", ""];
ITEM_DATA[240] = ["Catapult's Card", 4, 16E3, 10, 48, 9, 4284887808, 23, 80, 0, "+80 Length", ""];
ITEM_DATA[268] = ["Pierce's Card", 4, 16E3, 10, 49, 9, 4291611903, 24, 100, 0, "100% chance of", "penetrate"];
ITEM_DATA[269] = ["Guide's Card", 4, 16E3, 10, 50, 9, 4288282521, 25, 40, 0, "+40 guide length", ""];
ITEM_DATA[238] = ["Bullet's Card", 4, 16E3, 10, 51, 9, 4281545523, 26, 0, 100, "+100% bullet", ""];
ITEM_DATA[249] = ["Explosion's Card", 4, 16E3, 10, 52, 9, 4294940928, 27, 100, 0, "100% chance of", "Explosion damage"];
ITEM_DATA[239] = ["Critical's Card", 4, 16E3, 10, 53, 9, 4294967142, 29, 25, 300, "25% chance of", "AT +300%"];
ITEM_DATA[241] = ["Berserk Card", 4, 16E3, 10, 54, 9, 4291559424, 28, 200, 200, "AT +200%", "DF -200%"];
ITEM_DATA[344] = ["Big Card", 4, 16E3, 10, 55, 9, 4293848814, 42, 200, 0, "200% Attack range", ""];
ITEM_DATA[233] = ["Bronze Medal", 4, 8E3, 11, 10, 9, 4292708369, 33, 40, 0, "+40% Drop rate", ""];
ITEM_DATA[234] = ["Silver Medal", 4, 8E3, 11, 10, 9, 4291611852, 34, 40, 0, "+40% ONIGIRI Drop", ""];
ITEM_DATA[235] = ["Gold Medal", 4, 8E3, 11, 10, 9, 4294958336, 35, 40, 0, "+40% Gold UP", ""];
ITEM_DATA[236] = ["Iron Medal", 4, 8E3, 11, 10, 9, 4284900966, 36, 40, 0, "+40% EXP UP", ""];
ITEM_DATA[320] = ["Ice Charm", 4, 8E3, 16, 39, 9, 4284927231, 38, 95, 0, "95% Ice invalid", ""];
ITEM_DATA[321] = ["Poison Charm", 4, 8E3, 16, 39, 9, 4288282419, 39, 95, 0, "95% Poison invalid", ""];
ITEM_DATA[322] = ["Freeze Charm", 4, 8E3, 16, 39, 9, 4294967295, 40, 95, 0, "95% Freeze invalid", ""];
ITEM_DATA[277] = ["Fire Spirit", 1, 4E3, 17, 40, 9, 4294919202, 41, 100, 278, "100% enemy dies", "Fire"];
ITEM_DATA[279] = ["Fire Spirit", 2, 8E3, 17, 40, 9, 4294919202, 41, 10, 280, "10% enemy dies", "Fire explosion"];
ITEM_DATA[281] = ["Fire Spirit", 3, 12E3, 17, 40, 9, 4294919202, 41, 10, 282, "10% enemy dies", "Flame"];
ITEM_DATA[283] = ["Fire Spirit", 4, 16E3, 17, 40, 9, 4294919202, 41, 10, 284, "10% enemy dies", "Atomic ray"];
ITEM_DATA[278] = ["Fire Spirit", 0, 0, 0, 0, 0, 0, 1, 109, 0, 5, 15, 3, 1, 0, 0, 0, 1, 6, 4294927889, 2, 16, 16, 16, 16, 0, 0, 100, 10, 0, 90, 1, 0, 0, 1, 50, 0, 0];
ITEM_DATA[280] = ["Fire Spirit", 0, 0, 0, 0, 0, 0, 1, 109, 0, 30, 50, 16, 2, 0, 0, 0, 1, 6, 4294927889, 2, 16, 16, 16, 16, 0, 0, 150, 30, 0, 95, 1, 0, 0, 1, 50, 0, 0];
ITEM_DATA[282] = ["Fire Spirit", 0, 0, 0, 0, 0, 0, 1, 204, 0, 30, 50, 16, 40, 0, 0, 0, 1, 6, 2298439185, 2, 16, 20, 12, 12, 50, 0, 100, 10, -1, 99, 1, 0, 0, 1, 50, 0, 0];
ITEM_DATA[284] = ["Fire Spirit", 0, 0, 0, 0, 0, 0, 1, 109, 0, 60, 100, 4, 2, 0, 0, 0, 1, 18, 4294927889, 2, 12, 20, 16, 16, 0, 0, 1E3, 10, 0, 100, 0, 2, 0, 1, 80, 0, 0];
ITEM_DATA[285] = ["Thunder Spirit", 1, 4E3, 17, 40, 9, 4293848576, 41, 50, 286, "50% enemy dies", "Thunder"];
ITEM_DATA[287] = ["Thunder Spirit", 2, 8E3, 17, 40, 9, 4293848576, 41, 10, 288, "10% enemy dies", "Lightning"];
ITEM_DATA[308] = ["Thunder Spirit", 3, 12E3, 17, 40, 9, 4293848576, 41, 10, 309, "10% enemy dies", "Big Thunder"];
ITEM_DATA[310] = ["Thunder Spirit", 4, 16E3, 17, 40, 9, 4293848576, 41, 5, 311, "5% enemy dies", "Thunder Ball"];
ITEM_DATA[286] = ["Thunder Spirit", 0, 0, 0, 0, 0, 0, 1, 105, 0, 1, 99, 1, 5, 0, 0, 0, 1, 10, 4294967142, 2, 16, 16, 16, 16, 0, 0, 200, 10, 0, 100, 0, 0, 0, 3, 0, 0, 0];
ITEM_DATA[288] = ["Thunder Spirit", 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 99, 10, 20, 0, 0, 0, 1, 10, 2291767807, 2, 12, 16, 8, 8, 10, 0, 500, 10, 0, 100, 0, 0, 0, 3, 0, 0, 0];
ITEM_DATA[309] = ["Thunder Spirit", 0, 0, 0, 0, 0, 0, 1, 108, 1, 1, 333, 1, 0, 0, 0, 0, 1, 10, 4294967142, 2, 64, 64, 64, 64, 0, 25, 26, 10, 50, 100, 0, 1, 0, 3, 0, 0, 0];
ITEM_DATA[311] = ["Thunder Spirit", 0, 0, 0, 0, 0, 0, 1, 105, 0, 1, 9999, 1, 4, 0, 0, 0, 1, 2, 4294967142, 2, 16, 16, 16, 16, 0, 0, 200, 10, 0, 100, 0, 0, 0, 3, 0, 0, 2, 0, 1, 9, 30, 0, 15, 4294967142, 1, 16, 16, 8, 8, 0, 0, 50, 10, 0, 0, 0, 0];
ITEM_DATA[377] = ["Ice Spirit", 1, 4E3, 17, 40, 9, 4284927231, 41, 50, 378, "50% enemy dies", "Freeze arrow"];
ITEM_DATA[379] = ["Ice Spirit", 2, 8E3, 17, 40, 9, 4284927231, 41, 20, 380, "20% enemy dies", "Ice mist"];
ITEM_DATA[381] = ["Ice Spirit", 3, 12E3, 17, 40, 9, 4284927231, 41, 20, 382, "20% enemy dies", "Freeze spike"];
ITEM_DATA[383] = ["Ice Spirit", 4, 2E4, 17, 40, 9, 4284927231, 41, 40, 384, "40% enemy dies", "Ice meteor"];
ITEM_DATA[378] = ["Ice Spirit", 0, 0, 0, 0, 0, 0, 1, 109, 0, 25, 50, 4, 1, 0, 0, 0, 1, 3, 4291611903, 2, 16, 16, 8, 8, 0, 25, 2E3, 10, 0, 100, 0, 2, 0, 5, 50, 0, 0];
ITEM_DATA[380] = ["Ice Spirit", 0, 0, 0, 0, 0, 0, 1, 2404, 1, 5, 5, 9, 50, 0, 0, 0, 0, 6, 1154272511, 2, 32, 32, 48, 48, 0, 50, 51, 10, 2, 95, 0, 1, 0, 2, 40, 0, 0];
ITEM_DATA[382] = ["Ice Spirit", 0, 0, 0, 0, 0, 0, 1, 4, 0, 5, 5, 25, 100, 0, 0, 0, 1, 9, 3435973887, 2, 12, 12, 6, 6, 0, 25, 200, 10, 5, 100, 0, 0, 0, 5, 20, 0, 0];
ITEM_DATA[384] = ["Ice Spirit", 0, 0, 0, 0, 0, 0, 1, 105, 0, 100, 150, 1, 5, 0, 0, 0, 1, 16, 4291611903, 2, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 2, 20, 0, 4, 0, 10, 15, 9, 1, 16, 3431500031, 2, 12, 12, 6, 6, 0, 10, 100, 10, 5, 100, 0, 0];
ITEM_DATA[404] = ["Poison Spirit", 4, 2E4, 17, 40, 9, 4278255360, 41, 60, 405, "60% enemy dies", "Poison"];
ITEM_DATA[405] = ["Poison Spirit", 0, 0, 0, 0, 0, 0, 1, 109, 1, 1, 1, 6, 1, 0, 0, 0, 0, 6, 1147600640, 2, 24, 24, 32, 32, 0, 50, 51, 10, 0, 88, 0, 1, 0, 4, 1E3, 0, 0];
ITEM_DATA[323] = ["White Stone", 5, 2E3, 7, 6, 9, 4294967295, 1, 300, 0, "LP +300", ""];
ITEM_DATA[324] = ["Red Stone", 5, 2E3, 7, 6, 9, 4294914867, 2, 25, 0, "str +25", ""];
ITEM_DATA[325] = ["Green Stone", 5, 2E3, 7, 6, 9, 4281597747, 3, 25, 0, "dex +25", ""];
ITEM_DATA[326] = ["Blue Stone", 5, 2E3, 7, 6, 9, 4281545727, 4, 25, 0, "mag +25", ""];
ITEM_DATA[327] = ["Black Stone", 5, 2E3, 7, 6, 9, 4284900966, 5, 10, 0, "str dex mag +10", ""];
ITEM_DATA[336] = ["Red Crystal", 5, 6E3, 8, 7, 9, 4294936712, 6, 5, 15, "AT +(5-15)", ""];
ITEM_DATA[337] = ["Yellow Crystal", 5, 6E3, 8, 7, 9, 4294967176, 7, 60, 0, "AT +60%", ""];
ITEM_DATA[338] = ["Silver Crystal", 5, 6E3, 8, 7, 9, 4291611852, 8, 12, 0, "Defense +12", ""];
ITEM_DATA[339] = ["Purple Crystal", 5, 6E3, 8, 7, 9, 4291598847, 9, 50, 0, "Magic Defense 50%", ""];
ITEM_DATA[340] = ["Black Crystal", 5, 6E3, 8, 7, 9, 4284900966, 10, 50, 0, "Block rate 50%", ""];
ITEM_DATA[369] = ["Ruby", 5, 1E4, 9, 8, 9, 4294901760, 13, 8, 12, "Add 8-12 fire", "damage"];
ITEM_DATA[370] = ["Garnet", 5, 1E4, 9, 8, 9, 4294914867, 14, 70, 0, "+1.4s Fire Length", ""];
ITEM_DATA[371] = ["Sapphire", 5, 1E4, 9, 8, 9, 4284914175, 15, 15, 25, "Add 15-25 ice", "damage"];
ITEM_DATA[372] = ["Aquamarine", 5, 1E4, 9, 8, 9, 4284927231, 16, 25, 0, "+25% Cold effect", ""];
ITEM_DATA[373] = ["Topaz", 5, 1E4, 9, 8, 9, 4294954035, 17, 0, 30, "Add 0-30 thunder", "damage"];
ITEM_DATA[374] = ["Emerald", 5, 1E4, 9, 8, 9, 4281597747, 18, 2, 3, "Add 2-3 poison", "damage"];
ITEM_DATA[375] = ["Peridot", 5, 1E4, 9, 8, 9, 4288282419, 19, 250, 0, "+5s Poison Length", ""];
ITEM_DATA[376] = ["Diamond", 5, 1E4, 9, 8, 9, 4294967295, 20, 25, 0, "+0.5s Freeze Length", ""];
ITEM_DATA[353] = ["Quick's Card", 5, 2E4, 10, 46, 9, 4287124736, 21, 50, 0, "-50% Limit AGI", ""];
ITEM_DATA[354] = ["Long Sword's Card", 5, 2E4, 10, 47, 9, 4281545523, 22, 15, 0, "+15 Length of sword", ""];
ITEM_DATA[355] = ["Catapult's Card", 5, 2E4, 10, 48, 9, 4284887808, 23, 100, 0, "+100 Length", ""];
ITEM_DATA[356] = ["Guide's Card", 5, 2E4, 10, 50, 9, 4288282521, 25, 50, 0, "+50 guide length", ""];
ITEM_DATA[357] = ["Bullet's Card", 5, 2E4, 10, 51, 9, 4281545523, 26, 6, 0, "+6 bullet", ""];
ITEM_DATA[358] = ["Critical's Card", 5, 2E4, 10, 53, 9, 4294967142, 29, 25, 400, "25% chance of", "AT +400%"];
ITEM_DATA[359] = ["Berserk Card", 5, 2E4, 10, 54, 9, 4291559424, 28, 250, 250, "AT +250%", "DF -250%"];
ITEM_DATA[368] = ["Big Card", 5, 2E4, 10, 55, 9, 4293848814, 42, 300, 0, "300% Attack range", ""];
ITEM_DATA[385] = ["Bronze Medal", 5, 1E4, 11, 10, 9, 4292708369, 33, 50, 0, "+50% Drop rate", ""];
ITEM_DATA[386] = ["Silver Medal", 5, 1E4, 11, 10, 9, 4291611852, 34, 50, 0, "+50% ONIGIRI Drop", ""];
ITEM_DATA[387] = ["Gold Medal", 5, 1E4, 11, 10, 9, 4294958336, 35, 50, 0, "+50% Gold UP", ""];
ITEM_DATA[388] = ["Iron Medal", 5, 1E4, 11, 10, 9, 4284900966, 36, 50, 0, "+50% EXP UP", ""];
ITEM_DATA[389] = ["Knockback's Card", 1, 4E3, 10, 56, 9, 4288282572, 43, 25, 20, "25% chance of", "Knockback 20"];
ITEM_DATA[390] = ["Knockback's Card", 2, 8E3, 10, 56, 9, 4288282572, 43, 50, 20, "50% chance of", "Knockback 20"];
ITEM_DATA[391] = ["Knockback's Card", 3, 12E3, 10, 56, 9, 4288282572, 43, 50, 30, "50% chance of", "Knockback 30"];
ITEM_DATA[392] = ["Knockback's Card", 4, 16E3, 10, 56, 9, 4288282572, 43, 100, 30, "100% chance of", "Knockback 30"];
ITEM_DATA[393] = ["Knockback's Card", 5, 2E4, 10, 56, 9, 4288282572, 43, 30, 90, "30% chance of", "Knockback 90"];
ITEM_DATA[406] = ["Reflection Card", 1, 4E3, 10, 57, 9, 4294967244, 44, 25, 0, "25% chance of", "Reflection"];
ITEM_DATA[407] = ["Reflection Card", 2, 8E3, 10, 57, 9, 4294967244, 44, 50, 0, "50% chance of", "Reflection"];
ITEM_DATA[408] = ["Reflection Card", 3, 12E3, 10, 57, 9, 4294967244, 44, 75, 0, "75% chance of", "Reflection"];
ITEM_DATA[409] = ["Reflection Card", 4, 16E3, 10, 57, 9, 4294967244, 44, 100, 0, "100% chance of", "Reflection"];
ITEM_DATA[459] = ["Ring's Card", 1, 4E3, 10, 62, 9, 4294967091, 47, 1, 0, "Ring +1", ""];
ITEM_DATA[460] = ["Ring's Card", 2, 8E3, 10, 62, 9, 4294967091, 47, 1, 50, "Ring +1", "LP +50"];
ITEM_DATA[461] = ["Ring's Card", 3, 12E3, 10, 62, 9, 4294967091, 47, 1, 100, "Ring +1", "LP +100"];
ITEM_DATA[462] = ["Ring's Card", 4, 16E3, 10, 62, 9, 4294967091, 47, 1, 150, "Ring +1", "LP +150"];
ITEM_DATA[463] = ["Ring's Card", 5, 2E4, 10, 62, 9, 4294967091, 47, 1, 200, "Ring +1", "LP +200"];
ITEM_DATA[464] = ["Ring's Card", 6, 24E3, 10, 62, 9, 4294967091, 47, 1, 300, "Ring +1", "LP +300"];
ITEM_DATA[418] = ["White Stone", 6, 2400, 7, 6, 9, 4294967295, 1, 400, 0, "LP +400", ""];
ITEM_DATA[419] = ["Red Stone", 6, 2400, 7, 6, 9, 4294914867, 2, 30, 0, "str +30", ""];
ITEM_DATA[420] = ["Green Stone", 6, 2400, 7, 6, 9, 4281597747, 3, 30, 0, "dex +30", ""];
ITEM_DATA[421] = ["Blue Stone", 6, 2400, 7, 6, 9, 4281545727, 4, 30, 0, "mag +30", ""];
ITEM_DATA[422] = ["Black Stone", 6, 2400, 7, 6, 9, 4284900966, 5, 15, 0, "str dex mag +15", ""];
ITEM_DATA[424] = ["Red Crystal", 6, 7200, 8, 7, 9, 4294936712, 6, 6, 18, "AT +(6-18)", ""];
ITEM_DATA[425] = ["Yellow Crystal", 6, 7200, 8, 7, 9, 4294967176, 7, 70, 0, "AT +70%", ""];
ITEM_DATA[426] = ["Silver Crystal", 6, 7200, 8, 7, 9, 4291611852, 8, 15, 0, "Defense +15", ""];
ITEM_DATA[427] = ["Purple Crystal", 6, 7200, 8, 7, 9, 4291598847, 9, 60, 0, "Magic Defense 60%", ""];
ITEM_DATA[428] = ["Black Crystal", 6, 7200, 8, 7, 9, 4284900966, 10, 60, 0, "Block rate 60%", ""];
ITEM_DATA[443] = ["Ruby", 6, 12E3, 9, 8, 9, 4294901760, 13, 10, 15, "Add 10-15 fire", "damage"];
ITEM_DATA[444] = ["Garnet", 6, 12E3, 9, 8, 9, 4294914867, 14, 85, 0, "+1.7s Fire Length", ""];
ITEM_DATA[446] = ["Sapphire", 6, 12E3, 9, 8, 9, 4284914175, 15, 18, 30, "Add 18-30 ice", "damage"];
ITEM_DATA[447] = ["Aquamarine", 6, 12E3, 9, 8, 9, 4284927231, 16, 30, 0, "+30% Cold effect", ""];
ITEM_DATA[448] = ["Topaz", 6, 12E3, 9, 8, 9, 4294954035, 17, 0, 39, "Add 0-39 thunder", "damage"];
ITEM_DATA[449] = ["Emerald", 6, 12E3, 9, 8, 9, 4281597747, 18, 3, 3, "Add 3-3 poison", "damage"];
ITEM_DATA[450] = ["Peridot", 6, 12E3, 9, 8, 9, 4288282419, 19, 300, 0, "+6s Poison Length", ""];
ITEM_DATA[445] = ["Diamond", 6, 12E3, 9, 8, 9, 4294967295, 20, 30, 0, "+0.6s Freeze Length", ""];
ITEM_DATA[423] = ["Katana's Card", 6, 24E3, 10, 58, 9, 4281545523, 45, 40, 10, "AT +40%", "+10 Length of sword"];
ITEM_DATA[465] = ["Long Sword's Card", 6, 24E3, 10, 47, 9, 4281545523, 22, 20, 0, "+20 Length of sword", ""];
ITEM_DATA[466] = ["Catapult's Card", 6, 24E3, 10, 48, 9, 4284887808, 23, 120, 0, "+120 Length", ""];
ITEM_DATA[467] = ["Guide's Card", 6, 24E3, 10, 50, 9, 4288282521, 25, 60, 0, "+60 guide length", ""];
ITEM_DATA[468] = ["Bullet's Card", 6, 24E3, 10, 51, 9, 4281545523, 26, 0, 125, "+125% bullet", ""];
ITEM_DATA[469] = ["Critical's Card", 6, 24E3, 10, 53, 9, 4294967142, 29, 20, 600, "20% chance of", "AT +600%"];
ITEM_DATA[470] = ["Berserk Card", 6, 24E3, 10, 54, 9, 4291559424, 28, 300, 200, "AT +300%", "DF -200%"];
ITEM_DATA[437] = ["Bronze Medal", 6, 12E3, 11, 10, 9, 4292708369, 33, 75, 0, "+75% Drop rate", ""];
ITEM_DATA[438] = ["Silver Medal", 6, 12E3, 11, 10, 9, 4291611852, 34, 75, 0, "+75% ONIGIRI Drop", ""];
ITEM_DATA[439] = ["Gold Medal", 6, 12E3, 11, 10, 9, 4294958336, 35, 75, 0, "+75% Gold UP", ""];
ITEM_DATA[440] = ["Iron Medal", 6, 12E3, 11, 10, 9, 4284900966, 36, 75, 0, "+75% EXP UP", ""];
ITEM_DATA[441] = ["Heal's Card", 1, 48E3, 10, 59, 9, 4294967295, 46, 1, 0, "Heal to attack each", "+1"];
ITEM_DATA[442] = ["Heal's Card", 2, 48E3, 10, 59, 9, 4294967295, 46, 2, 0, "Heal to attack each", "+2"];
ITEM_DATA[491] = ["White Stone", 7, 2800, 7, 6, 9, 4294967295, 1, 500, 0, "LP +500", ""];
ITEM_DATA[492] = ["Red Stone", 7, 2800, 7, 6, 9, 4294914867, 2, 40, 0, "str +40", ""];
ITEM_DATA[493] = ["Green Stone", 7, 2800, 7, 6, 9, 4281597747, 3, 40, 0, "dex +40", ""];
ITEM_DATA[494] = ["Blue Stone", 7, 2800, 7, 6, 9, 4281545727, 4, 40, 0, "mag +40", ""];
ITEM_DATA[495] = ["Black Stone", 7, 2800, 7, 6, 9, 4284900966, 5, 20, 0, "str dex mag +20", ""];
ITEM_DATA[528] = ["Red Crystal", 7, 8400, 8, 7, 9, 4294936712, 6, 7, 21, "AT +(7-21)", ""];
ITEM_DATA[529] = ["Yellow Crystal", 7, 8400, 8, 7, 9, 4294967176, 7, 80, 0, "AT +80%", ""];
ITEM_DATA[530] = ["Silver Crystal", 7, 8400, 8, 7, 9, 4291611852, 8, 18, 0, "Defense +18", ""];
ITEM_DATA[531] = ["Purple Crystal", 7, 8400, 8, 7, 9, 4291598847, 9, 70, 0, "Magic Defense 70%", ""];
ITEM_DATA[532] = ["Black Crystal", 7, 8400, 8, 7, 9, 4284900966, 10, 70, 0, "Block rate 70%", ""];
ITEM_DATA[533] = ["Ruby", 7, 14E3, 9, 8, 9, 4294901760, 13, 15, 20, "Add 15-20 fire", "damage"];
ITEM_DATA[534] = ["Garnet", 7, 14E3, 9, 8, 9, 4294914867, 14, 100, 0, "+2.0s Fire Length", ""];
ITEM_DATA[535] = ["Sapphire", 7, 14E3, 9, 8, 9, 4284914175, 15, 21, 35, "Add 21-35 ice", "damage"];
ITEM_DATA[536] = ["Aquamarine", 7, 14E3, 9, 8, 9, 4284927231, 16, 35, 0, "+35% Cold effect", ""];
ITEM_DATA[537] = ["Topaz", 7, 14E3, 9, 8, 9, 4294954035, 17, 0, 49, "Add 0-49 thunder", "damage"];
ITEM_DATA[538] = ["Emerald", 7, 14E3, 9, 8, 9, 4281597747, 18, 3, 4, "Add 3-4 poison", "damage"];
ITEM_DATA[539] = ["Peridot", 7, 14E3, 9, 8, 9, 4288282419, 19, 350, 0, "+7s Poison Length", ""];
ITEM_DATA[540] = ["Diamond", 7, 14E3, 9, 8, 9, 4294967295, 20, 35, 0, "+0.7s Freeze Length", ""];
ITEM_DATA[541] = ["Katana's Card", 7, 28E3, 10, 58, 9, 4281545523, 45, 50, 10, "AT +50%", "+10 Length of sword"];
ITEM_DATA[542] = ["Quick's Card", 7, 28E3, 10, 46, 9, 4287124736, 21, 60, 0, "-60% Limit AGI", ""];
ITEM_DATA[543] = ["Long Sword's Card", 7, 28E3, 10, 47, 9, 4281545523, 22, 25, 0, "+25 Length of sword", ""];
ITEM_DATA[544] = ["Catapult's Card", 7, 28E3, 10, 48, 9, 4284887808, 23, 150, 0, "+150 Length", ""];
ITEM_DATA[545] = ["Guide's Card", 7, 28E3, 10, 50, 9, 4288282521, 25, 70, 0, "+70 guide length", ""];
ITEM_DATA[546] = ["Bullet's Card", 7, 28E3, 10, 51, 9, 4281545523, 26, 0, 150, "+150% bullet", ""];
ITEM_DATA[547] = ["Critical's Card", 7, 28E3, 10, 53, 9, 4294967142, 29, 15, 900, "15% chance of", "AT +900%"];
ITEM_DATA[548] = ["Berserk Card", 7, 28E3, 10, 54, 9, 4291559424, 28, 350, 200, "AT +350%", "DF -200%"];
ITEM_DATA[487] = ["Bronze Medal", 7, 14E3, 11, 10, 9, 4292708369, 33, 100, 0, "+100% Drop rate", ""];
ITEM_DATA[488] = ["Silver Medal", 7, 14E3, 11, 10, 9, 4291611852, 34, 100, 0, "+100% ONIGIRI Drop", ""];
ITEM_DATA[489] = ["Gold Medal", 7, 14E3, 11, 10, 9, 4294958336, 35, 100, 0, "+100% Gold UP", ""];
ITEM_DATA[490] = ["Iron Medal", 7, 14E3, 11, 10, 9, 4284900966, 36, 100, 0, "+100% EXP UP", ""];
ITEM_DATA[557] = ["Imperial Crown", 0, 400, 19, 63, 9, 4294956800, 48, 50, 0, "+50% Enemy", "(Passive)"];
ITEM_DATA[558] = ["Imperial Crown", 2, 400, 19, 63, 9, 4294956800, 48, 100, 0, "+100% Enemy", "(Passive)"];
ITEM_DATA[559] = ["Imperial Crown", 3, 400, 19, 63, 9, 4294956800, 48, 150, 0, "+150% Enemy", "(Passive)"];
ITEM_DATA[560] = ["Imperial Crown", 4, 400, 19, 63, 9, 4294956800, 48, 200, 0, "+200% Enemy", "(Passive)"];
ITEM_DATA[561] = ["Anger Crown", 0, 400, 19, 63, 9, 4292730333, 49, 0, 0, "LV up effect", "(Passive)"];
ITEM_DATA[562] = ["Anger Crown", 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 9999, 1, 0, 0, 0, 0, 0, 18, 4294967193, 2, 64, 512, 64, 512, 0, 0, 10, 20, 0, 100, 1, 0, 0, 3, 0, 0, 0];
ITEM_DATA[563] = ["Anger Crown", 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 999, 1, 0, 0, 0, 0, 0, 21, 4294967193, 2, 8, 8, 16, 16, 0, 0, 10, 3, -9, 100, 1, 0, 0, 3, 0, 0, 0];
var SaveCodeGenerated = 0;
var SaveMessageTime = 0;
var SaveCode = "";
window.GameSave = getSaveCode;

/*
作られたセーブコードを取得
*/
function getSaveCode(a) {
    if (0 == a.length) {
        return ""
    } else {
        return SaveCode
    }
}

var SaveCodeError = 0, SaveCodeErrorMessageTime = 0, SaveCodeErrorMessage = "";
window.GameLoad = setSaveCode;

/*
セーブコードをセットしてゲームデータをリセット
*/
function setSaveCode(a) {
    if (0 != a.length) {
        SaveCodeErrorMessage = a;
        return 0;
    }
    if (0 == a.length) {
        if (0 == SaveCodeErrorMessage.length) {
            return -1;
        }
        SelectedPanel = SignTouch = CurrentArea = CurrentStage = TextFadeTime = SequenceStep = 0;
        SelectedPlayer = 3;
        MouseUp = !1;
        for (a = 0; 4 > a; a++) {
            PlayerMp[a] = 0;
        }
        ClickToSell = 0;
        SR_PLAYER.plReset();
        SR_INDICATOR.inReset();
        SR_PROJECTILE.pjReset();
        SR_DROP.dpReset();
        SR_WORLD_MAP.mpSet();
        SaveCodeError = loadSaveCode(SaveCodeErrorMessage, 0);
        if (0 < SaveCodeError) {
            SaveCodeErrorMessageTime = 50;
        } else {
            SaveCode = generateSaveCode(0);
        }
        SaveCodeErrorMessage = "";
        antiCheatSet()
    }
    return -1
}

window.AutoSave = saveGame;

/*
cookieに保存するときに使用
*/
function saveGame(a) {
    if (0 == a.length || !SaveCodeGenerated) {
        return "";
    }
    SaveCodeGenerated = 0;
    SaveMessageTime = 50;
    return getSaveCode("0")
}

/*
a番目のアイテムのb番目の要素を取得
*/
function getItemData(a, b) {
    if (ITEM_DATA[a].length <= b) {
        return 0
    } else if (6 == b || 19 == b || 44 == b) {
        //色が符号付きの数とか小数とかにならないようにする
        return ITEM_DATA[a][b] >>> 0
    } else {
        return ITEM_DATA[a][b]
    }
}

var CheckCompo1 = !1;
var CheckCompo2 = !1;

/*
a番目のアイテムにbタイプのコンポがあるかチェック
*/
function checkInventoryCompo(a, b) {
    CheckCompo2 = CheckCompo1 = !1;
    if (getItemData(InventoryCompo1[a], 7) == b) {
        CheckCompo1 = !0;
    }
    if (getItemData(InventoryCompo2[a], 7) == b) {
        CheckCompo2 = !0;
    }
    if (CheckCompo1 || CheckCompo2) {
        return !0
    } else {
        return !1
    }
}

/*
a番目のアイテムのbの要素を取得
*/
function getInventoryCompo(a, b) {
    var c = 0;
    if (CheckCompo1) {
        c += getItemData(InventoryCompo1[a], b);
    }
    if (CheckCompo2) {
        c += getItemData(InventoryCompo2[a], b);
    }
    return c
}

var CHAR_LIST = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.*".split("");

/*
セーブコード作る
*/
function generateSaveCode(a) {
    var b;
    var c;
    var d = new Int32Array(512);
    b = 0;
    d[b++] = 1;
    d[b++] = 0;
    d[b++] = 0;
    d[b++] = srFloor(srRandom(64));
    d[b++] = srFloor(srRandom(64));
    for (c = 0; 8 > c; c++) {
        //ログイン時のユーザーごとのパラメーター
        d[b++] = UserCode2Array[c];
    }
    if (0 == a) {
        d[b++] = CurrentStage >> 6 & 63;
        d[b++] = CurrentStage >> 0 & 63;
    }
    d[b++] = PartyLv[0] >> 6 & 63;
    d[b++] = PartyLv[0] >> 0 & 63;
    if (1 == a) {
        d[b++] = PartyRank[0];
    }
    for (c = 0; 4 > c; c++) {
        d[b++] = PlayerSp[c] >> 6 & 63;
        d[b++] = PlayerSp[c] >> 0 & 63;
    }
    if (0 == a) {
        d[b++] = PartyExp >> 18 & 63;
        d[b++] = PartyExp >> 12 & 63;
        d[b++] = PartyExp >> 6 & 63;
        d[b++] = PartyExp >> 0 & 63;
        d[b++] = PartyGold >> 18 & 63;
        d[b++] = PartyGold >> 12 & 63;
        d[b++] = PartyGold >> 6 & 63;
        d[b++] = PartyGold >> 0 & 63;
    }
    for (c = 0; 4 > c; c++) {
        d[b++] = PlayerClass[c] >> 0 & 63;
    }
    if (0 == a) {
        for (c = 0; 4 > c; c++) {
            d[b++] = PlayerCurrentLp[c] >> 12 & 63;
            d[b++] = PlayerCurrentLp[c] >> 6 & 63;
            d[b++] = PlayerCurrentLp[c] >> 0 & 63;
        }
    }
    for (c = 0; 4 > c; c++) {
        d[b++] = PlayerSpLp[c] >> 6 & 63;
        d[b++] = PlayerSpLp[c] >> 0 & 63;
        d[b++] = PlayerSpStr[c] >> 6 & 63;
        d[b++] = PlayerSpStr[c] >> 0 & 63;
        d[b++] = PlayerSpDex[c] >> 6 & 63;
        d[b++] = PlayerSpDex[c] >> 0 & 63;
        d[b++] = PlayerSpMag[c] >> 6 & 63;
        d[b++] = PlayerSpMag[c] >> 0 & 63;
    }
    for (c = 4; 8 > c; c++) {
        d[b++] = InventoryItem[c] >> 6 & 63;
        d[b++] = InventoryItem[c] >> 0 & 63;
        d[b++] = InventoryCompo1[c] >> 6 & 63;
        d[b++] = InventoryCompo1[c] >> 0 & 63;
        d[b++] = InventoryCompo2[c] >> 6 & 63;
        d[b++] = InventoryCompo2[c] >> 0 & 63;
    }
    if (0 == a) {
        for (c = 16; 41 > c; c++) {
            d[b++] = InventoryItem[c] >> 6 & 63;
            d[b++] = InventoryItem[c] >> 0 & 63;
            d[b++] = InventoryCompo1[c] >> 6 & 63;
            d[b++] = InventoryCompo1[c] >> 0 & 63;
            d[b++] = InventoryCompo2[c] >> 6 & 63;
            d[b++] = InventoryCompo2[c] >> 0 & 63;
        }
        for (c = 0; 4 > c; c++) {
            d[b++] = PlayerAutoMove[c];
        }
        d[b++] = PartyMoveIfDying;
        d[b++] = PartyDamageEffect;
        d[b++] = PartyShowLpBar;
        d[b++] = PartyPlayerSymbol;
        d[b++] = PartyDragDeadBody;
        for (c = 0; 3 > c; c++) {
            d[b++] = 0;
        }
        for (c = 0; c < StageCount; c++) {
            a = StageOpenData[c];
            for (var e = 0; c < StageCount - 1 && a == StageOpenData[c + 1]; c++) {
                //if (e++, 31 == e) {
                e++;
                if (31 == e) {
                    c++;
                    break
                }
            }
            d[b++] = a;
            if (0 < e) {
                d[b++] = 16 + e
            }
        }
    }
    //ハッシュ合計(エラー対策)
    for (c = e = 0; c < b; c++) {
        e += d[c] * (srFloor(c / 7) + 1);
    }
    d[1] = e >> 6 & 63;
    d[2] = e & 63;
    for (c = e = 0; c < b; c++) {
        e += d[c] * ((c & 15) + 1);
    }
    //ぐちゃぐちゃにする
    d[b++] = e >> 8 & 47;
    d[b++] = e >> 4 & 31;
    d[b++] = e >> 0 & 15;
    a = "" + CHAR_LIST[d[0]];
    a += CHAR_LIST[d[1]];
    a += CHAR_LIST[d[2]];
    e = d[2];
    for (c = 3; c < b; c++) {
        a += CHAR_LIST[d[c] + e & 63];
        e += d[c] + c + d[1];
    }
    return a
}

/*
セーブコード読み取る
*/
function loadSaveCode(a, b) {
    var c = 4 * b;
    var d;
    var e;
    var g = new Int32Array(512);
    var h = a.length;
    var q = 0;
    if (0 == h) {
        return 1;
    }
    if (90 > h) {
        //長いと一人用かな
        q = 1;
    }
    for (d = 0; d < h; d++) {
        var m = a.charAt(d);
        for (e = 0; e < CHAR_LIST.length; e++) {
            if (CHAR_LIST[e] == m) {
                g[d] = e;
                break
            }
        }
    }
    if (0 >= g[0]) {
        return 2;
    }
    e = g[2];
    for (d = 3; d < h; d++) {
        g[d] = g[d] - e & 63;
        e += g[d] + d + g[1];
    }
    for (d = e = 0; d < h - 3; d++) {
        e += g[d] * ((d & 15) + 1);
    }
    if (g[d + 0] != (e >> 8 & 47) || g[d + 1] != (e >> 4 & 31) || g[d + 2] != (e >> 0 & 15)) {
        return 3;
    }
    if (0 == b) {
        for (d = 0; 8 > d; d++) {
            if (g[d + 5] != UserCode2Array[d]) {
                //ユーザー違うとき
                //return 4;
                //自動修正するmod
                UserCode2Array[d] = g[d + 5];
            }
        }
    }
    d = 0;
    d++;
    d++;
    d++;
    d++;
    d++;
    d += 8;
    if (!q) {
        CurrentStage = (g[d++] << 6) + g[d++];
    }
    PartyLv[b] = (g[d++] << 6) + g[d++];
    if (1 == q) {
        PartyRank[b] = g[d++];
    }
    for (e = c; e < c + 4; e++) {
        PlayerSp[e] = (g[d++] << 6) + g[d++];
    }
    if (!q) {
        PartyExp = (g[d++] << 18) + (g[d++] << 12) + (g[d++] << 6) + g[d++];
        PartyGold = (g[d++] << 18) + (g[d++] << 12) + (g[d++] << 6) + g[d++];
    }
    for (e = c; e < c + 4; e++) {
        PlayerClass[e] = g[d++];
    }
    if (!q) {
        for (e = c; e < c + 4; e++) {
            PlayerCurrentLp[e] = (g[d++] << 12) + (g[d++] << 6) + g[d++];
        }
    }
    for (e = c; e < c + 4; e++) {
        PlayerSpLp[e] = (g[d++] << 6) + g[d++];
        PlayerSpStr[e] = (g[d++] << 6) + g[d++];
        PlayerSpDex[e] = (g[d++] << 6) + g[d++];
        PlayerSpMag[e] = (g[d++] << 6) + g[d++];
    }
    for (e = 4 + c; e < 8 + c; e++) {
        InventoryItem[e] = (g[d++] << 6) + g[d++];
        InventoryCompo1[e] = (g[d++] << 6) + g[d++];
        InventoryCompo2[e] = (g[d++] << 6) + g[d++];
    }
    if (1 == q) {
        return 0;
    }
    for (e = 16; 41 > e; e++) {
        InventoryItem[e] = (g[d++] << 6) + g[d++];
        InventoryCompo1[e] = (g[d++] << 6) + g[d++];
        InventoryCompo2[e] = (g[d++] << 6) + g[d++];
    }
    for (e = 0; 4 > e; e++) {
        PlayerAutoMove[e] = g[d++];
    }
    PartyMoveIfDying = g[d++];
    PartyDamageEffect = g[d++];
    PartyShowLpBar = g[d++];
    PartyPlayerSymbol = g[d++];
    PartyDragDeadBody = g[d++];
    for (e = 0; 3 > e; e++) {
        d++;
    }
    for (e = 0; e < StageCount; e++) {
        StageOpenData[e] = 0;
    }
    //for (e = 0; d < h - 3; d++) if (16 > g[d]) $c[e++] = g[d]; else for (c = 0; c < g[d] - 16; c++) $c[e++] = g[d - 1];
    for (e = 0; d < h - 3; d++) {
        if (16 > g[d]) {
            StageOpenData[e++] = g[d];
        } else {
            for (c = 0; c < g[d] - 16; c++) {
                StageOpenData[e++] = g[d - 1];
            }
        }
    }
    //for (e = 0; e < Zc; e++) $c[e] & ad && ($c[e] |= STAGE_UNLOCKED, 0 < MAP_DATA[e][3] && ($c[MAP_DATA[e][3]] |= STAGE_UNLOCKED), 0 < MAP_DATA[e][4] && ($c[MAP_DATA[e][4]] |= STAGE_UNLOCKED));
    for (e = 0; e < StageCount; e++) {
        if (StageOpenData[e] & STAGE_BEATEN) {
            StageOpenData[e] |= STAGE_UNLOCKED;
            if (0 < MAP_DATA[e][3]) {
                StageOpenData[MAP_DATA[e][3]] |= STAGE_UNLOCKED;
            }
            if (0 < MAP_DATA[e][4]) {
                StageOpenData[MAP_DATA[e][4]] |= STAGE_UNLOCKED;
            }
        }
    }
    return 0
}

//WINDOW.fff = vsUploadCode;

/*
vsの勝敗とか含むコード作る
*/
function vsUploadCode(a) {
    var b;
    var c;
    var d = new Int32Array(16);
    b = 0;
    d[b++] = srFloor(srRandom(64));
    d[b++] = srFloor(srRandom(64));
    d[b++] = srFloor(srRandom(64));
    d[b++] = srFloor(srRandom(64));
    d[b++] = PartyRank[0];
    d[b++] = PartyRank[1];
    d[b++] = a;
    d[b++] = UnixHour >> 18 & 63;
    d[b++] = UnixHour >> 12 & 63;
    d[b++] = UnixHour >> 6 & 63;
    d[b++] = UnixHour & 63;
    var e = 0;
    for (a = 0; a < b; a++) {
        e += d[a] * ((a & 15) + 1);
    }
    d[b++] = e >> 8 & 47;
    d[b++] = e >> 4 & 31;
    d[b++] = e >> 0 & 15;
    c = "" + CHAR_LIST[d[0]];
    c += CHAR_LIST[d[1]];
    e = d[1];
    for (a = 2; a < b; a++) {
        c += CHAR_LIST[d[a] + e & 63];
        e += d[a] + a + d[0];
    }
    return c
}

var AntiCheatTotal = 0;
var AntiCheatSeed = 0;
var AntiCheatItemData = [];
var AntiCheatStageData = 0;
var AntiCheatEnemyData = 0;
var AntiCheatShopData = 0;
//WINDOW.fff = antiCheatDataSet;

/*
アイテムデータとかの改ざん防止用のやつをセット
*/
function antiCheatDataSet() {
    var a, b, c;
    AntiCheatItemData = new Int32Array(ITEM_DATA.length);
    for (a = 0; a < ITEM_DATA.length; a++) {
        for (b = AntiCheatItemData[a] = 0; b < ITEM_DATA[a].length; b++) {
            if ("number" == typeof ITEM_DATA[a][b]) {
                AntiCheatItemData[a] += ITEM_DATA[a][b] & 255;
            }
        }
    }
    for (a = AntiCheatStageData = 0; a < STAGE_DATA.length; a++) {
        for (b = 0; b < STAGE_DATA[a].length; b++) {
            for (c = 0; c < STAGE_DATA[a][b].length; c++) {
                AntiCheatStageData += STAGE_DATA[a][b][c];
            }
        }
    }
    for (a = AntiCheatEnemyData = 0; a < ENEMY_DATA.length; a++) {
        for (b = 0; b < ENEMY_DATA[a].length; b++) {
            AntiCheatEnemyData += ENEMY_DATA[a][b] & 65535;
        }
    }
    for (c = AntiCheatShopData = 0; c < SHOP_DATA.length; c++) {
        for (a = 0; a < SHOP_DATA[c].length; a++) {
            for (b = 0; b < SHOP_DATA[c][a].length; b++) {
                AntiCheatShopData += SHOP_DATA[c][a][b] * b & 65535
            }
        }
    }
}

/*
プレイデータの不正防止用チェック
*/
function antiCheatCheck() {
    var a;
    var b;
    var c;
    var d;
    if (0 > PartyLv[0] || 99 < PartyLv[0]) {
        game_cheated++;//GameCanvas = null;
        if (game_cheated > 0&&game_cheated<9999) {
            console.log(1);
        }
    }
    if (0 > PartyLv[1] || 99 < PartyLv[1]) {
        game_cheated++;//GameCanvas = null;
        if (game_cheated > 0&&game_cheated<9999) {
            console.log(2);
        }
    }
    if (0 > PartyExp || 9999999 < PartyExp) {
        game_cheated++;//GameCanvas = null;
        if (game_cheated > 0&&game_cheated<9999) {
            console.log(3);
        }
    }
    if (0 > PartyGold || 9999999 < PartyGold) {
        game_cheated++;//GameCanvas = null;
        if (game_cheated > 0&&game_cheated<9999) {
            console.log(4);
        }
    }
    for (a = 0; 8 > a; a++) {
        if (0 > PlayerSp[a] || 196 < PlayerSp[a]) {
            game_cheated++;//GameCanvas = null;
            if (game_cheated > 0&&game_cheated<9999) {
                console.log(5);
            }
        }
        if (0 > PlayerSpLp[a] || 196 < PlayerSpLp[a]) {
            game_cheated++;//GameCanvas = null;
            if (game_cheated > 0&&game_cheated<9999) {
                console.log(6);
            }
        }
        if (0 > PlayerSpStr[a] || 196 < PlayerSpStr[a]) {
            game_cheated++;//GameCanvas = null;
            if (game_cheated > 0&&game_cheated<9999) {
                console.log(7);
            }
        }
        if (0 > PlayerSpDex[a] || 196 < PlayerSpDex[a]) {
            game_cheated++;//GameCanvas = null;
            if (game_cheated > 0&&game_cheated<9999) {
                console.log(8);
            }
        }
        if (0 > PlayerSpMag[a] || 196 < PlayerSpMag[a]) {
            game_cheated++;//GameCanvas = null;
            if (game_cheated > 0&&game_cheated<9999) {
                console.log(9);
            }
        }
    }
    for (a = 0; 8 > a; a++) {
        if (0 != InventoryItem[4 + a] && getItemData(InventoryItem[4 + a], 5) != PlayerClass[a]) {
            game_cheated++;//GameCanvas = null;
            if (game_cheated > 0&&game_cheated<9999) {
                console.log(10);
            }
        }
    }
    for (a = 0; 8 > a; a++) {
        b = getItemData(InventoryItem[4 + a], 5);
        c = getItemData(InventoryItem[4 + a], 34);
        d = getItemData(InventoryItem[4 + a], 12);
        if (0 != InventoryCompo1[4 + a]) {
            if (9 != getItemData(InventoryCompo1[4 + a], 5)) {
                game_cheated++;//GameCanvas = null;
                if (game_cheated > 0&&game_cheated<9999) {
                    console.log(11);
                }
            }
            if (getItemData(InventoryCompo1[4 + a], 7) == getItemData(InventoryCompo2[4 + a], 7)) {
                game_cheated++;//GameCanvas = null;
                if (game_cheated > 0&&game_cheated<9999) {
                    console.log(12);
                }
            }
            var e = getItemData(InventoryCompo1[4 + a], 7);
            if (0 == compoRestrictCheck(e, b, c, d)) {
                game_cheated++;//GameCanvas = null;
                if (game_cheated > 0&&game_cheated<9999) {
                    console.log(13);
                }
            }
        }
        //0 != InventoryCompo2[4 + a] && 59 != InventoryCompo2[4 + a] && (9 != getItemData(InventoryCompo2[4 + a], 5) && (game_cheated++;//GameCanvas = null;), e = getItemData(InventoryCompo2[4 + a], 7), 0 == compoRestrictCheck(e, b, c, d) && (game_cheated++;//GameCanvas = null;))
        if (0 != InventoryCompo2[4 + a] && 59 != InventoryCompo2[4 + a]) {
            if (9 != getItemData(InventoryCompo2[4 + a], 5)) {
                game_cheated++;//GameCanvas = null;
                if (game_cheated > 0&&game_cheated<9999) {
                    console.log(14);
                }
            }
            e = getItemData(InventoryCompo2[4 + a], 7);
            if (0 == compoRestrictCheck(e, b, c, d)) {
                game_cheated++;//GameCanvas = null;
                if (game_cheated > 0&&game_cheated<9999) {
                    console.log(15);
                }
            }
        }
    }
    if (!GameMode || 2 == GameMode) {
        //for (a = c = 0; a < Zc; a++) if ($c[a] & STAGE_UNLOCKED) for (d = STAGE_INDEX_DATA[a + 1] - STAGE_INDEX_DATA[a], b = 0; b < d; b++) c < ENEMY_DATA[STAGE_INDEX_DATA[a] + b][ENEMY_LEVEL] && (c = ENEMY_DATA[STAGE_INDEX_DATA[a] + b][ENEMY_LEVEL]), b += ENEMY_DATA[STAGE_INDEX_DATA[a] + b][ENEMY_SECOND_ATTACK];
        for (a = c = 0; a < StageCount; a++) {
            if (StageOpenData[a] & STAGE_UNLOCKED) {
                for (d = STAGE_INDEX_DATA[a + 1] - STAGE_INDEX_DATA[a], b = 0; b < d; b++) {
                    if (c < ENEMY_DATA[STAGE_INDEX_DATA[a] + b][ENEMY_LEVEL]) {
                        c = ENEMY_DATA[STAGE_INDEX_DATA[a] + b][ENEMY_LEVEL];
                    }
                    b += ENEMY_DATA[STAGE_INDEX_DATA[a] + b][ENEMY_SECOND_ATTACK];
                }
            }
        }
        if (c + 10 + 2 < PartyLv[0]) {
            game_cheated++;//GameCanvas = null;
            if (game_cheated > 0&&game_cheated<9999) {
                console.log(16);
            }
        }
    }
    if (!GameMode || 2 == GameMode) {
        b = 4753E3;
        a = 9999999;
        if (98 > PartyLv[0]) {
            b = 0;
            for (a = 1; a < PartyLv[0]; a++) {
                b += 1E3 * a;
            }
            a = b + 1E3 * a
        }
        if (PartyExp < b || a < PartyExp) {
            game_cheated++;//GameCanvas = null;
            if (game_cheated > 0&&game_cheated<9999) {
                console.log(17);
            }
        }
    }
    for (a = d = 0; 8 > a; a++) {
        d += PlayerSp[a];
    }
    for (a = 0; 8 > a; a++) {
        d += PlayerSpLp[a];
    }
    for (a = 0; 8 > a; a++) {
        d += PlayerSpStr[a];
    }
    for (a = 0; 8 > a; a++) {
        d += PlayerSpDex[a];
    }
    for (a = 0; 8 > a; a++) {
        d += PlayerSpMag[a];
    }
    if (d != 8 * (PartyLv[0] - 1) + 8 * (PartyLv[1] - 1)) {
        game_cheated++;//GameCanvas = null;
        if (game_cheated > 0&&game_cheated<9999) {
            console.log(18);
        }
    }
    d = AntiCheatSeed;
    d += (PartyExp | 1) * (d & 15 | 1);
    d += (PartyGold | 1) * (d & 15 | 1);
    for (a = 0; 2 > a; a++) {
        d += (PartyLv[a] | 1) * (d & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        d += (PlayerSp[a] | 1) * (d & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        d += (PlayerSpLp[a] | 1) * (d & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        d += (PlayerSpStr[a] | 1) * (d & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        d += (PlayerSpDex[a] | 1) * (d & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        d += (PlayerSpMag[a] | 1) * (d & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        d += (PlayerClass[a] | 1) * (d & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        d += (PlayerCurrentLp[a] | 1) * (d & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        d += (PlayerMp[a] | 1) * (d & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        d += (PlayerMaxLp[a] | 1) * (d & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        d += (PlayerStr[a] | 1) * (d & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        d += (PlayerDex[a] | 1) * (d & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        d += (PlayerMag[a] | 1) * (d & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        d += (PlayerMinAt[a] | 1) * (d & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        d += (PlayerMaxAt[a] | 1) * (d & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        d += (PlayerMinAgi[a] | 1) * (d & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        d += (PlayerMaxAgi[a] | 1) * (d & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        d += (PlayerAttackRange[a] | 1) * (d & 15 | 1);
    }
    for (a = 0; 41 > a; a++) {
        d += (InventoryItem[a] | 1) * (d & 15 | 1);
    }
    for (a = 0; 41 > a; a++) {
        d += (InventoryCompo1[a] | 1) * (d & 15 | 1);
    }
    for (a = 0; 41 > a; a++) {
        d += (InventoryCompo2[a] | 1) * (d & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        d += (PlayerStrAura[a] | 1) * (d & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        d += (PlayerDexAura[a] | 1) * (d & 15 | 1);
    }
    for (a = 0; a < StageCount; a++) {
        d += (StageOpenData[a] | 1) * (d & 15 | 1);
    }
    d += (GameMode | 1) * (d & 15 | 1);
    d += (PartyFp[0] | 1) * (d & 15 | 1);
    d += (PartyFp[1] | 1) * (d & 15 | 1);
    d += (PartyRank[0] | 1) * (d & 15 | 1);
    d += (PartyRank[1] | 1) * (d & 15 | 1);
    if (d != (AntiCheatTotal ^ 16777215)) {
        game_cheated++;//GameCanvas = null;
        if (game_cheated > 0&&game_cheated<9999) {
            console.log(19);
        }
    }
    if (1 > srRandom(100)) {
        for (a = 0; a < ITEM_DATA.length; a++) {
            for (b = d = 0; b < ITEM_DATA[a].length; b++) {
                if ("number" == typeof ITEM_DATA[a][b]) {
                    d += ITEM_DATA[a][b] & 255;
                }
            }
            if (d != AntiCheatItemData[a]) {
                game_cheated++;//GameCanvas = null;
                if (game_cheated > 0&&game_cheated<9999) {
                    console.log(20);
                }
            }
        }
    }
    if (1 > srRandom(100)) {
        for (a = d = 0; a < STAGE_DATA.length; a++) {
            for (b = 0; b < STAGE_DATA[a].length; b++) {
                for (c = 0; c < STAGE_DATA[a][b].length; c++) {
                    d += STAGE_DATA[a][b][c];
                }
            }
        }
        if (d != AntiCheatStageData) {
            game_cheated++;//GameCanvas = null;
            if (game_cheated > 0&&game_cheated<9999) {
                console.log(21);
            }
        }
    }
    if (1 > srRandom(100)) {
        for (a = d = 0; a < ENEMY_DATA.length; a++) {
            for (b = 0; b < ENEMY_DATA[a].length; b++) {
                d += ENEMY_DATA[a][b] & 65535;
            }
        }
        if (d != AntiCheatEnemyData) {
            game_cheated++;//GameCanvas = null;
            if (game_cheated > 0&&game_cheated<9999) {
                console.log(22);
            }
        }
    }
    if (1 > srRandom(100)) {
        for (c = d = 0; c < SHOP_DATA.length; c++) {
            for (a = 0; a < SHOP_DATA[c].length; a++) {
                for (b = 0; b < SHOP_DATA[c][a].length; b++) {
                    d += SHOP_DATA[c][a][b] * b & 65535;
                }
            }
        }
        if (d != AntiCheatShopData) {
            game_cheated++;//GameCanvas = null;
            if (game_cheated > 0&&game_cheated<9999) {
                console.log(23);
            }
        }
    }
    if (game_cheated > 0&&game_cheated<9999) {
        game_cheated=9999;
        console.log("cheated");
    }
}

/*
プレイデータの不正防止用セット
*/
function antiCheatSet() {
    var a, b = srFloor(srRandom(1024));
    AntiCheatSeed = b;
    b += (PartyExp | 1) * (b & 15 | 1);
    b += (PartyGold | 1) * (b & 15 | 1);
    for (a = 0; 2 > a; a++) {
        b += (PartyLv[a] | 1) * (b & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        b += (PlayerSp[a] | 1) * (b & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        b += (PlayerSpLp[a] | 1) * (b & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        b += (PlayerSpStr[a] | 1) * (b & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        b += (PlayerSpDex[a] | 1) * (b & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        b += (PlayerSpMag[a] | 1) * (b & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        b += (PlayerClass[a] | 1) * (b & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        b += (PlayerCurrentLp[a] | 1) * (b & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        b += (PlayerMp[a] | 1) * (b & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        b += (PlayerMaxLp[a] | 1) * (b & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        b += (PlayerStr[a] | 1) * (b & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        b += (PlayerDex[a] | 1) * (b & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        b += (PlayerMag[a] | 1) * (b & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        b += (PlayerMinAt[a] | 1) * (b & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        b += (PlayerMaxAt[a] | 1) * (b & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        b += (PlayerMinAgi[a] | 1) * (b & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        b += (PlayerMaxAgi[a] | 1) * (b & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        b += (PlayerAttackRange[a] | 1) * (b & 15 | 1);
    }
    for (a = 0; 41 > a; a++) {
        b += (InventoryItem[a] | 1) * (b & 15 | 1);
    }
    for (a = 0; 41 > a; a++) {
        b += (InventoryCompo1[a] | 1) * (b & 15 | 1);
    }
    for (a = 0; 41 > a; a++) {
        b += (InventoryCompo2[a] | 1) * (b & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        b += (PlayerStrAura[a] | 1) * (b & 15 | 1);
    }
    for (a = 0; 8 > a; a++) {
        b += (PlayerDexAura[a] | 1) * (b & 15 | 1);
    }
    for (a = 0; a < StageCount; a++) {
        b += (StageOpenData[a] | 1) * (b & 15 | 1);
    }
    b += (GameMode | 1) * (b & 15 | 1);
    b += (PartyFp[0] | 1) * (b & 15 | 1);
    b += (PartyFp[1] | 1) * (b & 15 | 1);
    b += (PartyRank[0] | 1) * (b & 15 | 1);
    b += (PartyRank[1] | 1) * (b & 15 | 1);
    AntiCheatTotal = b ^ 16777215
}

var StartUpStep = 0;

/*
ゲームのスタート
*/
function startGame(a, b, c, d, e, g, h, q, m, l, A, z, Z, B) {
    if (!StartUpStep) {
        if (null != a) {
            UserCode1 = a;
        } else {
            UserCode1 = "";
        }
        if (null != b) {
            UserCode2 = b;
        } else {
            UserCode2 = "";
        }
        if ("0" == c) {
            Language = !0;
        } else {
            Language = !1;
        }
        if (null != d) {
            CookieSaveData = d;
        } else {
            CookieSaveData = "";
        }
        if (null != e) {
            GameMode = ~~e;
        } else {
            GameMode = 0;
        }
        if (null != g) {
            UserPartyId = g;
        } else {
            UserPartyId = "";
        }
        if (null != h) {
            OpponentPartyId = h;
        } else {
            OpponentPartyId = "";
        }
        if (null != q) {
            OpponentSaveData = q;
        } else {
            OpponentSaveData = "";
        }
        if (null != m) {
            UploadError = ~~m;
        } else {
            UploadError = 0;
        }
        if (null != l) {
            UnixHour = ~~l;
        } else {
            UnixHour = 0;
        }
        if (null != A) {
            UserName = A;
        } else {
            UserName = "";
        }
        if (null != z) {
            UserPartyName = z;
        } else {
            UserPartyName = "";
        }
        if (null != Z) {
            OpponentName = Z;
        } else {
            OpponentName = "";
        }
        if (null != B) {
            OpponentPartyName = B;
        } else {
            OpponentPartyName = "";
        }
        for (a = 0; 8 > a && a < UserCode2.length; a++) {
            for (b = UserCode2.charAt(a), c = 0; c < CHAR_LIST.length; c++) {
                if (CHAR_LIST[c] == b) {
                    UserCode2Array[a] = c;
                    break
                }
            }
        }
        consoleLog(CHAR_COPYRIGHT2);
        CV.width = 512;
        CV.height = 384;
        for (a = 0; 513 > a; a++) {
            AngleArray[a] = new Float32Array(2);
        }
        for (a = 0; 512 > a; a++) {
            b = 360 * a / 512 * PI / 180;
            //角度からx,yを求める
            AngleArray[a][0] = Math.cos(b);
            AngleArray[a][1] = Math.sin(b);
        }
        AngleArray[a][0] = AngleArray[0][0];
        AngleArray[a][1] = AngleArray[0][1];
        for (a = 0; 256 > a; a++) {
            IsKeyPressed[a] = !1;
            IsKey2[a] = !1;
            IsKeyHeld[a] = !1;
            IsKey4[a] = 0;
            IsKey5[a] = 0;
        }
        for (a = 0; 10 > a; a++) {
            IsKey4[48 + a] = 48 + a;
        }
        for (a = 0; 9 > a; a++) {
            IsKey5[49 + a] = 33 + a;
        }
        for (a = 0; 4 > a; a++) {
            IsKey4[37 + a] = 37 + a;
        }
        for (a = 0; 4 > a; a++) {
            IsKey5[37 + a] = 37 + a;
        }
        IsKey4[13] = IsKey5[13] = 13;
        IsKey4[16] = IsKey5[16] = 16;
        IsKey4[17] = IsKey5[17] = 17;
        IsKey4[18] = IsKey5[18] = 18;
        IsKey4[32] = IsKey5[32] = 32;
        IsKey4[186] = 58;
        IsKey5[186] = 42;
        IsKey4[187] = 59;
        IsKey5[187] = 43;
        IsKey4[188] = 44;
        IsKey5[188] = 60;
        IsKey4[189] = 45;
        IsKey5[189] = 61;
        IsKey4[190] = 46;
        IsKey5[190] = 62;
        IsKey4[191] = 47;
        IsKey5[191] = 63;
        IsKey4[192] = 64;
        IsKey5[192] = 96;
        IsKey4[219] = 91;
        IsKey5[219] = 123;
        IsKey4[220] = 92;
        IsKey5[220] = 124;
        IsKey4[221] = 93;
        IsKey5[221] = 125;
        IsKey4[222] = 94;
        IsKey5[222] = 126;
        IsKey4[226] = 92;
        IsKey5[226] = 95;
        IsKey4[58] = 58;
        IsKey5[58] = 42;
        IsKey4[59] = 59;
        IsKey5[59] = 43;
        IsKey4[173] = 45;
        IsKey5[173] = 61;
        IsKey4[64] = 64;
        IsKey5[64] = 96;
        IsKey4[160] = 94;
        IsKey5[160] = 126;
        for (a = 0; 1024 > a; a++) {
            //0以上1未満の均等な配列
            RandomArray[a] = a / 1024;
        }
        for (a = 0; 1024 > a; a++) {
            b = srFloor(1024 * Math.random());
            //ランダムな要素と交換
            c = RandomArray[a];
            RandomArray[a] = RandomArray[b];
            RandomArray[b] = c;
        }
        RandomVar1 = srFloor(1024 * Math.random()) & 1023;
        RandomVar2 = srFloor(512 * Math.random()) | 1;
        for (a = 0; 196608 > a; a++) {
            GameCanvas[a] = 0;
        }
        LARGE_TEXT.txSet("font.gif", 8, 12);
        SMALL_TEXT.txSet("font_s.gif", 5, 7);
        for (a = 0; 13 > a; a++) {
            TerrainTextureImageArray[a] = new SrImage;
            TerrainTextureImageArray[a].imSet("gt" + a + ".gif");
        }
        PlayerImage.imSet("pl.gif");
        SmallItemImage.imSet("icon.gif");
        LargeItemImage.imSet("item.gif");
        EnemyHeadImage.imSet("en.gif");
        SignImage.imSet("next.gif");
        ProjectileImage.imSet("mag.gif");
        TitleImage.imSet("title.gif");
        StageEffectImage.imSet("ef.gif");
        HouseImage.imSet("town.gif");
        WaterImage.imSet("water.gif");
        BloodImage.imSet("water2.gif");
        ForgetTreeImage.imSet("tree.gif");
        MapElevationImage.imSet("map.gif");
        MapTileImage.imSet("mt.gif");
        MapImage.imSet("map2.gif");
        MapSymbolImage.imSet("mt2.gif");
        if (checkHost()) {
            StartUpStep--
        } else {
            StartUpStep++
        }
    }
    if (1 == StartUpStep) {
        //tx.f
        imageToArray(LARGE_TEXT.tx_image);
        imageToArray(SMALL_TEXT.tx_image);
        for (a = 0; 13 > a; a++) {
            imageToArray(TerrainTextureImageArray[a]);
        }
        imageToArray(PlayerImage);
        imageToArray(SmallItemImage);
        imageToArray(LargeItemImage);
        imageToArray(EnemyHeadImage);
        imageToArray(SignImage);
        imageToArray(ProjectileImage);
        imageToArray(TitleImage);
        imageToArray(StageEffectImage);
        imageToArray(HouseImage);
        imageToArray(WaterImage);
        imageToArray(BloodImage);
        imageToArray(ForgetTreeImage);
        imageToArray(MapElevationImage);
        imageToArray(MapTileImage);
        imageToArray(MapImage);
        imageToArray(MapSymbolImage);
        if (ImageCounter) {
            //画像が読み込めてない
            TIMEOUT(startGame, getNextTime())
        } else {
            StartUpStep++
        }
    }
    if (2 == StartUpStep) {
        SR_PLAYER.plReset();
        SR_INDICATOR.inReset();
        SR_PROJECTILE.pjReset();
        SR_DROP.dpReset();
        SR_WORLD_MAP.mpSet();
        if (1 == GameMode) {
            loadSaveCode(OpponentSaveData, 1)
        }
        loadSaveCode(CookieSaveData, 0);
        SaveCode = generateSaveCode(0);
        antiCheatDataSet();
        antiCheatSet();
        createNewPixelArray(StageEffectCanvasImage, 512, 384);
        //メインループに飛ぶ
        mainSequence()
    }
}

//WINDOW.fff = playSequence;

/*
ゲームの分岐
*/
function playSequence() {
    if (0 < HostChecked) {
        HostChecked++;
    } else {
        setSaveCode("");
        saveGame("");//いらなくね
        for (var a = 196607; 0 <= a; a--) {
            GameCanvas[a] = 0;
        }
        if (9 >= SequenceStep) {
            menuAndMap();
        } else if (49 >= SequenceStep) {
            pveScreen();
        } else if (59 >= SequenceStep) {
            townScreen();
        } else if (60 <= SequenceStep) {
            pvpScreen();
        }
        if (0 < SaveMessageTime) {
            SaveMessageTime--;
            showTextSolidCenter(LARGE_TEXT, 480, 247, "save OK", 16711680, 6684672);
        }
        if (0 < SaveCodeErrorMessageTime) {
            SaveCodeErrorMessageTime--;
            if (2 == SaveCodeError) {
                showTextSolidTopLeft(LARGE_TEXT, 10, 10, "VERSION ERROR", 16711680, 6684672);
            } else if (3 == SaveCodeError) {
                showTextSolidTopLeft(LARGE_TEXT, 10, 10, "DATA ERROR", 16711680, 6684672);
            } else if (4 == SaveCodeError) {
                showTextSolidTopLeft(LARGE_TEXT, 10, 10, "USER ERROR", 16711680, 6684672);
            }
        }
        antiCheatCheck()
    }
}

//WINDOW.fff = menuAndMap;

/*
メニューとマップ
*/
function menuAndMap() {
    var a;
    if (!SequenceStep) {
        //if (SR_PLAYER.o(), SR_ENEMY.o(0), SequenceStep++, 1 == GameMode)
        SR_PLAYER.plReset();
        SR_ENEMY.enReset(0);
        SequenceStep++;
        if (1 == GameMode) {
            SequenceStep = 60;
        } else if (2 == GameMode || 3 == GameMode) {
            SequenceStep = 70
        }
    } else if (1 == SequenceStep) {
        CurrentArea = 0;
        if (SR_TERRAIN.trSet(0)) {
            SR_PLAYER.plSet(0, 20, SR_TERRAIN.tr_low_surface[20]);
            SR_PLAYER.plSet(1, 28, SR_TERRAIN.tr_low_surface[28]);
            SR_PLAYER.plSet(2, 36, SR_TERRAIN.tr_low_surface[36]);
            SR_PLAYER.plSet(3, 44, SR_TERRAIN.tr_low_surface[44]);
            setPlayerStatus();
            SR_ENEMY.enReset(1);
            SequenceStep++;
        }
    } else if (2 == SequenceStep) {
        SR_PLAYER.plMain();
        setPlayerStatus();
        TrDraw();
        SR_PLAYER.plDraw();
        if (Language) {
            drawFromImageCentered(TitleImage, 256, 100, 365, 121, 0, 0, 365, 121, 16777215);
        } else {
            drawFromImageCentered(TitleImage, 256, 100, 365, 121, 0, 121, 365, 121, 16777215);
        }
        var b = 100;
        for (a = 4; 40 > a; a++) {
            if (48 == getItemData(InventoryItem[a], 7)) {
                b += getItemData(InventoryItem[a], 8)
            }
            if (48 == getItemData(InventoryCompo1[a], 7)) {
                b += getItemData(InventoryCompo1[a], 8)
            }
            if (48 == getItemData(InventoryCompo2[a], 7)) {
                b += getItemData(InventoryCompo2[a], 8)
            }
            if (49 == getItemData(InventoryItem[a], 7)) {
                b += 1
            }
            if (49 == getItemData(InventoryCompo1[a], 7)) {
                b += 1
            }
            if (49 == getItemData(InventoryCompo2[a], 7)) {
                b += 1;
            }
        }
        b = srClampA(b, 100, 300);
        //if (isMouseHoveredCenter(100 == b ? 256 : 316, 195, 100 == b ? 128 : 248, 24)) {
        if (100 == b) {
            showTextSolidCenter(LARGE_TEXT, 256, 195, "NEW GAME", 16777215, 10053171);
        } else {
            showTextSolidCenter(LARGE_TEXT, 256, 195, "               NEW GAME with the Crown", 16777215, 10053171);
        }
        if (100 == b && isMouseHoveredCenter(256, 195, 128, 24) || 100 != b && isMouseHoveredCenter(316, 195, 248, 24)) {
            if (Clicked) {
                antiCheatCheck();
                SelectedPlayer = SelectedPanel = 3;
                for (a = 0; 4 > a; a++) {
                    PlayerClassBackup[a] = PlayerClass[a];
                    PlayerItemBackup[a] = InventoryItem[4 + a];
                    PlayerCompo1Backup[a] = InventoryCompo1[4 + a];
                    PlayerCompo2Backup[a] = InventoryCompo2[4 + a];
                    PlayerClass[a] = 0;
                    InventoryItem[4 + a] = 0;
                    InventoryCompo1[4 + a] = 0;
                    InventoryCompo2[4 + a] = 0;
                }
                SequenceStep++;
                antiCheatSet();
                setPlayerStatus()
            }
            //100 == b ? drawLine(192, 203, 320, 203, 11141120) : drawLine(192, 203, 440, 203, 11141120)
            if (100 == b) {
                drawLine(192, 203, 320, 203, 11141120)
            } else {
                drawLine(192, 203, 440, 203, 11141120)
            }
        }
        if (0 != PlayerClass[0] && 0 != PlayerClass[1] && 0 != PlayerClass[2] && 0 != PlayerClass[3]) {
            showTextSolidCenter(LARGE_TEXT, 256, 235, "LOAD GAME", 16777215, 10053171);
            if (isMouseHoveredCenter(256, 235, 128, 24)) {
                if (Clicked) {
                    SequenceStep = 5
                }
                drawLine(192, 243, 320, 243, 11141120);
            }
        }
        showTextSolidCenter(LARGE_TEXT, 256, 275, "VS MODE", 16777215, 5066137);
        if (isMouseHoveredCenter(256, 275, 128, 24)) {
            if (Clicked) {
                //vsモードにできないようにする
                /*
                if (Language) {
                    top.location.pathname = "/javagame/ranger/versus.html"
                } else {
                    top.location.pathname = "/en/javagame/ranger/versus.html"
                }
                */
            }
            drawLine(192, 283, 320, 283, 11141120);
        }
        drawMenuCopyRight()
    } else if (3 == SequenceStep) {
        SR_PLAYER.plMain();
        TrDraw();
        SR_PLAYER.plDraw();
        showTextCenter(LARGE_TEXT, 256, 50, "Player's Class Selection", 204, 148, 73, 255, 100, 0, 0, 255, 16, 24);
        for (a = 0; 4 > a; a++) {
            if (isMouseHoveredCenter(160 + 64 * a, 140, 24, 24)) {
                if (Clicked) {
                    SelectedPlayer = SelectedPanel = a;
                }
                filledRectCentered(160 + 64 * a, 140, 24, 24, 8388608);
            }
            frameRectCentered(160 + 64 * a, 140, 25, 25, 16777215);
            drawFromImageCentered(PlayerImage, 160 + 64 * a, 140, 24, 24, 24 * PlayerClass[a], 0, 24, 24, 16777215);
        }
        frameRectCentered(160 + 64 * SelectedPanel, 140, 25, 25, 16711680);
        antiCheatCheck();
        for (a = 0; 8 > a; a++) {
            var b = 46 + 60 * a;
            var c = CLASS_NAME[a + 1];
            var d = LARGE_TEXT;
            //tx.b
            d.tx_spacing = -1;
            showTextSolidCenter(d, b, 220, c, 13407305, 6553600);
            d.tx_spacing = 0;
            if (isMouseHoveredCenter(46 + 60 * a, 240, 24, 24)) {
                if (Clicked) {
                    PlayerClass[SelectedPanel] = a + 1;
                    InventoryItem[4 + SelectedPanel] = [3, 4, 5, 6, 58, 76, 188, 289][a];
                    InventoryCompo1[4 + SelectedPanel] = 0;
                    InventoryCompo2[4 + SelectedPanel] = 0;
                }
                filledRectCentered(46 + 60 * a, 240, 24, 24, 8388608);
            }
            frameRectCentered(46 + 60 * a, 240, 25, 25, 16777215);
            drawFromImageCentered(PlayerImage, 46 + 60 * a, 240, 24, 24, 24 * (a + 1), 0, 24, 24, 16777215)
        }
        if (0 != PlayerClass[0] && 0 != PlayerClass[1] && 0 != PlayerClass[2] && 0 != PlayerClass[3]) {
            showTextSolidCenter(LARGE_TEXT, 464, 300, "START", 16777215, 10053171);
            if (isMouseHoveredCenter(464, 300, 128, 24)) {
                if (Clicked) {
                    SequenceStep++
                }
                drawLine(416, 308, 512, 308, 11141120);
            }
        }
        showTextSolidCenter(LARGE_TEXT, 48, 300, "RETURN", 16777215, 10053171);
        if (isMouseHoveredCenter(48, 300, 128, 24)) {
            if (Clicked) {
                for (a = 0; 4 > a; a++) {
                    PlayerClass[a] = PlayerClassBackup[a];
                    InventoryItem[4 + a] = PlayerItemBackup[a];
                    InventoryCompo1[4 + a] = PlayerCompo1Backup[a];
                    InventoryCompo2[4 + a] = PlayerCompo2Backup[a];
                }
                SequenceStep = 2
            }
            drawLine(0, 308, 96, 308, 11141120)
        }
        antiCheatSet();
        drawMenuCopyRight()
    } else if (4 == SequenceStep) {
        antiCheatCheck();
        b = 100;
        c = 0;
        //このままだと手持ち武器内の王冠が反映されない
        for (a = 4; 40 > a; a++) {
            if (48 == getItemData(InventoryItem[a], 7)) {
                b += getItemData(InventoryItem[a], 8)
            }
            if (48 == getItemData(InventoryCompo1[a], 7)) {
                b += getItemData(InventoryCompo1[a], 8)
            }
            if (48 == getItemData(InventoryCompo2[a], 7)) {
                b += getItemData(InventoryCompo2[a], 8)
            }
            if (49 == getItemData(InventoryItem[a], 7)) {
                c = 1
            }
            if (49 == getItemData(InventoryCompo1[a], 7)) {
                c = 1
            }
            if (49 == getItemData(InventoryCompo2[a], 7)) {
                c = 1;
            }
        }
        //修正するにはこっちに変えるといいはず
        /*
        for (a = 0; 4 > a; a++) {
            if (48 == getItemData(PlayerItemBackup[4+a], 7)) {
                b += getItemData(PlayerItemBackup[4+a], 8)
            }
            if (48 == getItemData(PlayerCompo1Backup[4+a], 7)) {
                b += getItemData(PlayerCompo1Backup[4+a], 8)
            }
            if (48 == getItemData(PlayerCompo2Backup[4+a], 7)) {
                b += getItemData(PlayerCompo2Backup[4+a], 8)
            }
            if (49 == getItemData(PlayerItemBackup[4+a], 7)) {
                c = 1
            }
            if (49 == getItemData(PlayerCompo1Backup[4+a], 7)) {
                c = 1
            }
            if (49 == getItemData(PlayerCompo2Backup[4+a], 7)) {
                c = 1;
            }
        }
        for (a = 16; 40 > a; a++) {
            if (48 == getItemData(InventoryItem[a], 7)) {
                b += getItemData(InventoryItem[a], 8)
            }
            if (48 == getItemData(InventoryCompo1[a], 7)) {
                b += getItemData(InventoryCompo1[a], 8)
            }
            if (48 == getItemData(InventoryCompo2[a], 7)) {
                b += getItemData(InventoryCompo2[a], 8)
            }
            if (49 == getItemData(InventoryItem[a], 7)) {
                c = 1
            }
            if (49 == getItemData(InventoryCompo1[a], 7)) {
                c = 1
            }
            if (49 == getItemData(InventoryCompo2[a], 7)) {
                c = 1;
            }
        }
        */
        b = srClampA(b, 100, 300);
        CurrentStage = 0;
        PartyLv[0] = 1;
        PartyFp[0] = 1;
        for (a = PartyGold = PartyExp = PartyRank[0] = 0; 4 > a; a++) {
            PlayerSp[a] = 0;
            PlayerCurrentLp[a] = 50;
            PlayerMp[a] = 0;
            PlayerSpLp[a] = 0;
            PlayerSpStr[a] = 0;
            PlayerSpDex[a] = 0;
            PlayerSpMag[a] = 0;
            PlayerAutoMove[a] = 1;
        }
        PartyPlayerSymbol = PartyShowLpBar = PartyDamageEffect = PartyMoveIfDying = 0;
        PartyDragDeadBody = 1;
        for (a = 16; 41 > a; a++) {
            InventoryItem[a] = 0;
            InventoryCompo1[a] = 0;
            InventoryCompo2[a] = 0;
        }
        for (a = 0; a < StageCount; a++) {
            StageOpenData[a] = 0;
        }
        StageOpenData[0] = STAGE_BEATEN | STAGE_UNLOCKED;
        StageOpenData[1] = STAGE_UNLOCKED;
        for (a = 0; 4 > a; a++) {
            SR_PLAYER.pl_class[a] = 0;
        }
        if (300 <= b) {
            InventoryItem[16] = 560;
        } else if (250 <= b) {
            InventoryItem[16] = 559;
        } else if (200 <= b) {
            InventoryItem[16] = 558;
        } else if (150 <= b) {
            InventoryItem[16] = 557;
        }
        if (1 == c && 100 == b) {
            InventoryItem[16] = 561;
        }
        if (1 == c && 100 != b) {
            InventoryItem[17] = 561;
        }
        CurrentArea = SR_WORLD_MAP.mp_scroll_x = 0;
        SequenceStep = 6;
        antiCheatSet();
        drawMenuCopyRight()
    } else if (5 == SequenceStep) {
        CurrentArea = 0;
        SequenceStep = 6;
    } else if (6 == SequenceStep) {
        a = SR_WORLD_MAP;
        var e;
        var g;
        var d = new SrVec2;
        var h = new SrVec2;
        //20 > he && 256 > MouseY1 ? a.a = srClampA(a.a + 4, -720, 0) : 492 < he && 256 > MouseY1 && (a.a = srClampA(a.a - 4, -720, 0));
        if (20 > MouseX1 && 256 > MouseY1) {
            a.mp_scroll_x = srClampA(a.mp_scroll_x + 4, -720, 0);
        } else if (492 < MouseX1 && 256 > MouseY1) {
            a.mp_scroll_x = srClampA(a.mp_scroll_x - 4, -720, 0);
        }
        for (g = 0; 16 > g; g++) {
            for (e = 0; e < a.mp_width; e++) {
                if (-1 != a.mp_tile[g][e]) {
                    drawItem(MapTileImage, a.mp_scroll_x + 16 * e, 16 * g, 16, 16, a.mp_tile[g][e] % 5 * 16, 16 * srFloor(a.mp_tile[g][e] / 5), 16, 16);
                }
            }
        }
        for (b = 0; b < StageCount; b++) {
            if (StageOpenData[b] & STAGE_BEATEN) {
                for (e = 3; 4 >= e; e++) {
                    if (!(0 >= MAP_DATA[b][e]) && 32 != b && 70 != b && 88 != b) {
                        //for (d.x = 8 * MAP_DATA[b][0], d.y = 8 * MAP_DATA[b][1], h.x = 8 * (MAP_DATA[MAP_DATA[b][e]][0] - MAP_DATA[b][0]), h.y = 8 * (MAP_DATA[MAP_DATA[b][e]][1] - MAP_DATA[b][1]), g = normalize(h) / 8 - 1, le(h, 8), d.add(h), c = 0; c < g; c++)
                        d.x = 8 * MAP_DATA[b][0];
                        d.y = 8 * MAP_DATA[b][1];
                        h.x = 8 * (MAP_DATA[MAP_DATA[b][e]][0] - MAP_DATA[b][0]);
                        h.y = 8 * (MAP_DATA[MAP_DATA[b][e]][1] - MAP_DATA[b][1]);
                        g = normalize(h) / 8 - 1;
                        scaleVec2(h, 8);
                        d.vecAdd(h);
                        for (c = 0; c < g; c++) {
                            filledRectCentered(a.mp_scroll_x + d.x, d.y, 2, 2, 13421772);
                            d.vecAdd(h);
                        }
                    }
                }
            }
        }
        for (g = 0; 16 > g; g++) {
            for (e = 0; e < a.mp_width; e++) {
                if (-1 != a.mp_symbol[g][e]) {
                    drawItem(MapSymbolImage, a.mp_scroll_x + 16 * e + 8, 16 * g + 8, 16, 16, 16 * a.mp_symbol[g][e], 0, 16, 16);
                }
            }
        }
        drawFromImage(MapSymbolImage, a.mp_scroll_x + 384 - 8, 124, 16, 16, 16, 0, 16, 16, 8421631);
        drawFromImage(MapSymbolImage, a.mp_scroll_x + 504 - 8, 116, 16, 16, 48, 0, 16, 16, 16777215);
        drawFromImage(MapSymbolImage, a.mp_scroll_x + 552 - 8, 116, 16, 16, 64, 0, 16, 16, 16777215);
        drawFromImage(MapSymbolImage, a.mp_scroll_x + 592 - 8, 100, 16, 16, 32, 0, 16, 16, 16777215);
        drawFromImage(MapSymbolImage, a.mp_scroll_x + 672 - 8, 68, 16, 16, 32, 0, 16, 16, 16777215);
        drawFromImage(MapSymbolImage, a.mp_scroll_x + 808 - 8, 132, 16, 16, 16, 0, 16, 16, 13434879);
        drawFromImage(MapSymbolImage, a.mp_scroll_x + 904 - 8, 164, 16, 16, 112, 0, 16, 16, 13434879);
        drawFromImage(MapSymbolImage, a.mp_scroll_x + 1040 - 8, 172, 16, 16, 128, 0, 16, 16, 13434879);
        drawFromImage(MapSymbolImage, a.mp_scroll_x + 1088 - 8, 100, 16, 16, 32, 0, 16, 16, 16777215);
        drawFromImage(MapSymbolImage, a.mp_scroll_x + 1160 - 8, 84, 16, 16, 32, 0, 16, 16, 16777215);
        drawFromImage(MapSymbolImage, a.mp_scroll_x + 1112 - 8, 44, 32, 16, 144, 0, 32, 16, 16777215);
        for (b = 0; b < StageCount; b++) {
            if (0 != StageOpenData[b]) {
                e = 8 * MAP_DATA[b][0];
                g = 8 * MAP_DATA[b][1];
                //c = b && 20 != b && 47 != b && 77 != b ? 33 == b ? 0 : 71 == b ? 0 : StageOpenData[b] & ad ? 10027008 : 13421568 : 16777215, 0 == MAP_DATA[b][2] && filledRectCentered(a.a + e, g, 6, 6, c), c = 71 == b ? 3 : 24, isMouseHoveredCenter(a.a + e, g, c, c) && frameRectCentered(a.a + e, g, c, c, 13369344);
                if (!b || 20 == b || 47 == b || 77 == b) {
                    c = 16777215;
                } else if (33 == b || 71 == b) {
                    c = 0;
                } else if (StageOpenData[b] & STAGE_BEATEN) {
                    c = 10027008;
                } else {
                    c = 13421568;
                }
                if (0 == MAP_DATA[b][2]) {
                    filledRectCentered(a.mp_scroll_x + e, g, 6, 6, c)
                }

                if (71 == b) {
                    c = 3;
                } else {
                    c = 24;
                }
                if (isMouseHoveredCenter(a.mp_scroll_x + e, g, c, c)) {
                    frameRectCentered(a.mp_scroll_x + e, g, c, c, 13369344);
                }
            }
        }
        e = 8 * MAP_DATA[CurrentStage][0];
        g = 8 * MAP_DATA[CurrentStage][1];
        drawItem(PlayerImage, a.mp_scroll_x + e + 1 - 12, g - 14 - 11, 24, 22, 0, 0, 24, 22);
        for (b = 0; b < StageCount; b++) {
            //0 != StageOpenData[b] && (e = 8 * MAP_DATA[b][0], g = 8 * MAP_DATA[b][1], c = 71 == b ? 3 : 24, isMouseHoveredCenter(a.a + e, g, c, c)) && (!$d || b && 20 != b && 47 != b && 70 != b && 77 != b ? $d && b && (CurrentStage = b, CurrentArea = 0, SequenceStep = 10) : (CurrentStage = b, CurrentArea = 1, SequenceStep = 50), e = srClampA(he, 1 + 4 * STAGE_NAME[b].length, 510 - 4 * STAGE_NAME[b].length), g = srClampA(MouseY1 - 24, 8, 256), centeredText(LARGE_TEXT, e, g, STAGE_NAME[b], 16777215, 5263440));
            if (0 != StageOpenData[b]) {
                e = 8 * MAP_DATA[b][0];
                g = 8 * MAP_DATA[b][1];
                if (71 == b) {
                    c = 3
                } else {
                    c = 24
                }
                if (isMouseHoveredCenter(a.mp_scroll_x + e, g, c, c)) {
                    if (!Clicked || b && 20 != b && 47 != b && 70 != b && 77 != b) {
                        if (Clicked && b) {
                            CurrentStage = b;
                            CurrentArea = 0;
                            SequenceStep = 10;
                        }
                    } else {
                        CurrentStage = b;
                        CurrentArea = 1;
                        SequenceStep = 50;
                    }
                    e = srClampA(MouseX1, 1 + 4 * STAGE_NAME[b].length, 510 - 4 * STAGE_NAME[b].length);
                    g = srClampA(MouseY1 - 24, 8, 256);
                    showTextSolidCenter(LARGE_TEXT, e, g, STAGE_NAME[b], 16777215, 5263440);
                }
            }
        }
        b = LARGE_TEXT;
        //tx.b
        b.tx_spacing = 4;
        showTextSolidCenter(b, 256, 16, "WORLD MAP", -1, 13158600);
        b.tx_spacing = 0;
        if (0 > a.mp_scroll_x) {
            showTextSolidCenter(LARGE_TEXT, 12, 16, "<<", 13158600, 5263440);
        }
        if (-720 < a.mp_scroll_x) {
            showTextSolidCenter(LARGE_TEXT, 500, 16, ">>", 13158600, 5263440);
        }
        drawUi(2)
        //
        //showTextSolidTopLeft(LARGE_TEXT,100,100,SR_WORLD_MAP.mp_scroll_x.toString(),16777215,10000000)
        //

    }
}

//WINDOW.fff = pveScreen;

/*
ステージ画面
*/
function pveScreen() {
    var a, b, c, d;
    if (10 == SequenceStep) {
        if (SR_TERRAIN.trSet(CurrentStage)) {
            SR_PLAYER.plSet(0, 0, SR_TERRAIN.tr_low_surface[0]);
            SR_PLAYER.plSet(1, 1, SR_TERRAIN.tr_low_surface[1]);
            SR_PLAYER.plSet(2, 2, SR_TERRAIN.tr_low_surface[2]);
            SR_PLAYER.plSet(3, 3, SR_TERRAIN.tr_low_surface[3]);
            SR_ENEMY.enReset(1);
            var e = srFloor(srRandomRange(12, 28));
            var g = srFloor(srRandomRange(28, 44));
            var h = srFloor(srRandomRange(44, 60));
            EnemySpawnScale = 100;
            for (b = 4; 40 > b; b++) {
                if (48 == getItemData(InventoryItem[b], 7)) {
                    EnemySpawnScale += getItemData(InventoryItem[b], 8);
                }
                if (48 == getItemData(InventoryCompo1[b], 7)) {
                    EnemySpawnScale += getItemData(InventoryCompo1[b], 8);
                }
                if (48 == getItemData(InventoryCompo2[b], 7)) {
                    EnemySpawnScale += getItemData(InventoryCompo2[b], 8);
                }
            }
            EnemySpawnScale = srClampA(EnemySpawnScale, 100, 300);
            var q = srFloor((STAGE_DATA[CurrentStage][CurrentArea].length - 2) / 3);
            for (a = 0; a < q; a++) {
                var m = STAGE_DATA[CurrentStage][CurrentArea][3 * a + 2];
                var l = STAGE_DATA[CurrentStage][CurrentArea][3 * a + 3];
                var A = STAGE_DATA[CurrentStage][CurrentArea][3 * a + 4];
                A = srFloor(A * EnemySpawnScale / 100);
                for (b = 0; b < A; b++) {
                    if (m == TERRAIN_GROUND) {
                        c = srFloor(srRandomRange(12, 60));
                        d = fiftyFifty(SR_TERRAIN.tr_low_surface[c], SR_TERRAIN.tr_high_surface[c]);
                    } else if (m == TERRAIN_GROUND_LEFT) {
                        c = srFloor(srRandomRange(12, 28));
                        d = fiftyFifty(SR_TERRAIN.tr_low_surface[c], SR_TERRAIN.tr_high_surface[c]);
                    } else if (m == TERRAIN_GROUND_MIDDLE) {
                        c = srFloor(srRandomRange(28, 44));
                        d = fiftyFifty(SR_TERRAIN.tr_low_surface[c], SR_TERRAIN.tr_high_surface[c]);
                    } else if (m == TERRAIN_GROUND_RIGHT) {
                        c = srFloor(srRandomRange(44, 60));
                        d = fiftyFifty(SR_TERRAIN.tr_low_surface[c], SR_TERRAIN.tr_high_surface[c]);
                    } else if (m == TERRAIN_AIR_WATER) {
                        c = srFloor(srRandomRange(12, 60));
                        d = srFloor(srRandomRange(SR_TERRAIN.tr_cavern_top[c] + 2, SR_TERRAIN.tr_high_surface[c]));
                    } else if (m == TERRAIN_AIR) {
                        c = srFloor(srRandomRange(12, 60));
                        d = srFloor(srRandomRange(SR_TERRAIN.tr_cavern_top[c] + 2, SR_TERRAIN.tr_water_surface[c]));
                    } else if (m == TERRAIN_WATER && 0 < SR_TERRAIN.tr_water_can_spawn_location_count) {
                        d = srFloor(srRandom(SR_TERRAIN.tr_water_can_spawn_location_count));
                        c = SR_TERRAIN.tr_water_can_spawn_location[d] & 63;
                        d = srFloor(SR_TERRAIN.tr_water_can_spawn_location[d] / 64);
                    } else if (m == TERRAIN_GROUND_LEFT_CLUMP) {
                        c = e;
                        d = fiftyFifty(SR_TERRAIN.tr_low_surface[c], SR_TERRAIN.tr_high_surface[c]);
                    } else if (m == TERRAIN_GROUND_MIDDLE_CLUMP) {
                        c = g;
                        d = fiftyFifty(SR_TERRAIN.tr_low_surface[c], SR_TERRAIN.tr_high_surface[c]);
                    } else if (m == TERRAIN_GROUND_RIGHT_CLUMP) {
                        c = h;
                        d = fiftyFifty(SR_TERRAIN.tr_low_surface[c], SR_TERRAIN.tr_high_surface[c]);
                    } else if (m == TERRAIN_CEILING) {
                        c = srFloor(srRandomRange(12, 60));
                        d = SR_TERRAIN.tr_cavern_top[c];
                    } else if (m == TERRAIN_CEILING_LEFT) {
                        c = srFloor(srRandomRange(12, 28));
                        d = SR_TERRAIN.tr_cavern_top[c];
                    } else if (m == TERRAIN_CEILING_MIDDLE) {
                        c = srFloor(srRandomRange(28, 44));
                        d = SR_TERRAIN.tr_cavern_top[c];
                    } else if (m == TERRAIN_CEILING_RIGHT) {
                        c = srFloor(srRandomRange(44, 60));
                        d = SR_TERRAIN.tr_cavern_top[c];
                    } else {
                        continue;
                    }
                    SR_ENEMY.enAdd(c, d, l)
                }
            }
            SR_PROJECTILE.pj_last_index = 0;
            SR_INDICATOR.in_last_index = 0;
            SR_DROP.dp_last_index = 0;
            TextFadeTime = SignTouch = TargetEnemyIndex = TargetEnemyTime = TargetEnemyMaxLp = TargetEnemyCurrentLp = SR_DROP.dp_anti_cheat_value = 0;
            SequenceStep++
        }
    } else if (11 == SequenceStep) {
        //drawStage(0), drawUi(0), q = 30, a = "", CurrentArea ? CurrentArea + 1 == STAGE_DATA[CurrentStage].length && (q = 110, a = "BOSS AREA") : (q = 110, a = STAGE_NAME[CurrentStage]), screenTransition(255 - srFloor(255 * srMin(TextFadeTime, 30) / 30)), 110 == q && (b = 255, 30 > TextFadeTime ? b = srFloor(255 * TextFadeTime / 30) : 80 < TextFadeTime && (b = 255 - srFloor(255 * (TextFadeTime - 80) / 30)), LARGE_TEXT(LARGE_TEXT, 256, 128, a, 255, 255, 255, b, 64, 64, 64, b, 16, 24), c = -1024 + srFloor(512 * TextFadeTime / 30), drawLine(c, 112, c + 1024, 112, 8421504), c = 512 - srFloor(512 * TextFadeTime / 30), drawLine(c, 141, c + 1024, 141, 8421504)), TextFadeTime++, TextFadeTime == q && (TextFadeTime = 0, SequenceStep++);
        drawStage(0);
        drawUi(0);
        q = 30;
        a = "";
        if (CurrentArea) {
            if (CurrentArea + 1 == STAGE_DATA[CurrentStage].length) {
                q = 110;
                a = "BOSS AREA";
            }
        } else {
            q = 110;
            a = STAGE_NAME[CurrentStage];
        }
        screenTransition(255 - srFloor(255 * srMin(TextFadeTime, 30) / 30));
        if (110 == q) {
            b = 255;
            if (30 > TextFadeTime) {
                b = srFloor(255 * TextFadeTime / 30);
            } else if (80 < TextFadeTime) {
                b = 255 - srFloor(255 * (TextFadeTime - 80) / 30);
            }
            showTextCenter(LARGE_TEXT, 256, 128, a, 255, 255, 255, b, 64, 64, 64, b, 16, 24);
            c = -1024 + srFloor(512 * TextFadeTime / 30);
            drawLine(c, 112, c + 1024, 112, 8421504);
            c = 512 - srFloor(512 * TextFadeTime / 30);
            drawLine(c, 141, c + 1024, 141, 8421504)
        }
        TextFadeTime++;
        if (TextFadeTime == q) {
            TextFadeTime = 0;
            SequenceStep++;
        }
    } else if (12 == SequenceStep) {
        //drawStage(0), drawUi(0), 0 == PlayerCurrentLp[0] + PlayerCurrentLp[1] + PlayerCurrentLp[2] + PlayerCurrentLp[3] ? (TextFadeTime = 0, SequenceStep = 30) : SignTouch ? SequenceStep++ : isMouseHovered(364, 4, 56, 20) ? ($d ? SequenceStep = 20 : IsKeyPressed[32] && (SequenceStep = 20), textOutputB(LARGE_TEXT, 368, 8, "Option", 16711680, 0)) : IsKeyPressed[32] ? SequenceStep = 20 : isMouseHovered(428, 4, 80, 20) && ($d && (SequenceStep = 6), textOutputB(LARGE_TEXT, 432, 8, "World Map", 16711680, 0));
        drawStage(0);
        drawUi(0);
        if (0 == PlayerCurrentLp[0] + PlayerCurrentLp[1] + PlayerCurrentLp[2] + PlayerCurrentLp[3]) {
            TextFadeTime = 0;
            SequenceStep = 30;
        } else if (SignTouch) {
            SequenceStep++;
        } else if (isMouseHovered(364, 4, 56, 20)) {
            if (Clicked) {
                SequenceStep = 20;
            } else if (IsKeyPressed[32]) {
                SequenceStep = 20;
            }
            showTextSolidTopLeft(LARGE_TEXT, 368, 8, "Option", 16711680, 0);
        } else if (IsKeyPressed[32]) {
            SequenceStep = 20;
        } else if (isMouseHovered(428, 4, 80, 20)) {
            if (Clicked) {
                SequenceStep = 6
            }
            showTextSolidTopLeft(LARGE_TEXT, 432, 8, "World Map", 16711680, 0);
        }
    } else if (13 == SequenceStep) {
        //drawStage(0), drawUi(0), screenTransition(srFloor(255 * TextFadeTime / 30)), TextFadeTime++, 30 == TextFadeTime && (1 == SignTouch ? (SignTouch = 0, CurrentArea++, TextFadeTime = 0, SequenceStep = 10) : 2 == SignTouch && (TextFadeTime = CurrentArea = SignTouch = 0, antiCheatCheck(), StageOpenData[CurrentStage] |= ad, 0 < MAP_DATA[CurrentStage][3] && (StageOpenData[MAP_DATA[CurrentStage][3]] |= STAGE_UNLOCKED), 0 < MAP_DATA[CurrentStage][4] && (StageOpenData[MAP_DATA[CurrentStage][4]] |= STAGE_UNLOCKED), antiCheatSet(), SequenceStep = 6, -1 == MAP_DATA[CurrentStage][3] && (SequenceStep = 40)), SaveCode = generateSaveCode(0), SaveCodeGenerated = 1);
        drawStage(0);
        drawUi(0);
        screenTransition(srFloor(255 * TextFadeTime / 30));
        TextFadeTime++;
        if (30 == TextFadeTime) {
            if (1 == SignTouch) {
                SignTouch = 0;
                CurrentArea++;
                TextFadeTime = 0;
                SequenceStep = 10
            } else if (2 == SignTouch) {
                TextFadeTime = CurrentArea = SignTouch = 0;
                antiCheatCheck();
                StageOpenData[CurrentStage] |= STAGE_BEATEN;
                if (0 < MAP_DATA[CurrentStage][3]) {
                    StageOpenData[MAP_DATA[CurrentStage][3]] |= STAGE_UNLOCKED;
                }
                if (0 < MAP_DATA[CurrentStage][4]) {
                    StageOpenData[MAP_DATA[CurrentStage][4]] |= STAGE_UNLOCKED;
                }
                antiCheatSet();
                SequenceStep = 6;
                if (-1 == MAP_DATA[CurrentStage][3]) {
                    SequenceStep = 40
                }
            }
            SaveCode = generateSaveCode(0);
            SaveCodeGenerated = 1;
        }
    } else if (20 == SequenceStep) {
        drawStage(1);
        drawUi(1);
        q = 12;
        //CurrentStage && 20 != CurrentStage && 47 != CurrentStage && 70 != CurrentStage && 77 != CurrentStage || 1 != CurrentArea||
        if (!(CurrentStage && 20 != CurrentStage && 47 != CurrentStage && 70 != CurrentStage && 77 != CurrentStage || 1 != CurrentArea)) {
            q = 52;
        }
        if (isMouseHovered(364, 4, 56, 20)) {
            if (Clicked) {
                SequenceStep = q;
            } else if (IsKeyPressed[32]) {
                SequenceStep = q;
            }
            showTextSolidTopLeft(LARGE_TEXT, 368, 8, "Option", 16711680, 0);
        } else {
            IsKeyPressed[32] && (SequenceStep = q);
        }
        DisplayMode1 = 1;
        filledRect(128, 42, 256, 151, 3425907507);
        DisplayMode1 = 0;
        showTextSolidCenter(LARGE_TEXT, 256, 58, "OPTION", 16777215, 0);
        for (a = 0; 4 > a; a++) {
            drawFromImageCentered(PlayerImage, 256 + 32 * a, 78, 24, 24, 24 * getItemData(InventoryItem[4 + a], 5), 0, 24, 24, 16777215);
            colorPortraitWeap(256 + 32 * a - 12, 66, 24 * getItemData(InventoryItem[4 + a], 5), getItemData(InventoryItem[4 + a], 6));
        }
        showTextSolidCenter(LARGE_TEXT, 180, 98, "Auto move", 16777215, 0);
        b = ["OFF", "ON"];
        for (a = 0; 4 > a; a++) {
            showTextSolidCenter(LARGE_TEXT, 256 + 32 * a, 98, b[PlayerAutoMove[a]], 16777215, 0);
            if (isMouseHoveredCenter(256 + 32 * a, 98, 32, 13)) {
                showTextSolidCenter(LARGE_TEXT, 256 + 32 * a, 98, b[PlayerAutoMove[a]], 16711680, 0);
                if (Clicked) {
                    PlayerAutoMove[a] = 1 - PlayerAutoMove[a];
                }
            }
        }
        showTextSolidTopLeft(LARGE_TEXT, 128, 108, "  Move of dying: " + b[PartyMoveIfDying], 16777215, 0);
        if (isMouseHovered(128, 108, 256, 13)) {
            showTextSolidTopLeft(LARGE_TEXT, 128, 108, "  Move of dying: " + b[PartyMoveIfDying], 16711680, 0);
            PartyMoveIfDying = srClampSwap(PartyMoveIfDying + MouseChanged, 0, 1);
        }
        a = ["PLAYER&ENEMY", "PLAYER", "ENEMY", "OFF"];
        showTextSolidTopLeft(LARGE_TEXT, 128, 121, "  Damage Effect: " + a[PartyDamageEffect], 16777215, 0);
        if (isMouseHovered(128, 121, 256, 13)) {
            showTextSolidTopLeft(LARGE_TEXT, 128, 121, "  Damage Effect: " + a[PartyDamageEffect], 16711680, 0);
            PartyDamageEffect = srClampSwap(PartyDamageEffect + MouseChanged, 0, 3);
        }
        a = ["OFF", "PLAYER", "ENEMY", "PLAYER&ENEMY"];
        showTextSolidTopLeft(LARGE_TEXT, 128, 134, "  LP Bar       : " + a[PartyShowLpBar], 16777215, 0);
        if (isMouseHovered(128, 134, 256, 13)) {
            showTextSolidTopLeft(LARGE_TEXT, 128, 134, "  LP Bar       : " + a[PartyShowLpBar], 16711680, 0);
            PartyShowLpBar = srClampSwap(PartyShowLpBar + MouseChanged, 0, 3);
        }
        a = ["SQUARE", "TRIANGLE", "SHADOW", "OFF"];
        showTextSolidTopLeft(LARGE_TEXT, 128, 147, "  PL Symbol    : " + a[PartyPlayerSymbol], 16777215, 0);
        if (isMouseHovered(128, 147, 256, 13)) {
            showTextSolidTopLeft(LARGE_TEXT, 128, 147, "  PL Symbol    : " + a[PartyPlayerSymbol], 16711680, 0);
            PartyPlayerSymbol = srClampSwap(PartyPlayerSymbol + MouseChanged, 0, 3);
        }
        showTextSolidTopLeft(LARGE_TEXT, 128, 160, "  Drag DeadBody: " + b[PartyDragDeadBody], 16777215, 0);
        if (isMouseHovered(128, 160, 256, 13)) {
            showTextSolidTopLeft(LARGE_TEXT, 128, 160, "  Drag DeadBody: " + b[PartyDragDeadBody], 16711680, 0);
            PartyDragDeadBody = srClampSwap(PartyDragDeadBody + MouseChanged, 0, 1);
        }
        showTextSolidCenter(LARGE_TEXT, 256, 182, "Space Key: open & close", 12632256, 0);
        if (isMouseHoveredCenter(256, 182, 256, 13)) {
            showTextSolidCenter(LARGE_TEXT, 256, 182, "Space Key: open & close", 16711680, 0);
            if (MouseChanged) {
                SequenceStep = q
            }
        }
    } else if (30 == SequenceStep) {
        //if (drawStage(0), drawUi(0), 100 > TextFadeTime && TextFadeTime++, b = srFloor(255 * TextFadeTime / 100), LARGE_TEXT(LARGE_TEXT, 256, 128, "GAME OVER", 100, 20, 10, b, 200, 0, 0, b, 16, 24), 100 == TextFadeTime && $d) {
        drawStage(0);
        drawUi(0);
        if (100 > TextFadeTime) {
            TextFadeTime++
        }
        b = srFloor(255 * TextFadeTime / 100);
        showTextCenter(LARGE_TEXT, 256, 128, "GAME OVER", 100, 20, 10, b, 200, 0, 0, b, 16, 24);
        if (100 == TextFadeTime && Clicked) {
            antiCheatCheck();
            for (a = 0; 4 > a; a++) {
                if (0 == PlayerCurrentLp[a]) {
                    PlayerCurrentLp[a] = 1;
                }
            }
            antiCheatSet();
            SequenceStep = 1
        }
    } else if (40 == SequenceStep) {
        showTextCenter(LARGE_TEXT, 256, 112, "Congratulation", 204, 148, 73, 255, 100, 0, 0, 255, 16, 24);
        showTextCenter(LARGE_TEXT, 256, 144, "Game Clear", 204, 148, 73, 255, 100, 0, 0, 255, 16, 24);
        showTextSolidCenter(LARGE_TEXT, 256, 256, "(C) 2008-2017 DAN-BALL", 13407305, 6553600);
        for (a = 0; 4 > a; a++) {
            c = 166 + 60 * a - SR_PLAYER.pl_current_joint[a][2].x;
            d = 224 - SR_PLAYER.pl_current_joint[a][2].y;
            for (b = 0; 21 > b; b++) {
                SR_PLAYER.pl_current_joint[a][b].x += c;
                SR_PLAYER.pl_current_joint[a][b].y += d;
            }
            drawItem(TerrainTextureImageArray[12], 166 + 60 * a - 12, 233, 24, 8, 0, 0, 24, 8)
        }
        SR_PLAYER.plDraw();
        if (Clicked) {
            antiCheatCheck();
            for (a = 0; 4 > a; a++) {
                if (0 == PlayerCurrentLp[a]) {
                    PlayerCurrentLp[a] = 1;
                }
            }
            antiCheatSet();
            SequenceStep = 1
        }
    }
}

//WINDOW.fff = townScreen;

/*
shopとかいろいろ
*/
function townScreen() {
    var a, b, c, d, e;
    if (50 == SequenceStep) {
        if (SR_TERRAIN.trSet(CurrentStage)) {
            SR_PLAYER.plSet(0, 16, SR_TERRAIN.tr_low_surface[0]);
            SR_PLAYER.plSet(1, 19, SR_TERRAIN.tr_low_surface[1]);
            SR_PLAYER.plSet(2, 22, SR_TERRAIN.tr_low_surface[2]);
            SR_PLAYER.plSet(3, 25, SR_TERRAIN.tr_low_surface[3]);
            SR_ENEMY.enReset(1);
            SR_PROJECTILE.pj_last_index = 0;
            SR_INDICATOR.in_last_index = 0;
            SR_DROP.dp_last_index = 0;
            TextFadeTime = SignTouch = TargetEnemyIndex = TargetEnemyTime = TargetEnemyMaxLp = TargetEnemyCurrentLp = SR_DROP.dp_anti_cheat_value = 0;
            SequenceStep++;
        }
    } else if (51 == SequenceStep) {
        drawStage(0);
        drawUi(0);
        e = "";
        if (!CurrentStage) {
            e = "TOWN";
        } else if (20 == CurrentStage) {
            e = "VILLAGE"
        } else if (47 == CurrentStage) {
            e = "RESORT"
        } else if (70 == CurrentStage) {
            e = "Forget Tree"
        } else if (77 == CurrentStage) {
            e = "ISLAND"
        }
        screenTransition(255 - srFloor(255 * srMin(TextFadeTime, 30) / 30));
        c = 255;
        if (30 > TextFadeTime) {
            c = srFloor(255 * TextFadeTime / 30);
        } else if (80 < TextFadeTime) {
            c = 255 - srFloor(255 * (TextFadeTime - 80) / 30);
        }
        showTextCenter(LARGE_TEXT, 256, 128, e, 255, 255, 255, c, 64, 64, 64, c, 16, 24);
        b = -1024 + srFloor(512 * TextFadeTime / 30);
        drawLine(b, 112, b + 1024, 112, 8421504);
        b = 512 - srFloor(512 * TextFadeTime / 30);
        drawLine(b, 141, b + 1024, 141, 8421504);
        TextFadeTime++;
        if (110 == TextFadeTime) {
            TextFadeTime = 0;
            SequenceStep++;
        }
    } else if (52 == SequenceStep) {
        //if (drawStage(0), drawUi(0), SignTouch)
        drawStage(0);
        drawUi(0);
        if (SignTouch) {
            SequenceStep = 59;
        } else if (isMouseHovered(364, 4, 56, 20)) {
            if (Clicked) {
                SequenceStep = 20;
            } else if (IsKeyPressed[32]) {
                SequenceStep = 20;
            }
            showTextSolidTopLeft(LARGE_TEXT, 368, 8, "Option", 16711680, 0);
        } else if (IsKeyPressed[32]) {
            SequenceStep = 20;
        } else if (isMouseHovered(428, 4, 80, 20)) {
            if (Clicked) {
                SequenceStep = 6
            }
            showTextSolidTopLeft(LARGE_TEXT, 432, 8, "World Map", 16711680, 0);
        } else if (70 == CurrentStage) {
            //if (isMouseHoveredCenter(256, 128, 40, 24) && (centeredText(LARGE_TEXT, 256, 128, "FORGET", 16711680, 1054740), $d && (SequenceStep = 55, MenuEntry = MenuRow = MenuSelected = 0)), isMouseHoveredCenter(256, 160, 40, 24))
            if (isMouseHoveredCenter(256, 128, 40, 24)) {
                showTextSolidCenter(LARGE_TEXT, 256, 128, "FORGET", 16711680, 1054740);
                if (Clicked) {
                    SequenceStep = 55;
                    MenuEntry = MenuRow = MenuSelected = 0
                }
            }
            if (isMouseHoveredCenter(256, 160, 40, 24)) {
                var g = 0;
                for (a = 0; 4 > a; a++) {
                    g += PlayerMaxLp[a] - PlayerCurrentLp[a];
                }
                showTextSolidCenter(LARGE_TEXT, 256, 160, "INN", 16711680, 1054740);
                showTextSolidTopLeft(LARGE_TEXT, 280, 154, "charge of " + g, 16711680, 1054740);
                if (g <= PartyGold && Clicked) {
                    antiCheatCheck();
                    for (a = 0; 4 > a; a++) {
                        if (PlayerCurrentLp[a] != PlayerMaxLp[a]) {
                            SR_INDICATOR.inAdd(SR_PLAYER.pl_current_joint[a][0].x, SR_PLAYER.pl_current_joint[a][0].y, 0, PlayerMaxLp[a] - PlayerCurrentLp[a], 65280)
                        }

                        PlayerCurrentLp[a] = PlayerMaxLp[a];
                    }
                    PartyGold -= g;
                    antiCheatSet()
                }
            } else {
                if (isMouseHoveredCenter(256, 184, 48, 24)) {
                    showTextSolidCenter(LARGE_TEXT, 256, 184, "BOOK", 16711680, 1054740);
                    if (Clicked) {
                        SequenceStep = 54;
                        MenuEntry = MenuRow = MenuSelected = 0;
                    }
                }
            }
        } else if (isMouseHoveredCenter(400, 168, 40, 24)) {
            for (a = g = 0; 4 > a; a++) {
                g += PlayerMaxLp[a] - PlayerCurrentLp[a];
            }
            showTextSolidCenter(LARGE_TEXT, 400, 168, "INN", 16711680, 13800762);
            showTextSolidCenter(LARGE_TEXT, 400, 208, "charge of " + g, 16777215, 3219229);
            if (g <= PartyGold && Clicked) {
                antiCheatCheck();
                for (a = 0; 4 > a; a++) {
                    if (PlayerCurrentLp[a] != PlayerMaxLp[a]) {
                        SR_INDICATOR.inAdd(SR_PLAYER.pl_current_joint[a][0].x, SR_PLAYER.pl_current_joint[a][0].y, 0, PlayerMaxLp[a] - PlayerCurrentLp[a], 65280);
                    }
                    PlayerCurrentLp[a] = PlayerMaxLp[a];
                }
                PartyGold -= g;
                antiCheatSet()
            }
        } else {
            if (isMouseHoveredCenter(40, 152, 72, 24)) {
                if (!CurrentStage) {
                    showTextSolidCenter(LARGE_TEXT, 40, 152, "SHOP", 16711680, 13800762);
                } else if (20 == CurrentStage) {
                    showTextSolidCenter(LARGE_TEXT, 40, 152, " COMPO SHOP", 16711680, 13800762);
                } else if (47 == CurrentStage) {
                    showTextSolidCenter(LARGE_TEXT, 40, 152, " JUNK SHOP", 16711680, 13800762);
                } else if (77 == CurrentStage) {
                    showTextSolidCenter(LARGE_TEXT, 40, 152, " COMPO SHOP", 16711680, 13800762);
                }
                if (Clicked) {
                    SequenceStep = 53;
                    MenuEntry = MenuRow = MenuSelected = 0
                }
            } else if (isMouseHoveredCenter(40, 184, 48, 24)) {
                showTextSolidCenter(LARGE_TEXT, 40, 184, "BOOK", 16711680, 13800762);
                if (Clicked) {
                    SequenceStep = 54;
                    MenuEntry = MenuRow = MenuSelected = 0;
                }
            }
        }
    } else if (53 == SequenceStep) {
        drawStage(0);
        e = SignTouch = 0;
        if (!CurrentStage) {
            e = 0;
        } else if (20 == CurrentStage) {
            e = 1;
        } else if (47 == CurrentStage) {
            e = 2;
        } else if (77 == CurrentStage) {
            e = 3;
        }
        var h = [[3, 4, 5, 6, 12, 14, 15, 18], /*shop icon*/
            [7, 8, 9, 10, 11, 16, 17], /*compo shop icon*/
            [3, 4, 5, 6, 12, 14, 15, 18],/*resort icon*/
            [7, 8, 9, 10, 11, 16, 17]];/*island icon*/
        c = 80;
        d = 28;
        DisplayMode1 = 1;
        filledRect(c - 4, d - 4, 243, 168, 2147483648);
        DisplayMode1 = 0;
        frameRect(c + 0, d + 0, 236, 161, 16777215);
        if (isMouseHovered(c + 8, d + 4, 16 * h[e].length, 12)) {
            b = srFloor((MouseX1 - (c + 8)) / 16);
            if (Clicked) {
                MenuSelected = b;
                MenuRow = srClampA(MenuRow, 0, srFloor(SHOP_DATA[e][MenuSelected].length / 3) - 1)
            }

            filledRect(c + 8 + 16 * b, d + 4, 12, 12, 10027008);
        }
        DisplayMode2 = 2;
        for (a = 0; a < h[e].length; a++) {
            drawFromImage(SmallItemImage, c + 8 + 16 * a, d + 4, 12, 12, 12 * h[e][a], 0, 12, 12, 16777215);
        }
        DisplayMode2 = 0;
        frameRect(c + 8 + 16 * MenuSelected - 1, d + 4 - 1, 14, 14, 10027008);
        drawLine(c + 0, d + 20 - 1, c + 235, d + 20 - 1, 16777215);
        if (isMouseHovered(c + 120, d + 24, 84, 84)) {
            b = srFloor((MouseX1 - (c + 120)) / 28);
            a = srFloor((MouseY1 - (d + 24)) / 28);
            if (Clicked) {
                MenuEntry = 3 * a + b;
            }
            filledRect(c + 120 + 28 * b, d + 24 + 28 * a, 24, 24, 10027008);
        }
        b = (3 * MenuRow + MenuEntry) % SHOP_DATA[e][MenuSelected].length;
        h = SHOP_DATA[e][MenuSelected][b];
        g = 1;
        for (a = 0; a < StageCount; a++) {
            if (0 < (StageOpenData[a] & STAGE_BEATEN) && g < STAGE_SHOP_REQUIREMENT[a]) {
                g = STAGE_SHOP_REQUIREMENT[a];
            }
        }
        !CurrentStage && g <= b && (h = 0);
        showTextSolidSpacingTopLeft(c + 8, d + 24, ITEM_DATA[h][0] + " " + (ITEM_DATA[h][1] ? ITEM_DATA[h][1] : ""), -1, 2631720, -2);
        showTextSolidSpacingTopLeft(c + 8, d + 24, ITEM_DATA[h][0] + " " + (ITEM_DATA[h][1] ? ITEM_DATA[h][1] : ""), 16777215, -1, -2);
        a = getItemData(h, 5);
        if (9 == a) {
            showTextSolidTopLeft(LARGE_TEXT, c + 8, d + 40, "Compo Item", -1, 5263440);
            showTextSolidSpacingTopLeft(c + 8, d + 56, ITEM_DATA[h][10], -1, 2631720, -2);
            showTextSolidSpacingTopLeft(c + 8, d + 56, ITEM_DATA[h][10], 16777215, -1, -2);
            showTextSolidSpacingTopLeft(c + 8, d + 68, ITEM_DATA[h][11], -1, 2631720, -2);
            showTextSolidSpacingTopLeft(c + 8, d + 68, ITEM_DATA[h][11], 16777215, -1, -2);
        } else {
            showTextSolidTopLeft(LARGE_TEXT, c + 8, d + 40, "AT " + ITEM_DATA[h][10] + "-" + ITEM_DATA[h][11], 16777215, 0);
            showTextSolidTopLeft(LARGE_TEXT, c + 8, d + 52, "AGI " + ITEM_DATA[h][14] + "-" + ITEM_DATA[h][15], 16777215, 0);
            showTextSolidTopLeft(LARGE_TEXT, c + 8, d + 64, "RANGE " + ITEM_DATA[h][16], 16777215, 0);
            var q = getItemData(h, 34);
            var m = getItemData(h, 35);
            var l = srMax(getItemData(h, 36), 0);
            var A = getItemData(h, 39);
            var z = getItemData(h, 40);
            showTextSolidTopLeft(LARGE_TEXT, c + 8, d + 80, "TYPE " + "physical fire ice thunder poison freeze".split(" ")[q], 16777215, 0);
            showTextSolidTopLeft(LARGE_TEXT, c + 8, d + 92, "AT " + A + "-" + z, 16777215, 0);
            if (6 == a) {
                showTextSolidTopLeft(LARGE_TEXT, c + 8, d + 104, "$$ " + l, 16777215, 0);
            } else {
                showTextSolidTopLeft(LARGE_TEXT, c + 8, d + 104, "MP " + l, 16777215, 0);
            }
            if (2 == q) {
                showTextSolidTopLeft(LARGE_TEXT, c + 8, d + 116, "SLOW " + m + "%", 16777215, 0)
            } else if (4 == q) {
                showTextSolidTopLeft(LARGE_TEXT, c + 8, d + 116, "TIME " + m / 50 + "s", 16777215, 0)
            } else if (5 == q) {
                showTextSolidTopLeft(LARGE_TEXT, c + 8, d + 116, "TIME " + m / 50 + "s", 16777215, 0)
            }
        }
        for (a = 0; 9 > a; a++) {
            q = (3 * MenuRow + a) % SHOP_DATA[e][MenuSelected].length;
            if (CurrentStage || g > q) {
                DisplayMode2 = 2;
                drawFromImage(LargeItemImage, c + 120 + a % 3 * 28, d + 24 + 28 * srFloor(a / 3), 24, 24, 24 * getItemData(SHOP_DATA[e][MenuSelected][q], 4), 0, 24, 24, getItemData(SHOP_DATA[e][MenuSelected][q], 6));
                DisplayMode2 = 0;
                if (ITEM_DATA[SHOP_DATA[e][MenuSelected][q]][1]) {
                    showTextSolidTopLeft(SMALL_TEXT, c + 120 + a % 3 * 28 + 19, d + 24 + 28 * srFloor(a / 3) + 17, "" + ITEM_DATA[SHOP_DATA[e][MenuSelected][q]][1], 16777215, -1);
                }
            }
        }
        frameRect(c + 120 + MenuEntry % 3 * 28, d + 24 + 28 * srFloor(MenuEntry / 3), 24, 24, 10027008);
        g = getItemData(h, 2);
        if (2 == e && 1 == b) {
            g *= 10;
        }
        if (isMouseHovered(c + 176 - 56, d + 120 - 10, 108, 20)) {
            if (0 != h && g <= PartyGold && Clicked) {
                antiCheatCheck();
                a = 0;
                if (!e || 2 == e && !b) {
                    a = 59;
                }
                SR_DROP.dpAdd(40, 200, h, 0, a);
                PartyGold -= g;
                antiCheatSet()
            }
            filledRect(c + 176 - 56, d + 120 - 10, 108, 20, 10027008)
        }
        showTextSolidCenter(LARGE_TEXT, c + 176, d + 120, "" + g + "$ BUY", 16777215, 0);
        frameRect(c + 176 - 56, d + 120 - 10, 108, 20, 10027008);
        h = 16777215;
        if (isMouseHovered(c + 216 - 12, d + 36 - 12, 24, 24)) {
            if (Clicked) {
                MenuRow = srClampSwap(MenuRow - 1, 0, srFloor(SHOP_DATA[e][MenuSelected].length / 3) - 1);
            }
            h = 10027008;
        }
        frameRect(c + 216 - 12, d + 36 - 12, 24, 24, 16777215);
        filledRect(c + 216 - 1, d + 36 - 8, 2, 2, h);
        filledRect(c + 216 - 2, d + 36 - 6, 4, 2, h);
        filledRect(c + 216 - 3, d + 36 - 4, 6, 2, h);
        filledRect(c + 216 - 4, d + 36 - 2, 8, 2, h);
        filledRect(c + 216 - 5, d + 36, 10, 2, h);
        filledRect(c + 216 - 6, d + 38, 12, 2, h);
        filledRect(c + 216 - 7, d + 40, 14, 2, h);
        filledRect(c + 216 - 8, d + 42, 16, 2, h);
        h = 16777215;
        if (isMouseHovered(c + 216 - 12, d + 92 - 12, 24, 24)) {
            if (Clicked) {
                MenuRow = srClampSwap(MenuRow + 1, 0, srFloor(SHOP_DATA[e][MenuSelected].length / 3) - 1);
            }
            h = 10027008;
        }
        frameRect(c + 216 - 12, d + 92 - 12, 24, 24, 16777215);
        filledRect(c + 216 - 8, d + 92 - 8, 16, 2, h);
        filledRect(c + 216 - 7, d + 92 - 6, 14, 2, h);
        filledRect(c + 216 - 6, d + 92 - 4, 12, 2, h);
        filledRect(c + 216 - 5, d + 92 - 2, 10, 2, h);
        filledRect(c + 216 - 4, d + 92, 8, 2, h);
        filledRect(c + 216 - 3, d + 94, 6, 2, h);
        filledRect(c + 216 - 2, d + 96, 4, 2, h);
        filledRect(c + 216 - 1, d + 98, 2, 2, h);
        drawLine(c + 0, d + 136 - 1, c + 235, d + 136 - 1, 16777215);
        drawLine(c + 120, d + 136 - 1, c + 120, d + 160, 16777215);
        //isMouseHovered(c + 1, d + 136, 120, 24) && 0 != InventoryItem[40] ? (g = srFloor(getItemData(InventoryItem[40], 2) / 8), Clicked && (antiCheatCheck(), srDrop.add(40, 200, 1, g, 0), InventoryItem[40] = 0, InventoryCompo1[40] = 0, InventoryCompo2[40] = 0, antiCheatSet()), filledRect(c + 1, d + 136, 119, 24, 10027008), centeredText(LARGE_TEXT, c + 60, d + 148, "" + g + "$ SELL", 16777215, 0)) : isMouseHovered(c + 1, d + 136, 120, 24) && 0 == InventoryItem[40] && !ClickToSell ? (Clicked && (ClickToSell = 1), filledRect(c + 1, d + 136, 119, 24, 10027008), centeredText(LARGE_TEXT, c + 60, d + 148, "CLICK TO SELL", 16777215, 0)) : isMouseHovered(c + 1, d + 136, 120, 24) && 0 == InventoryItem[40] && 1 == ClickToSell ? (Clicked && (ClickToSell = 0), filledRect(c + 1, d + 136, 119, 24, 10027008), centeredText(LARGE_TEXT, c + 60, d + 148, "CANCEL", 16777215, 0)) : 1 == ClickToSell ? centeredText(LARGE_TEXT, c + 60, d + 148, "CANCEL", 16777215, 0) : centeredText(LARGE_TEXT, c + 60, d + 148, "DRAG TO SELL", 16777215, 0);
        if (isMouseHovered(c + 1, d + 136, 120, 24) && 0 != InventoryItem[40]) {
            g = srFloor(getItemData(InventoryItem[40], 2) / 8);
            if (Clicked) {
                antiCheatCheck();
                SR_DROP.dpAdd(40, 200, 1, g, 0);
                InventoryItem[40] = 0;
                InventoryCompo1[40] = 0;
                InventoryCompo2[40] = 0;
                antiCheatSet();
            }
            filledRect(c + 1, d + 136, 119, 24, 10027008);
            showTextSolidCenter(LARGE_TEXT, c + 60, d + 148, "" + g + "$ SELL", 16777215, 0);
        } else if (isMouseHovered(c + 1, d + 136, 120, 24) && 0 == InventoryItem[40] && !ClickToSell) {
            if (Clicked) {
                ClickToSell = 1;
            }
            filledRect(c + 1, d + 136, 119, 24, 10027008);
            showTextSolidCenter(LARGE_TEXT, c + 60, d + 148, "CLICK TO SELL", 16777215, 0);
        } else if (isMouseHovered(c + 1, d + 136, 120, 24) && 0 == InventoryItem[40] && 1 == ClickToSell) {
            if (Clicked) {
                ClickToSell = 0;
            }
            filledRect(c + 1, d + 136, 119, 24, 10027008);
            showTextSolidCenter(LARGE_TEXT, c + 60, d + 148, "CANCEL", 16777215, 0);
        } else if (1 == ClickToSell) {
            showTextSolidCenter(LARGE_TEXT, c + 60, d + 148, "CANCEL", 16777215, 0);
        } else {
            showTextSolidCenter(LARGE_TEXT, c + 60, d + 148, "DRAG TO SELL", 16777215, 0);
        }
        if (isMouseHovered(c + 121, d + 136, 114, 24)) {
            if (Clicked) {
                ClickToSell = 0;
                SequenceStep = 52;
            }
            filledRect(c + 121, d + 136, 114, 24, 10027008);
        }
        showTextSolidCenter(LARGE_TEXT, c + 176, d + 148, "EXIT", 16777215, 0);
        drawUi(1)
    } else if (54 == SequenceStep) {
        drawStage(0);
        SignTouch = 0;
        h = 10;
        c = 80;
        d = 28;
        DisplayMode1 = 1;
        if (70 == CurrentStage) {
            filledRect(c - 4, d - 4, 328, 168, 3422552064);
        } else {
            filledRect(c - 4, d - 4, 328, 168, 2147483648);
        }
        DisplayMode1 = 0;
        frameRect(c + 0, d + 0, 321, 161, 16777215);
        drawLine(c + 160, d + 0, c + 160, d + 160, 16777215);
        //e = "WORLD MAP " + (100 > MenuSelected ? " " : "");
        e = "WORLD MAP ";
        if (100 > MenuSelected) {
            e += " ";
        } else {
            //拡張用かな
            e += "";
        }
        e += "" + srFloor(MenuSelected / h + 1) + "/" + srFloor((STAGE_BOOK_INDEX_DATA.length - 1) / h + 1);
        showTextSolidTopLeft(LARGE_TEXT, c + 20, d + 4, e, -1, 32768);
        if (isMouseHovered(c + 8, d + 16, 144, 12 * h)) {
            a = srFloor((MouseY1 - (d + 16)) / 12);
            if (Clicked) {
                MenuRow = a;
            }
            filledRect(c + 8, d + 16 + 12 * a, 144, 12, 10027008);
        }
        for (a = 0; a < h; a++) {
            e = STAGE_BOOK_INDEX_DATA[MenuSelected + a];
            if (0 != e) {
                if (0 < (StageOpenData[e] & STAGE_BEATEN)) {
                    showTextSolidTopLeft(LARGE_TEXT, c + 8, d + 16 + 12 * a, STAGE_NAME[e], 16777215, 0);
                } else {
                    showTextSolidTopLeft(LARGE_TEXT, c + 8, d + 16 + 12 * a, "???", 16777215, 0);
                }
            }
        }
        e = STAGE_BOOK_INDEX_DATA[MenuSelected + MenuRow];
        if (0 != e) {
            if (0 < (StageOpenData[e] & STAGE_BEATEN)) {
                showTextSolidTopLeft(LARGE_TEXT, c + 8, d + 16 + 12 * MenuRow, STAGE_NAME[e], 16711680, 0);
            } else {
                showTextSolidTopLeft(LARGE_TEXT, c + 8, d + 16 + 12 * MenuRow, "???", 16711680, 0);
            }
        }
        drawLine(c + 0, d + 140, c + 160, d + 140, 16777215);
        if (isMouseHovered(c + 8, d + 144 - 2, 48, 17)) {
            if (Clicked) {
                MenuSelected = srClampSwap(srFloor(MenuSelected / h) - 1, 0, srFloor((STAGE_BOOK_INDEX_DATA.length - 1) / h)) * h;
            }
            filledRect(c + 8, d + 144 - 2, 48, 17, 10027008);
        }
        showTextSolidTopLeft(LARGE_TEXT, c + 16, d + 145, "Prev", 16777215, 0);
        if (isMouseHovered(c + 56, d + 144 - 2, 48, 17)) {
            if (Clicked) {
                MenuSelected = srClampSwap(srFloor(MenuSelected / h) + 1, 0, srFloor((STAGE_BOOK_INDEX_DATA.length - 1) / h)) * h;
            }
            filledRect(c + 56, d + 144 - 2, 48, 17, 10027008);
        }
        showTextSolidTopLeft(LARGE_TEXT, c + 64, d + 145, "Next", 16777215, 0);
        if (isMouseHovered(c + 104, d + 144 - 2, 48, 17)) {
            if (Clicked) {
                SequenceStep = 52;
            }
            filledRect(c + 104, d + 144 - 2, 48, 17, 10027008);
        }
        showTextSolidTopLeft(LARGE_TEXT, c + 112, d + 145, "EXIT", 16777215, 0);
        if (0 != e) {
            if (0 < (StageOpenData[e] & STAGE_BOOKED)) {
                h = STAGE_INDEX_DATA[e + 1] - STAGE_INDEX_DATA[e];
                for (a = h - 1; 0 <= a; a--) {
                    h -= ENEMY_DATA[STAGE_INDEX_DATA[e] + a][ENEMY_SECOND_ATTACK];
                }
                g = c + 80 - 16 * h;
                if (isMouseHovered(g + 160, d + 0, 32 * h, 52)) {
                    b = srFloor((MouseX1 - (g + 160)) / 32);
                    if (Clicked) {
                        MenuEntry = b;
                    }
                    filledRect(g + 160 + 32 * b + 2, d + 2, 28, 52, 10027008);
                }
                filledRect(g + 160 + 32 * MenuEntry + 2, d + 50, 28, 4, 10027008);
                MenuEntry = srClampA(MenuEntry, 0, h - 1);
                for (a = 0; a < h; a++) {
                    drawItem(TerrainTextureImageArray[STAGE_DATA[e][STAGE_DATA[e].length - 1][0]], g + 164 + 32 * a, d + 44, 24, 8, 0, 0, 24, 8);
                }
                h = STAGE_INDEX_DATA[e + 1] - STAGE_INDEX_DATA[e];
                for (b = a = 0; a < h; a++, b++) {
                    EnDrawIcon(STAGE_INDEX_DATA[e] + a, g + 176 + 32 * b, d + 44 - 1, 0);
                    a += ENEMY_DATA[STAGE_INDEX_DATA[e] + a][ENEMY_SECOND_ATTACK];
                }
                e = STAGE_INDEX_DATA[e] + MenuEntry;
                showTextSolidTopLeft(LARGE_TEXT, c + 164, d + 56, "Lv   " + ENEMY_DATA[e][ENEMY_LEVEL], 16777215, 0);
                showTextSolidTopLeft(LARGE_TEXT, c + 164, d + 68, "LP   " + ENEMY_DATA[e][ENEMY_LP], 16777215, 0);
                showTextSolidTopLeft(LARGE_TEXT, c + 164, d + 80, "GOLD " + ENEMY_DATA[e][ENEMY_GOLD], 16777215, 0);
                showTextSolidTopLeft(LARGE_TEXT, c + 164, d + 92, "EXP  " + ENEMY_DATA[e][ENEMY_EXP], 16777215, 0);
                showTextSolidTopLeft(LARGE_TEXT, c + 164, d + 108, "Drop Item", 16777215, 0);
                for (b = a = 0; 6 > a; a += 2) {
                    h = ENEMY_DATA[e][ENEMY_DROP_FIRST + a];
                    if (0 != h) {
                        DisplayMode2 = 2;
                        drawFromImage(SmallItemImage, c + 164, d + 4 * (30 + 3 * b), 12, 12, 12 * getItemData(h, 3), 0, 12, 12, getItemData(h, 6));
                        DisplayMode2 = 0;
                        showTextSolidSpacingTopLeft(c + 164, d + 4 * (30 + 3 * b), "  " + ITEM_DATA[h][0] + " " + (ITEM_DATA[h][1] ? ITEM_DATA[h][1] : ""), 16777215, 0, -1);
                        b++;
                    }
                }
                showTextSolidTopLeft(LARGE_TEXT, c + 256, d + 56, "strong", 16777215, 0);
                if (0 < ENEMY_DATA[e][ENEMY_PHYSICAL_RESISTANCE]) {
                    showTextSolidTopLeft(SMALL_TEXT, c + 256, d + 70, "Ph          ", 8421504, 0);
                }
                if (0 < ENEMY_DATA[e][ENEMY_FIRE_RESISTANCE]) {
                    showTextSolidTopLeft(SMALL_TEXT, c + 256, d + 70, "  Fi        ", 16711680, 0);
                }
                if (0 < ENEMY_DATA[e][ENEMY_ICE_RESISTANCE]) {
                    showTextSolidTopLeft(SMALL_TEXT, c + 256, d + 70, "    Ic      ", 2105599, 0);
                }
                if (0 < ENEMY_DATA[e][ENEMY_THUNDER_RESISTANCE]) {
                    showTextSolidTopLeft(SMALL_TEXT, c + 256, d + 70, "      Th    ", 16777024, 0);
                }
                if (0 < ENEMY_DATA[e][ENEMY_POISON_RESISTANCE]) {
                    showTextSolidTopLeft(SMALL_TEXT, c + 256, d + 70, "        Po  ", 65280, 0);
                }
                if (0 < ENEMY_DATA[e][ENEMY_FREEZE_RESISTANCE]) {
                    showTextSolidTopLeft(SMALL_TEXT, c + 256, d + 70, "          Fr", 12632319, 0);
                }
                showTextSolidTopLeft(LARGE_TEXT, c + 256, d + 80, "weak", 16777215, 0);
                if (0 > ENEMY_DATA[e][ENEMY_PHYSICAL_RESISTANCE]) {
                    showTextSolidTopLeft(SMALL_TEXT, c + 256, d + 94, "Ph          ", 8421504, 0);
                }
                if (0 > ENEMY_DATA[e][ENEMY_FIRE_RESISTANCE]) {
                    showTextSolidTopLeft(SMALL_TEXT, c + 256, d + 94, "  Fi        ", 16711680, 0);
                }
                if (0 > ENEMY_DATA[e][ENEMY_ICE_RESISTANCE]) {
                    showTextSolidTopLeft(SMALL_TEXT, c + 256, d + 94, "    Ic      ", 2105599, 0);
                }
                if (0 > ENEMY_DATA[e][ENEMY_THUNDER_RESISTANCE]) {
                    showTextSolidTopLeft(SMALL_TEXT, c + 256, d + 94, "      Th    ", 16777024, 0);
                }
                if (0 > ENEMY_DATA[e][ENEMY_POISON_RESISTANCE]) {
                    showTextSolidTopLeft(SMALL_TEXT, c + 256, d + 94, "        Po  ", 65280, 0);
                }
                if (0 > ENEMY_DATA[e][ENEMY_FREEZE_RESISTANCE]) {
                    showTextSolidTopLeft(SMALL_TEXT, c + 256, d + 94, "          Fr", 12632319, 0)
                }
            } else if (0 < (StageOpenData[e] & STAGE_BEATEN)) {
                showTextSolidCenter(LARGE_TEXT, c + 240, d + 40, "Information fee", 16777215, 0);
                g = 1E3 * (MenuSelected + MenuRow + 1);
                if (isMouseHoveredCenter(c + 240, d + 80, 160, 160)) {
                    if (g <= PartyGold && Clicked) {
                        antiCheatCheck();
                        StageOpenData[e] |= STAGE_BOOKED;
                        PartyGold -= g;
                        antiCheatSet();
                    }
                    filledRectCentered(c + 240, d + 80, 120, 32, 10027008);
                }
                showTextSolidCenter(LARGE_TEXT, c + 240, d + 80, "" + g + "$ BUY", 16777215, 0);
            } else {
                showTextSolidCenter(LARGE_TEXT, c + 240, d + 40, "?????", 16777215, 0);
                showTextSolidCenter(LARGE_TEXT, c + 240, d + 80, "???", 16777215, 0);
            }
        }
        drawUi(1)
    } else if (55 == SequenceStep) {
        drawStage(0);
        SignTouch = 0;
        c = 80;
        d = 28;
        DisplayMode1 = 1;
        filledRect(c - 4, d - 4, 328, 168, 3422552064);
        DisplayMode1 = 0;
        frameRect(c + 0, d + 0, 321, 161, 16777215);
        drawLine(c + 160, d + 0, c + 160, d + 160, 16777215);
        c = 100;
        d = 60;
        for (a = 0; 4 > a; a++) {
            if (isMouseHovered(c + 32 * a - 4, d + 0 - 4, 32, 32)) {
                filledRect(c + 32 * a, d + 0, 24, 24, 10027008);
                if (Clicked) {
                    MenuSelected = a;
                }
            } else {
                filledRect(c + 32 * a, d + 0, 24, 24, 0);
            }
            drawFromImage(PlayerImage, c + 32 * a, d, 24, 24, 24 * getItemData(InventoryItem[4 + a], 5), 0, 24, 24, 16777215);
            colorPortraitWeap(c + 32 * a, d, 24 * getItemData(InventoryItem[4 + a], 5), getItemData(InventoryItem[4 + a], 6));
        }
        frameRect(c + 32 * MenuSelected - 1, d - 1, 26, 26, 16711680);
        showTextSolidTopLeft(LARGE_TEXT, c, d - 16, CLASS_NAME[getItemData(InventoryItem[4 + MenuSelected], 5)], 16777215, 0);
        c = 100;
        d = 74;
        showTextSolidTopLeft(LARGE_TEXT, c, d + 16, "LP  " + PlayerSpLp[MenuSelected], 16777215, 0);
        showTextSolidTopLeft(LARGE_TEXT, c, d + 28, "STR " + PlayerSpStr[MenuSelected], 16777215, 0);
        showTextSolidTopLeft(LARGE_TEXT, c, d + 40, "DEX " + PlayerSpDex[MenuSelected], 16777215, 0);
        showTextSolidTopLeft(LARGE_TEXT, c, d + 52, "MAG " + PlayerSpMag[MenuSelected], 16777215, 0);
        showTextSolidTopLeft(LARGE_TEXT, c, d + 68, "LV  " + PartyLv[0], 16777215, 0);
        showTextSolidTopLeft(LARGE_TEXT, c, d + 68, "        SP " + PlayerSp[MenuSelected], 16777215, 0);
        c = 80;
        d = 28;
        drawLine(c + 0, d + 140, c + 160, d + 140, 16777215);
        if (isMouseHovered(c + 56, d + 144 - 2, 48, 17)) {
            if (Clicked) {
                SequenceStep = 52
            }
            filledRect(c + 56, d + 144 - 2, 48, 17, 10027008);
        }
        showTextSolidTopLeft(LARGE_TEXT, c + 64, d + 145, "EXIT", 16777215, 0);
        g = 1E3 * (PlayerSpLp[MenuSelected] + PlayerSpStr[MenuSelected] + PlayerSpDex[MenuSelected] + PlayerSpMag[MenuSelected]);
        //isMouseHoveredCenter(c + 240, d + 80, 120, 32) && 0 < g && (g <= PartyGold && Clicked && (antiCheatCheck(), PlayerSp[MenuSelected] += PlayerSpLp[MenuSelected] + PlayerSpStr[MenuSelected] + PlayerSpDex[MenuSelected] + PlayerSpMag[MenuSelected], PlayerSpLp[MenuSelected] = 0, PlayerSpStr[MenuSelected] = 0, PlayerSpDex[MenuSelected] = 0, PlayerSpMag[MenuSelected] = 0, PartyGold -= g, antiCheatSet()), filledRectCentered(c + 240, d + 80, 120, 32, 10027008));
        if (isMouseHoveredCenter(c + 240, d + 80, 120, 32) && 0 < g) {
            if (g <= PartyGold && Clicked) {
                antiCheatCheck();
                PlayerSp[MenuSelected] += PlayerSpLp[MenuSelected] + PlayerSpStr[MenuSelected] + PlayerSpDex[MenuSelected] + PlayerSpMag[MenuSelected];
                PlayerSpLp[MenuSelected] = 0;
                PlayerSpStr[MenuSelected] = 0;
                PlayerSpDex[MenuSelected] = 0;
                PlayerSpMag[MenuSelected] = 0;
                PartyGold -= g;
                antiCheatSet();
            }
            filledRectCentered(c + 240, d + 80, 120, 32, 10027008);
        }
        showTextSolidCenter(LARGE_TEXT, c + 240, d + 72, "Forget", 16777215, 0);
        showTextSolidCenter(LARGE_TEXT, c + 240, d + 88, "" + g + "$ BUY", 16777215, 0);
        drawUi(1)
    } else if (59 == SequenceStep) {
        drawStage(0);
        drawUi(0);
        screenTransition(srFloor(255 * TextFadeTime / 30));
        TextFadeTime++;
        if (30 == TextFadeTime) {
            TextFadeTime = CurrentArea = SignTouch = 0;
            SequenceStep = 6;
            antiCheatCheck();
            StageOpenData[CurrentStage] |= STAGE_BEATEN;
            if (0 < MAP_DATA[CurrentStage][3]) {
                StageOpenData[MAP_DATA[CurrentStage][3]] |= STAGE_UNLOCKED;
            }
            if (0 < MAP_DATA[CurrentStage][4]) {
                StageOpenData[MAP_DATA[CurrentStage][4]] |= STAGE_UNLOCKED;
            }
            antiCheatSet();
            SaveCode = generateSaveCode(0);
            SaveCodeGenerated = 1
        }
    }
}

//WINDOW.fff = pvpScreen;

/*
vsとか
*/
function pvpScreen() {
    var a, b, c;
    if (70 == SequenceStep) {
        CurrentStage = 0;
        CurrentArea = 1;
        if (SR_TERRAIN.trSet(CurrentStage)) {
            SR_PLAYER.plSet(0, 26, SR_TERRAIN.tr_low_surface[0]);
            SR_PLAYER.plSet(1, 30, SR_TERRAIN.tr_low_surface[1]);
            SR_PLAYER.plSet(2, 34, SR_TERRAIN.tr_low_surface[2]);
            SR_PLAYER.plSet(3, 38, SR_TERRAIN.tr_low_surface[3]);
            SR_ENEMY.enReset(1);
            SR_PROJECTILE.pj_last_index = 0;
            SR_INDICATOR.in_last_index = 0;
            SR_DROP.dp_last_index = 0;
            TextFadeTime = SignTouch = TargetEnemyIndex = TargetEnemyTime = TargetEnemyMaxLp = TargetEnemyCurrentLp = SR_DROP.dp_anti_cheat_value = 0;
            SequenceStep++;
        }
    } else if (71 == SequenceStep || 72 == SequenceStep || 73 == SequenceStep || 74 == SequenceStep) {
        //if (TrDraw(), SR_PLAYER.G(), DpMain(), InMain(), $e(), DpDraw(), SR_PLAYER.B(), PjDraw(), InDraw(), drawUi(0), 71 == SequenceStep)
        TrDraw();
        SR_PLAYER.plMain();
        DpMain();
        InMain();
        PjMain();
        DpDraw();
        SR_PLAYER.plDraw();
        PjDraw();
        InDraw();
        drawUi(0);
        if (71 == SequenceStep) {
            if (UploadError) {
                if (Language) {
                    if (100 == UploadError) {
                        drawVsMessage(UserNameImage, "\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f");
                    } else if (1 == UploadError) {
                        drawVsMessage(UserNameImage, "\u30e6\u30fc\u30b6\u30fc\u767b\u9332\u304c\u5fc5\u8981\u3067\u3059");
                    } else if (2 == UploadError) {
                        drawVsMessage(UserNameImage, "1\u65e5\u306b1\u56de\u306e\u307f\u3067\u3059");
                    } else if (3 == UploadError) {
                        drawVsMessage(UserNameImage, "10\u4ef6\u4ee5\u4e0a\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u51fa\u6765\u307e\u305b\u3093");
                    } else {
                        drawVsMessage(UserNameImage, "\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u51fa\u6765\u307e\u305b\u3093");
                    }
                } else {
                    if (100 == UploadError) {
                        drawVsMessage(UserNameImage, "The upload has been completed.");
                    } else if (1 == UploadError) {
                        drawVsMessage(UserNameImage, "User registration is required.");
                    } else if (2 == UploadError) {
                        drawVsMessage(UserNameImage, "1 time in 1 day only.");
                    } else if (3 == UploadError) {
                        drawVsMessage(UserNameImage, "Cannot upload more than 10 posts.");
                    } else {
                        drawVsMessage(UserNameImage, "Cannot upload.");
                    }
                }
            } else {
                if (Language) {
                    drawVsMessage(UserNameImage, "\u30b3\u30e1\u30f3\u30c8\u3092\u8a18\u5165\u3057\u3066\uff2f\uff2b\u3092\u62bc\u3057\u3066\u4e0b\u3055\u3044");
                } else {
                    drawVsMessage(UserNameImage, "Enter comments and click OK.");
                }
            }
            SequenceStep++;
        } else if (72 == SequenceStep) {
            filledRectCentered(256, 100, 300, 100, 8421504);
            showTextSolidCenter(LARGE_TEXT, 256, 70, "UPLOAD", 16752800, 0);
            //im.a
            drawFromImageCentered(UserNameImage, 256, 90, UserNameImage.im_text_width, 16, 0, 0, UserNameImage.im_text_width, 16, 0);
            if (!UploadError) {
                b = VsUploadCommentInput;
                filledRect(136, 108, 240, 16, 16777215);
                frameRect(135, 107, 242, 18, 0);
                //if (isMouseHovered(136, 108, 240, 16) && (frameRect(135, 107, 242, 18, 16711680), Released)) {
                if (isMouseHovered(136, 108, 240, 16)) {
                    frameRect(135, 107, 242, 18, 16711680);
                    if (Released) {
                        c = null;
                        try {
                            //パーティーコメント入力
                            c = prompt("UPLOAD", b)
                        } catch (g) {
                        }
                        if (null != c) {
                            b = c
                        }
                    }
                }
                drawVsMessage(VsUploadCommentImage, b);
                drawFromImage(VsUploadCommentImage, 137, 108, 238, 16, 0, 0, 238, 16, 0);
                VsUploadCommentInput = b;
                b = isMouseHoveredCenter(256, 140, 16, 12);
                showTextSolidCenter(LARGE_TEXT, 256, 140, "OK", b ? 16711680 : 16777215, 0);
                if (b && Released) {
                    if (2 > VsUploadCommentInput.length) {
                        if (Language) {
                            drawVsMessage(UserNameImage, "\u30b3\u30e1\u30f3\u30c8\u3092\uff12\u6587\u5b57\u4ee5\u4e0a\u8a18\u5165\u3057\u3066\u4e0b\u3055\u3044");
                        } else {
                            drawVsMessage(UserNameImage, "The comment must LARGE_TEXT longer than 2 characters.");
                        }
                    } else {
                        b = VsUploadCommentInput;
                        c = 0;
                        a = b.length;
                        for (var d = 0; d < a; d++) {
                            var e = b.charCodeAt(d);
                            //c = 0 <= e && 128 >= e || 65377 <= e && 65439 >= e ? c + 1 : c + 2
                            if (0 <= e && 128 >= e || 65377 <= e && 65439 >= e) {
                                c = c + 1
                            } else {
                                c = c + 2
                            }
                        }
                        //20 < c ? Language ? df(UserNameImage, "\u30b3\u30e1\u30f3\u30c8\u3092\uff11\uff10\u6587\u5b57\u4ee5\u4e0b\u3067\u8a18\u5165\u3057\u3066\u4e0b\u3055\u3044") : df(UserNameImage, "The comment must LARGE_TEXT shorter than 10 characters.") : SequenceStep++
                        if (20 >= c) {
                            SequenceStep++
                        } else if (Language) {
                            drawVsMessage(UserNameImage, "\u30b3\u30e1\u30f3\u30c8\u3092\uff11\uff10\u6587\u5b57\u4ee5\u4e0b\u3067\u8a18\u5165\u3057\u3066\u4e0b\u3055\u3044")
                        } else {
                            drawVsMessage(UserNameImage, "The comment must be shorter than 10 characters.")
                        }
                    }
                }
            }
        } else if (73 == SequenceStep) {
            b = encodeURIComponent(VsUploadCommentInput);
            if (!b.length) {
                if (Language) {
                    drawVsMessage(UserNameImage, "\u30a8\u30e9\u30fc");
                } else {
                    drawVsMessage(UserNameImage, "Error");
                }
                SequenceStep = 72;
            } else if (0 == InventoryItem[4] || 0 == InventoryItem[5] || 0 == InventoryItem[6] || 0 == InventoryItem[7]) {
                if (Language) {
                    drawVsMessage(UserNameImage, "\u6b66\u5668\u3092\u88c5\u5099\u3057\u3066\u4e0b\u3055\u3044");
                } else {
                    drawVsMessage(UserNameImage, "Equip a weapon.");
                }
                SequenceStep = 72;
            } else {
                antiCheatCheck();
                SaveCode = generateSaveCode(1);
                ///score/ranger_entry.php?a=
                c = FROM_CHAR_CODE(47, 115, 99, 111, 114, 101, 47, 114, 97, 110, 103, 101, 114, 95, 101, 110, 116, 114, 121, 46, 112, 104, 112, 63, 97, 61);
                c += UserCode1;
                //c += CHAR_AND_B_EQUAL + (Language ? "0" : "1");
                c += CHAR_AND_B_EQUAL;
                if (Language) {
                    c += "0";
                } else {
                    c += "1";
                }
                c += CHAR_AND_C_EQUAL + b;
                c += CHAR_AND_D_EQUAL + SaveCode;
                consoleLog(c);
                httpRequest(c);
                SequenceStep++;
            }
        } else {
            if (74 == SequenceStep && RequestResult) {
                if ("ok" == RequestResponse[0]) {
                    UploadError = 100;
                } else if ("err1" == RequestResponse[0]) {
                    UploadError = 1;
                } else if ("err2" == RequestResponse[0]) {
                    UploadError = 2;
                } else if ("err3" == RequestResponse[0]) {
                    UploadError = 3;
                } else if ("err4" == RequestResponse[0]) {
                    UploadError = 4;
                } else if ("err5" == RequestResponse[0]) {
                    UploadError = 5;
                } else {
                    UploadError = 6;
                }
                SequenceStep = 71;
            }
        }
    } else if (60 == SequenceStep) {
        CurrentStage = 0;
        CurrentArea = 1;
        if (SR_TERRAIN.trSet(CurrentStage)) {
            SR_PLAYER.plSet(0, 10, SR_TERRAIN.tr_low_surface[0]);
            SR_PLAYER.plSet(1, 11, SR_TERRAIN.tr_low_surface[1]);
            SR_PLAYER.plSet(2, 12, SR_TERRAIN.tr_low_surface[2]);
            SR_PLAYER.plSet(3, 13, SR_TERRAIN.tr_low_surface[3]);
            SR_PLAYER.plSet(4, 53, SR_TERRAIN.tr_low_surface[0]);
            SR_PLAYER.plSet(5, 52, SR_TERRAIN.tr_low_surface[1]);
            SR_PLAYER.plSet(6, 51, SR_TERRAIN.tr_low_surface[2]);
            SR_PLAYER.plSet(7, 50, SR_TERRAIN.tr_low_surface[3]);
            setPlayerStatus();
            antiCheatCheck();
            for (a = 0; 8 > a; a++) {
                PlayerCurrentLp[a] = PlayerMaxLp[a];
            }
            for (a = 0; 8 > a; a++) {
                PlayerMp[a] = 0;
            }
            PartyGold = 9999999;
            antiCheatSet();
            SR_ENEMY.enReset(1);
            SR_PROJECTILE.pj_last_index = 0;
            SR_INDICATOR.in_last_index = 0;
            SR_DROP.dp_last_index = 0;
            TextFadeTime = SignTouch = TargetEnemyIndex = TargetEnemyTime = TargetEnemyMaxLp = TargetEnemyCurrentLp = SR_DROP.dp_anti_cheat_value = 0;
            SequenceStep++
        }
    } else if (61 == SequenceStep || 62 == SequenceStep || 63 == SequenceStep || 64 == SequenceStep) {
        //for (TrDraw(), 61 == SequenceStep && (SR_PLAYER.N = 1), SR_PLAYER.G(), InMain(), $e(), SR_PLAYER.N = 0, SR_PLAYER.B(), PjDraw(), InDraw(), setPlayerStatus(), 61 == SequenceStep ? (TextFadeTime = srClampA(TextFadeTime + 1, 0, 30), a = srFloor(255 * TextFadeTime / 30), drawLine(0, 110, srFloor(512 * TextFadeTime / 30), 110, 8421504), drawLine(512 - srFloor(512 * TextFadeTime / 30), 143, 512, 143, 8421504), isMouseHoveredCenter(256, 127, 512, 32) && 30 == TextFadeTime ? (Clicked && (SequenceStep++, TextFadeTime = 0), filledRectCentered(256, 127, 512, 32, 8388608), showText(LARGE_TEXT, 256, 128, "FIGHT", 255, 255, 255, 255, 0, 0, 0, 255, 16, 24)) : showText(LARGE_TEXT, 256, 128, "READY", 255, 255, 255, a, 0, 0, 0, a, 16, 24), Ce = 1, b = 110, c = 120, df(UserNameImage, UserName), drawFromImageCentered(UserNameImage, b, c + 0 - 2, UserNameImage.a, 16, 0, 0, UserNameImage.a, 16, a << 24 | 16777215), df(UserPartyNameImage, UserPartyName), drawFromImageCentered(UserPartyNameImage, b, c + 16 - 2, UserPartyNameImage.a, 16, 0, 0, UserPartyNameImage.a, 16, a << 24 | 16777215), b = 402, df(OpponentNameImage, OpponentName), drawFromImageCentered(OpponentNameImage, b, c + 0 - 2, OpponentNameImage.a, 16, 0, 0, OpponentNameImage.a, 16, a << 24 | 16777215), df(OpponentPartyNameImage, OpponentPartyName), drawFromImageCentered(OpponentPartyNameImage, b, c + 16 - 2, OpponentPartyNameImage.a, 16, 0, 0, OpponentPartyNameImage.a, 16, a << 24 | 16777215), Ce = 0) : 62 == SequenceStep ? 0 == PlayerCurrentLp[0] + PlayerCurrentLp[1] + PlayerCurrentLp[2] + PlayerCurrentLp[3] ? (VsResult = 2, SequenceStep++) : 0 == PlayerCurrentLp[4] + PlayerCurrentLp[5] + PlayerCurrentLp[6] + PlayerCurrentLp[7] && (VsResult = 1, SequenceStep++) : 63 == SequenceStep ? (UploadError || (UploadError = 1, c = FROM_CHAR_CODE(47, 115, 99, 111, 114, 101, 47, 114, 97, 110, 103, 101, 114, 95, 118, 115, 46, 112, 104, 112, 63, 97, 61), c += UserCode1, c += CHAR_AND_B_EQUAL + (Language ? "0" : "1"), c += CHAR_AND_C_EQUAL + UserPartyId, c += CHAR_AND_D_EQUAL + OpponentPartyId, 0 != InventoryItem[4] && 0 != InventoryItem[5] && 0 != InventoryItem[6] && 0 != InventoryItem[7] && (c += CHAR_AND_E_EQUAL + vsUploadCode(VsResult)), consoleLog(c), httpRequest(c)), SequenceStep++) : 64 == SequenceStep && (TextFadeTime = srClampA(TextFadeTime + 1, 0, 50), a = srFloor(255 * TextFadeTime / 50), isMouseHoveredCenter(256, 128, 96, 32) && 50 == TextFadeTime && (Clicked && (SequenceStep = 60), filledRectCentered(256, 128, 96, 32, 8388608)), frameRectCentered(256, 128, 96, 32, 0 | srFloor(a / 2) << 16), showText(LARGE_TEXT, 256, 129, "RETRY", 255, 255, 255, a, 0, 0, 0, a, 16, 24), b = 60, c = 72, Ce = 1, drawFromImage(UserNameImage, b, c + 0 - 2, UserNameImage.a, 16, 0, 0, UserNameImage.a, 16, a << 24 | 16777215), Ce = 0, showText(LARGE_TEXT, b + 60, c + 40, 1 == VsResult ? "WIN" : "LOSE", 255, 255, 255, a, 1 == VsResult ? 255 : 0, 0, 1 == VsResult ? 0 : 255, a, 32, 48), RequestResult && ("ok" == RequestResponse[0] ? (textOutputM(LARGE_TEXT, b, c + 64, "" + RequestResponse[1] + " win " + RequestResponse[2] + " lose", 255, 255, 255, a, 0, 0, 0, a, 8, 12), textOutputM(LARGE_TEXT, b, c + 80, "Winning per " + RequestResponse[3] + "%", 255, 255, 255, a, 0, 0, 0, a, 8, 12)) : textOutputM(LARGE_TEXT, b, c + 64, " RANKING ERROR", 255, 255, 255, a, 0, 0, 0, a, 8, 12)), b = 332, Ce = 1, drawFromImage(OpponentNameImage, b, c + 0 - 2, OpponentNameImage.a, 16, 0, 0, OpponentNameImage.a, 16, a << 24 | 16777215), Ce = 0, showText(LARGE_TEXT, b + 60, c + 40, 2 == VsResult ? "WIN" : "LOSE", 255, 255, 255, a, 2 == VsResult ? 255 : 0, 0, 2 == VsResult ? 0 : 255, a, 32, 48), RequestResult && ("ok" == RequestResponse[0] ? (textOutputM(LARGE_TEXT, b, c + 64, "" + RequestResponse[4] + " win " + RequestResponse[5] + " lose", 255, 255, 255, a, 0, 0, 0, a, 8, 12), textOutputM(LARGE_TEXT, b, c + 80, "Winning per " + RequestResponse[6] + "%", 255, 255, 255, a, 0, 0, 0, a, 8, 12)) : textOutputM(LARGE_TEXT, b, c + 64, " RANKING ERROR", 255, 255, 255, a, 0, 0, 0, a, 8, 12))), filledRect(0, 257, 512, 126, [13407305, 9480368, 7241784, 10993609, 11302740, 24586, 7297069, 7297069, 10053120][STAGE_DATA[CurrentStage][CurrentArea][0]]), textOutputM(SMALL_TEXT, 10, 374, CHAR_COPYRIGHT1, 0, 0, 0, 0, 0, 0, 0, 128, 5, 7), showText(LARGE_TEXT, 256, 328, "VS", 255, 255, 255, 255, 0, 0, 0, 255, 16, 24), b = 40, c = 268, drawFromImage(UserNameImage, b, c + 0 - 2, UserNameImage.a, 16, 0, 0, UserNameImage.a, 16, 0), textOutputB(LARGE_TEXT, b, c + 16, "LV " + PartyLv[0], 16777215, 0), textOutputB(LARGE_TEXT, b, c + 16, "        FP " + PartyFp[0], 16777215, 0), df(UserPartyNameBracketImage, "\u300c " + UserPartyName + " \u300d"), drawFromImageCentered(UserPartyNameBracketImage, b + 60, c + 88, UserPartyNameBracketImage.a, 16, 0, 0, UserPartyNameBracketImage.a, 16, 0), b = 206, showText(LARGE_TEXT, b, c + 22, "Rank", 0, 0, 0, 0, 0, 0, 0, 128, 8, 12), showText(LARGE_TEXT, b, c + 60, "" + RANK_NAME[PartyRank[0]], 0, 0, 0, 0, 0, 0, 0, 80, 32, 48), b = 352, drawFromImage(OpponentNameImage, b, c + 0 - 2, OpponentNameImage.a, 16, 0, 0, OpponentNameImage.a, 16, 0), textOutputB(LARGE_TEXT, b, c + 16, "LV " + PartyLv[1], 16777215, 0), textOutputB(LARGE_TEXT, b, c + 16, "        FP " + PartyFp[1], 16777215, 0), df(OpponentPartyNameBracketImage, "\u300c " + OpponentPartyName + " \u300d"), drawFromImageCentered(OpponentPartyNameBracketImage, b + 60, c + 88, OpponentPartyNameBracketImage.a, 16, 0, 0, OpponentPartyNameBracketImage.a, 16, 0), b = 306, showText(LARGE_TEXT, b, c + 22, "Rank", 0, 0, 0, 0, 0, 0, 0, 128, 8, 12), showText(LARGE_TEXT, b, c + 60, "" + RANK_NAME[PartyRank[1]], 0, 0, 0, 0, 0, 0, 0, 80, 32, 48), b = 40, c = 316, a = 0; 8 > a; a++)
        TrDraw();
        if (61 == SequenceStep) {
            SR_PLAYER.pl_vs_ready = 1;
        }
        SR_PLAYER.plMain();
        InMain();
        PjMain();
        SR_PLAYER.pl_vs_ready = 0;
        SR_PLAYER.plDraw();
        PjDraw();
        InDraw();
        setPlayerStatus();
        if (61 == SequenceStep) {
            TextFadeTime = srClampA(TextFadeTime + 1, 0, 30);
            a = srFloor(255 * TextFadeTime / 30);
            drawLine(0, 110, srFloor(512 * TextFadeTime / 30), 110, 8421504);
            drawLine(512 - srFloor(512 * TextFadeTime / 30), 143, 512, 143, 8421504);
            if (isMouseHoveredCenter(256, 127, 512, 32) && 30 == TextFadeTime) {
                if (Clicked) {
                    SequenceStep++;
                    TextFadeTime = 0;
                }
                filledRectCentered(256, 127, 512, 32, 8388608);
                showTextCenter(LARGE_TEXT, 256, 128, "FIGHT", 255, 255, 255, 255, 0, 0, 0, 255, 16, 24);
            } else {
                showTextCenter(LARGE_TEXT, 256, 128, "READY", 255, 255, 255, a, 0, 0, 0, a, 16, 24);
            }
            DisplayMode1 = 1;
            b = 110;
            c = 120;
            drawVsMessage(UserNameImage, UserName);
            //im.a
            drawFromImageCentered(UserNameImage, b, c + 0 - 2, UserNameImage.im_text_width, 16, 0, 0, UserNameImage.im_text_width, 16, a << 24 | 16777215);
            drawVsMessage(UserPartyNameImage, UserPartyName);
            drawFromImageCentered(UserPartyNameImage, b, c + 16 - 2, UserPartyNameImage.im_text_width, 16, 0, 0, UserPartyNameImage.im_text_width, 16, a << 24 | 16777215);
            b = 402;
            drawVsMessage(OpponentNameImage, OpponentName);
            drawFromImageCentered(OpponentNameImage, b, c + 0 - 2, OpponentNameImage.im_text_width, 16, 0, 0, OpponentNameImage.im_text_width, 16, a << 24 | 16777215);
            drawVsMessage(OpponentPartyNameImage, OpponentPartyName);
            drawFromImageCentered(OpponentPartyNameImage, b, c + 16 - 2, OpponentPartyNameImage.im_text_width, 16, 0, 0, OpponentPartyNameImage.im_text_width, 16, a << 24 | 16777215);
            DisplayMode1 = 0;
        } else if (62 == SequenceStep) {
            if (0 == PlayerCurrentLp[0] + PlayerCurrentLp[1] + PlayerCurrentLp[2] + PlayerCurrentLp[3]) {
                VsResult = 2;
                SequenceStep++;
            } else if (0 == PlayerCurrentLp[4] + PlayerCurrentLp[5] + PlayerCurrentLp[6] + PlayerCurrentLp[7]) {
                VsResult = 1;
                SequenceStep++;
            }
        } else if (63 == SequenceStep) {
            if (!UploadError) {
                UploadError = 1;
                c = FROM_CHAR_CODE(47, 115, 99, 111, 114, 101, 47, 114, 97, 110, 103, 101, 114, 95, 118, 115, 46, 112, 104, 112, 63, 97, 61);
                c += UserCode1;
                c += CHAR_AND_B_EQUAL;
                if (Language) {
                    c += "0";
                } else {
                    c += "1";
                }
                c += CHAR_AND_C_EQUAL + UserPartyId;
                c += CHAR_AND_D_EQUAL + OpponentPartyId;
                if (0 != InventoryItem[4] && 0 != InventoryItem[5] && 0 != InventoryItem[6] && 0 != InventoryItem[7]) {
                    c += CHAR_AND_E_EQUAL + vsUploadCode(VsResult);
                }
                consoleLog(c);
                httpRequest(c);
            }
            SequenceStep++;
        } else if (64 == SequenceStep) {
            TextFadeTime = srClampA(TextFadeTime + 1, 0, 50);
            a = srFloor(255 * TextFadeTime / 50);
            if (isMouseHoveredCenter(256, 128, 96, 32) && 50 == TextFadeTime) {
                if (Clicked) {
                    SequenceStep = 60;
                }
                filledRectCentered(256, 128, 96, 32, 8388608);
            }
            frameRectCentered(256, 128, 96, 32, 0 | srFloor(a / 2) << 16);
            showTextCenter(LARGE_TEXT, 256, 129, "RETRY", 255, 255, 255, a, 0, 0, 0, a, 16, 24);
            b = 60;
            c = 72;
            DisplayMode1 = 1;
            //im.a
            drawFromImage(UserNameImage, b, c + 0 - 2, UserNameImage.im_text_width, 16, 0, 0, UserNameImage.im_text_width, 16, a << 24 | 16777215);
            DisplayMode1 = 0;
            //showText(LARGE_TEXT, b + 60, c + 40, 1 == VsResult ? "WIN" : "LOSE", 255, 255, 255, a, 1 == VsResult ? 255 : 0, 0, 1 == VsResult ? 0 : 255, a, 32, 48);
            if (1 == VsResult) {
                showTextCenter(LARGE_TEXT, b + 60, c + 40, "WIN", 255, 255, 255, a, 255, 0, 0, a, 32, 48);
            } else {
                showTextCenter(LARGE_TEXT, b + 60, c + 40, "LOSE", 255, 255, 255, a, 0, 0, 255, a, 32, 48);
            }
            if (RequestResult) {
                if ("ok" == RequestResponse[0]) {
                    showTextTopLeft(LARGE_TEXT, b, c + 64, "" + RequestResponse[1] + " win " + RequestResponse[2] + " lose", 255, 255, 255, a, 0, 0, 0, a, 8, 12);
                    showTextTopLeft(LARGE_TEXT, b, c + 80, "Winning per " + RequestResponse[3] + "%", 255, 255, 255, a, 0, 0, 0, a, 8, 12);
                } else {
                    showTextTopLeft(LARGE_TEXT, b, c + 64, " RANKING ERROR", 255, 255, 255, a, 0, 0, 0, a, 8, 12);
                }
            }
            b = 332;
            DisplayMode1 = 1;
            //im.a
            drawFromImage(OpponentNameImage, b, c + 0 - 2, OpponentNameImage.im_text_width, 16, 0, 0, OpponentNameImage.im_text_width, 16, a << 24 | 16777215);
            DisplayMode1 = 0;
            //showText(LARGE_TEXT, b + 60, c + 40, 2 == VsResult ? "WIN" : "LOSE", 255, 255, 255, a, 2 == VsResult ? 255 : 0, 0, 2 == VsResult ? 0 : 255, a, 32, 48);
            if (2 == VsResult) {
                showTextCenter(LARGE_TEXT, b + 60, c + 40, "WIN", 255, 255, 255, a, 255, 0, 0, a, 32, 48);
            } else {
                showTextCenter(LARGE_TEXT, b + 60, c + 40, "LOSE", 255, 255, 255, a, 0, 0, 255, a, 32, 48);
            }
            if (RequestResult) {
                if ("ok" == RequestResponse[0]) {
                    showTextTopLeft(LARGE_TEXT, b, c + 64, "" + RequestResponse[4] + " win " + RequestResponse[5] + " lose", 255, 255, 255, a, 0, 0, 0, a, 8, 12);
                    showTextTopLeft(LARGE_TEXT, b, c + 80, "Winning per " + RequestResponse[6] + "%", 255, 255, 255, a, 0, 0, 0, a, 8, 12);
                } else {
                    showTextTopLeft(LARGE_TEXT, b, c + 64, " RANKING ERROR", 255, 255, 255, a, 0, 0, 0, a, 8, 12);
                }
            }
        }
        filledRect(0, 257, 512, 126, [13407305, 9480368, 7241784, 10993609, 11302740, 24586, 7297069, 7297069, 10053120][STAGE_DATA[CurrentStage][CurrentArea][0]]);
        showTextTopLeft(SMALL_TEXT, 10, 374, CHAR_COPYRIGHT1, 0, 0, 0, 0, 0, 0, 0, 128, 5, 7);
        showTextCenter(LARGE_TEXT, 256, 328, "VS", 255, 255, 255, 255, 0, 0, 0, 255, 16, 24);
        b = 40;
        c = 268;
        //im.a
        drawFromImage(UserNameImage, b, c + 0 - 2, UserNameImage.im_text_width, 16, 0, 0, UserNameImage.im_text_width, 16, 0);
        showTextSolidTopLeft(LARGE_TEXT, b, c + 16, "LV " + PartyLv[0], 16777215, 0);
        showTextSolidTopLeft(LARGE_TEXT, b, c + 16, "        FP " + PartyFp[0], 16777215, 0);
        drawVsMessage(UserPartyNameBracketImage, "\u300c " + UserPartyName + " \u300d");
        drawFromImageCentered(UserPartyNameBracketImage, b + 60, c + 88, UserPartyNameBracketImage.im_text_width, 16, 0, 0, UserPartyNameBracketImage.im_text_width, 16, 0);
        b = 206;
        showTextCenter(LARGE_TEXT, b, c + 22, "Rank", 0, 0, 0, 0, 0, 0, 0, 128, 8, 12);
        showTextCenter(LARGE_TEXT, b, c + 60, "" + RANK_NAME[PartyRank[0]], 0, 0, 0, 0, 0, 0, 0, 80, 32, 48);
        b = 352;
        drawFromImage(OpponentNameImage, b, c + 0 - 2, OpponentNameImage.im_text_width, 16, 0, 0, OpponentNameImage.im_text_width, 16, 0);
        showTextSolidTopLeft(LARGE_TEXT, b, c + 16, "LV " + PartyLv[1], 16777215, 0);
        showTextSolidTopLeft(LARGE_TEXT, b, c + 16, "        FP " + PartyFp[1], 16777215, 0);
        drawVsMessage(OpponentPartyNameBracketImage, "\u300c " + OpponentPartyName + " \u300d");
        drawFromImageCentered(OpponentPartyNameBracketImage, b + 60, c + 88, OpponentPartyNameBracketImage.im_text_width, 16, 0, 0, OpponentPartyNameBracketImage.im_text_width, 16, 0);
        b = 306;
        showTextCenter(LARGE_TEXT, b, c + 22, "Rank", 0, 0, 0, 0, 0, 0, 0, 128, 8, 12);
        showTextCenter(LARGE_TEXT, b, c + 60, "" + RANK_NAME[PartyRank[1]], 0, 0, 0, 0, 0, 0, 0, 80, 32, 48);
        b = 40;
        c = 316;
        for (a = 0; 8 > a; a++) {
            if (4 <= a) {
                b = 224;
            }
            filledRect(b + 32 * a, c - 12, srFloor(24 * PlayerCurrentLp[a] / PlayerMaxLp[a]), 4, 8388608);
            d = srMax(getItemData(InventoryItem[4 + a], 36), 1);
            e = getItemData(InventoryItem[4 + a], 5);
            if (4 != e && 5 != e && 6 != e) {
                filledRect(b + 32 * a, c - 6, srFloor(23 * PlayerMp[a] / d) + 1, 2, 128);
            }
            filledRect(b + 32 * a, c + 0, 24, 24, 0);
            drawFromImage(PlayerImage, b + 32 * a, c, 24, 24, 24 * getItemData(InventoryItem[4 + a], 5), 0, 24, 24, 16777215);
            colorPortraitWeap(b + 32 * a, c, 24 * getItemData(InventoryItem[4 + a], 5), getItemData(InventoryItem[4 + a], 6))
        }
    }
}

/*
画面下のやつ
*/
function drawMenuCopyRight() {
    filledRect(0, 368, 512, 16, 0);
    showTextSolidCenter(LARGE_TEXT, 256, 376, CHAR_COPYRIGHT2, -1, 6697728)
}

//WINDOW.fff = drawStage;

/*
ステージを描く
*/
function drawStage(a) {
    var b;
    TrDraw();
    if (!CurrentStage && 1 == CurrentArea || 20 == CurrentStage && 1 == CurrentArea || 47 == CurrentStage && 1 == CurrentArea || 77 == CurrentStage && 1 == CurrentArea) {
        drawFromImageCentered(HouseImage, 400, 183, 117, 84, 0, 0, 78, 56, 16777215);
        drawFromImageCentered(HouseImage, 40, 170, 156, 112, 0, 0, 78, 56, 16777215);
        showTextSolidCenter(LARGE_TEXT, 400, 168, "INN", 16777215, 13800762);
        if (!CurrentStage) {
            showTextSolidCenter(LARGE_TEXT, 40, 152, "SHOP", 16777215, 13800762);
        } else if (20 == CurrentStage) {
            showTextSolidCenter(LARGE_TEXT, 40, 152, " COMPO SHOP", 16777215, 13800762);
        } else if (47 == CurrentStage) {
            showTextSolidCenter(LARGE_TEXT, 40, 152, " JUNK SHOP", 16777215, 13800762);
        } else if (77 == CurrentStage) {
            showTextSolidCenter(LARGE_TEXT, 40, 152, " COMPO SHOP", 16777215, 13800762);
        }
        showTextSolidCenter(LARGE_TEXT, 40, 184, "BOOK", 16777215, 13800762);
    }
    if (70 == CurrentStage && 1 == CurrentArea) {
        drawFromImage(ForgetTreeImage, 0, -288, 512, 512, 0, 0, 64, 64, 16777215);
        if (52 == SequenceStep) {
            showTextSolidCenter(LARGE_TEXT, 256, 128, "FORGET", 16777215, 1054740);
            showTextSolidCenter(LARGE_TEXT, 256, 160, "INN", 16777215, 1054740);
            showTextSolidCenter(LARGE_TEXT, 256, 184, "BOOK", 16777215, 1054740);
        }
    }
    if (0 == a) {
        SR_PLAYER.plMain();
        SR_ENEMY.enMain();
        DpMain();
        InMain();
        PjMain();
    }
    b = SR_TERRAIN;
    if (55 != b.tr_stage_id && 89 != b.tr_stage_id && CurrentArea != STAGE_DATA[b.tr_stage_id].length - 1 || 0 == SR_ENEMY.en_last_index) {
        var c;
        if (7 == STAGE_DATA[CurrentStage][CurrentArea][1]) {
            c = 8 * b.tr_low_surface[63] - 16;
        } else {
            c = 8 * b.tr_high_surface[63] - 16;
        }
        drawItem(SignImage, 480, c, 32, 24, 0, 0, 32, 24);
        if (CurrentArea == STAGE_DATA[b.tr_stage_id].length - 1) {
            if (88 == b.tr_stage_id) {
                showTextSolidCenter(SMALL_TEXT, 496, c + 8, "END", 0, -1)
            } else {
                showTextSolidCenter(SMALL_TEXT, 496, c + 8, "MAP", 0, -1)
            }
        } else if (CurrentArea == STAGE_DATA[b.tr_stage_id].length - 2) {
            showTextSolidCenter(SMALL_TEXT, 496, c + 8, "BOSS", 0, -1)
        } else {
            showTextSolidCenter(SMALL_TEXT, 496, c + 8, "NEXT", 0, -1)
        }
    }
    SR_ENEMY.enDraw();
    DpDraw();
    SR_PLAYER.plDraw();
    PjDraw();
    var d = SR_TERRAIN;
    var e;
    var g;
    var h;
    h = GameCanvas;
    switch (d.tr_stage_id) {
        case 15:
        case 16:
        case 30:
        case 31:
        case 32:
        case 33:
        case 66:
        case 67:
        case 68:
        case 69:
            DisplayMode1 = 1;
            DisplayMode2 = 3;
            //im.l
            GameCanvas = StageEffectCanvasImage.im_array;
            b = srRandomRange(1.7, 3.69);
            b = b * b * b * b;
            drawFromImageCentered(ProjectileImage, srRandomRange(0, 512), 256 - b, 256, 32, 96, 0, 16, 16, 150994943);
            e = 131072;
            if (3 > srRandom(100)) {
                for (b = 32768; b < e; b++) {
                    GameCanvas[b] = 250 * GameCanvas[b] >> 8;
                }
            }
            GameCanvas = h;
            for (b = 32768; b < e; b++) {
                //im.l
                d = StageEffectCanvasImage.im_array[b] & 255;
                c = GameCanvas[b] >> 16 & 255;
                h = ((255 - c) * d >> 8) + c;
                c = GameCanvas[b] >> 8 & 255;
                g = ((255 - c) * d >> 8) + c;
                c = GameCanvas[b] & 255;
                c = ((255 - c) * d >> 8) + c;
                GameCanvas[b] = h << 16 | g << 8 | c;
            }
            DisplayMode1 = DisplayMode2 = 0;
            break;
        case 17:
        case 18:
        case 19:
        case 48:
        case 49:
        case 50:
        case 83:
        case 84:
            //im.l
            GameCanvas = StageEffectCanvasImage.im_array;
            e = 131072;
            for (b = 0; b < e; b++) {
                GameCanvas[b] = 255;
            }
            DisplayMode1 = DisplayMode2 = 3;
            for (b = 0; 4 > b; b++) {
                drawFromImageCentered(ProjectileImage, SR_PLAYER.pl_current_joint[b][0].x, SR_PLAYER.pl_current_joint[b][0].y, 80, 80, 33, 1, 14, 14, 3238002687);
            }
            for (b = 0; b < SR_PROJECTILE.pj_last_index; b++) {
                if (1 != SR_PROJECTILE.pj_is_from_enemy[b]) {
                    drawFromImageCentered(ProjectileImage, SR_PROJECTILE.pj_position[b].x, SR_PROJECTILE.pj_position[b].y, 32, 32, 33, 1, 14, 14, 2164260863);
                }
            }
            for (b = 0; 4 > b; b++) {
                if (8 == SR_PLAYER.pl_class[b]) {
                    for (c = 0; 6 > c; c++) {
                        if (0 != SR_PLAYER.pl_ring_move_status[b][c]) {
                            drawFromImageCentered(ProjectileImage, SR_PLAYER.pl_current_joint[b][15 + c].x, SR_PLAYER.pl_current_joint[b][15 + c].y, 32, 32, 33, 1, 14, 14, 2164260863);
                        }
                    }
                }
            }
            for (b = 0; b < SR_DROP.dp_last_index; b++) {
                drawFromImageCentered(ProjectileImage, SR_DROP.dp_position[b].x, SR_DROP.dp_position[b].y - 6, 32, 32, 33, 1, 14, 14, 4294967295);
            }
            drawFromImageCentered(ProjectileImage, MouseX1, MouseY1, 80, 80, 33, 1, 14, 14, 3238002687);
            GameCanvas = h;
            DisplayMode1 = 1;
            for (b = 0; b < e; b++) {
                //im.l
                d = StageEffectCanvasImage.im_array[b];
                if (255 == d) {
                    GameCanvas[b] = 251658240;
                } else {
                    c = GameCanvas[b] >> 16 & 255;
                    h = (-c * d >> 8) + c;
                    c = GameCanvas[b] >> 8 & 255;
                    g = (-c * d >> 8) + c;
                    c = GameCanvas[b] & 255;
                    c = (-c * d >> 8) + c;
                    GameCanvas[b] = h << 16 | g << 8 | c;
                }
            }
            DisplayMode1 = DisplayMode2 = 0;
            break;
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 40:
        case 41:
        case 43:
            b = 1 * TimeDesertHaze & 511;
            for (g = 0; 256 > g; g++) {
                c = 512 * g;
                h = ~~(4 * AngleArray[b][1] + .5);
                for (e = 0; 512 > e; e++) {
                    //im.l
                    StageEffectCanvasImage.im_array[c + e] = GameCanvas[c + srClampA(e + h, 0, 511)];
                }
                b = b + 6 & 511
            }
            e = 131072;
            for (c = 0; c < e; c++) {
                //im.l
                GameCanvas[c] = StageEffectCanvasImage.im_array[c];
            }
            break;
        case 51:
        case 52:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
            e = 1;
            if (57 == d.tr_stage_id) {
                e = 2;
            } else if (58 == d.tr_stage_id) {
                e = 2;
            } else if (59 == d.tr_stage_id) {
                e = 2;
            } else if (60 == d.tr_stage_id) {
                e = 3;
            } else if (61 == d.tr_stage_id) {
                e = 3;
            }
            for (b = 0; b < e; b++) {
                //im.l
                StageEffectCanvasImage.im_array[srFloor(srRandom(24576))] = 1;
            }
            for (b = 114687; 0 <= b; b--) {
                if (1 == StageEffectCanvasImage.im_array[b]) {
                    //im.a
                    g = SR_TERRAIN.tr_data[b >> 12][(b & 511) >> 3];
                    if (-1 == g || 0 == g && 3 > (b & 7) && 3 > (b >> 9 & 7) || 2 == g && 4 < (b & 7) && 3 > (b >> 9 & 7)) {
                        //!(50 > srRandom(100)) && (c = 57 == d.c || 58 == d.c || 61 == d.c ? b + 512 + srFloor(srRandom(4)) - 2 : b + 512 + srFloor(srRandom(3)) - 1, 1 != StageEffectCanvasImage.l[c] && (g = SR_TERRAIN.a[c >> 12][(c & 511) >> 3], -1 == g || 0 == g && 3 > (c & 7) && 3 > (c >> 9 & 7) || 2 == g && 4 < (c & 7) && 3 > (c >> 9 & 7))) && (StageEffectCanvasImage.l[c] = StageEffectCanvasImage.l[b], StageEffectCanvasImage.l[b] = 0);
                        if (50 <= srRandom(100)) {
                            if (57 == d.tr_stage_id || 58 == d.tr_stage_id || 61 == d.tr_stage_id) {
                                c = b + 512 + srFloor(srRandom(4)) - 2;
                            } else {
                                c = b + 512 + srFloor(srRandom(3)) - 1;
                            }
                            //im.l
                            if (1 != StageEffectCanvasImage.im_array[c]) {
                                //im.a
                                g = SR_TERRAIN.tr_data[c >> 12][(c & 511) >> 3];
                                if (-1 == g || 0 == g && 3 > (c & 7) && 3 > (c >> 9 & 7) || 2 == g && 4 < (c & 7) && 3 > (c >> 9 & 7)) {
                                    //im.l
                                    StageEffectCanvasImage.im_array[c] = StageEffectCanvasImage.im_array[b];
                                    StageEffectCanvasImage.im_array[b] = 0;
                                }
                            }

                        }
                    } else {
                        //im.l
                        StageEffectCanvasImage.im_array[b] = 0;
                    }
                }
            }
            //im.l
            GameCanvas = StageEffectCanvasImage.im_array;
            for (b = 0; 4 > b; b++) {
                if (0 != PlayerCurrentLp[b]) {
                    filledRectCentered(SR_PLAYER.pl_current_joint[b][0].x, SR_PLAYER.pl_current_joint[b][0].y, 3, 3, 0);
                    filledRectCentered(SR_PLAYER.pl_current_joint[b][9].x, SR_PLAYER.pl_current_joint[b][9].y, 1, 1, 0);
                    filledRectCentered(SR_PLAYER.pl_current_joint[b][10].x, SR_PLAYER.pl_current_joint[b][10].y, 1, 1, 0);
                }
            }
            for (b = 0; b < SR_PROJECTILE.pj_last_index; b++) {
                if (1 == SR_PROJECTILE.pj_type[b]) {
                    filledRectCentered(SR_PROJECTILE.pj_position[b].x, SR_PROJECTILE.pj_position[b].y, 3, 3, 0);
                }
            }
            GameCanvas = h;
            for (b = 114687; 0 <= b; b--) {
                //im.l
                if (1 == StageEffectCanvasImage.im_array[b]) {
                    GameCanvas[b] = 15266040
                }
            }
    }
    InDraw();
    DisplayMode1 = 1;
    filledRect(4, 4, 8 * (STAGE_NAME[CurrentStage].length + 6) + 8, 20, 2151694400);
    DisplayMode1 = 0;
    if (!CurrentStage && 1 == CurrentArea || 20 == CurrentStage && 1 == CurrentArea || 47 == CurrentStage && 1 == CurrentArea || 70 == CurrentStage && 1 == CurrentArea || 77 == CurrentStage && 1 == CurrentArea) {
        showTextSolidTopLeft(LARGE_TEXT, 8, 8, STAGE_NAME[CurrentStage], 16777215, 0);
    } else if (CurrentArea + 1 == STAGE_DATA[CurrentStage].length) {
        showTextSolidTopLeft(LARGE_TEXT, 8, 8, STAGE_NAME[CurrentStage] + ": BOSS", 16777215, 0);
    } else {
        showTextSolidTopLeft(LARGE_TEXT, 8, 8, STAGE_NAME[CurrentStage] + ": " + (CurrentArea + 1), 16777215, 0);
    }
    DisplayMode1 = 1;
    filledRect(364, 4, 56, 20, 2151694400);
    DisplayMode1 = 0;
    showTextSolidTopLeft(LARGE_TEXT, 368, 8, "Option", 16777215, 0);
    DisplayMode1 = 1;
    filledRect(428, 4, 80, 20, 2151694400);
    DisplayMode1 = 0;
    showTextSolidTopLeft(LARGE_TEXT, 432, 8, "World Map", 16777215, 0);
    //if (0 < TargetEnemyTime && (0 == a && TargetEnemyTime--, filledRect(196, 10, 120, 12, 3158064), filledRect(196, 10, srFloor(120 * TargetEnemyCurrentLp / TargetEnemyMaxLp), 12, 6291456), 0 < (StageOpenData[CurrentStage] & STAGE_BOOKED))) {
    if (0 < TargetEnemyTime) {
        if (0 == a) {
            TargetEnemyTime--;
        }
        filledRect(196, 10, 120, 12, 3158064);
        filledRect(196, 10, srFloor(120 * TargetEnemyCurrentLp / TargetEnemyMaxLp), 12, 6291456);
        if (0 < (StageOpenData[CurrentStage] & STAGE_BOOKED)) {
            showTextSolidCenter(SMALL_TEXT, 256, 16, "" + TargetEnemyCurrentLp + "/" + TargetEnemyMaxLp, 16777215, 0);
            EnDrawIcon(TargetEnemyIndex, 206, 33, 1);
            showTextSolidTopLeft(SMALL_TEXT, 216, 25, "DROP", 16777215, 0);
            for (b = a = 0; 6 > a; a += 2) {
                c = ENEMY_DATA[TargetEnemyIndex][ENEMY_DROP_FIRST + a];
                if (0 != c) {
                    DisplayMode2 = 2;
                    drawFromImage(SmallItemImage, 236 + 12 * b, 23, 12, 12, 12 * getItemData(c, 3), 0, 12, 12, getItemData(c, 6));
                    DisplayMode2 = 0;
                    b++;
                }
            }
            a = enDeath(SR_ENEMY, TargetEnemyIndex, 1);
            showTextSolidTopLeft(SMALL_TEXT, 276, 25, "EXP " + a, 16777215, 0)
        }
    }
}

//WINDOW.fff = setPlayerStatus;

function setPlayerStatus() {
    var a, b;
    antiCheatCheck();
    PartyFp[0] = PartyLv[0];
    PartyFp[1] = PartyLv[1];
    for (a = 0; 4 > a; a++) {
        PartyFp[0] += 2 * getItemData(InventoryItem[4 + a], 1) + getItemData(InventoryCompo1[4 + a], 1) + getItemData(InventoryCompo2[4 + a], 1);
    }
    for (a = 4; 8 > a; a++) {
        PartyFp[1] += 2 * getItemData(InventoryItem[4 + a], 1) + getItemData(InventoryCompo1[4 + a], 1) + getItemData(InventoryCompo2[4 + a], 1);
    }
    PartyRank[0] = srMin(srFloor((PartyFp[0] - 1) / 20), 9);
    PartyRank[1] = srMin(srFloor((PartyFp[1] - 1) / 20), 9);
    //var c = 1 != GameMode ? 4 : 8;
    var c;
    if (1 != GameMode) {
        c = 4;
    } else {
        c = 8;
    }
    for (a = 0; a < c; a++) {
        PlayerStr[a] = 0 + PlayerSpStr[a];
        PlayerDex[a] = 0 + PlayerSpDex[a];
        PlayerMag[a] = 0 + PlayerSpMag[a];
        if (checkInventoryCompo(4 + a, 2)) {
            PlayerStr[a] += getInventoryCompo(4 + a, 8);
        }
        if (checkInventoryCompo(4 + a, 3)) {
            PlayerDex[a] += getInventoryCompo(4 + a, 8);
        }
        if (checkInventoryCompo(4 + a, 4)) {
            PlayerMag[a] += getInventoryCompo(4 + a, 8);
        }
        if (checkInventoryCompo(4 + a, 5)) {
            PlayerStr[a] += getInventoryCompo(4 + a, 8);
            PlayerDex[a] += getInventoryCompo(4 + a, 8);
            PlayerMag[a] += getInventoryCompo(4 + a, 8);
        }
        b = getItemData(InventoryItem[4 + a], 10);
        var d = getItemData(InventoryItem[4 + a], 11);
        var e = getItemData(InventoryItem[4 + a], 14);
        var g = getItemData(InventoryItem[4 + a], 15);
        var h = getItemData(InventoryItem[4 + a], 16);
        if (1 == PlayerClass[a]) {
            PlayerMinAt[a] = b + srFloor(PlayerStr[a] / 2);
            PlayerMaxAt[a] = d + srFloor(PlayerStr[a] / 2);
            PlayerMinAgi[a] = srMin(e, srMax(e - PlayerDex[a], 5));
            PlayerMaxAgi[a] = srMin(g, srMax(g - PlayerDex[a], 10));
            PlayerAttackRange[a] = h;
            PlayerMaxLp[a] = 50 + 10 * PlayerSpLp[a] + 4 * PlayerStr[a] + 3 * PlayerDex[a] + 2 * PlayerMag[a];
        } else if (2 == PlayerClass[a]) {
            PlayerMaxAt[a] = d + PlayerStr[a];
            PlayerMinAt[a] = srMin(b + PlayerDex[a], PlayerMaxAt[a]);
            PlayerMinAgi[a] = e;
            PlayerMaxAgi[a] = g;
            PlayerAttackRange[a] = h;
            if (checkInventoryCompo(4 + a, 22)) {
                PlayerAttackRange[a] += getInventoryCompo(4 + a, 8);
            }
            if (checkInventoryCompo(4 + a, 45)) {
                PlayerAttackRange[a] += getInventoryCompo(4 + a, 9);
            }
            PlayerMaxLp[a] = 50 + 10 * PlayerSpLp[a] + 4 * PlayerStr[a] + 4 * PlayerDex[a] + 2 * PlayerMag[a];
        } else if (3 == PlayerClass[a]) {
            PlayerMinAt[a] = b + srFloor(PlayerDex[a] / 4);
            PlayerMaxAt[a] = d + srFloor(PlayerDex[a] / 3);
            PlayerMinAgi[a] = e;
            PlayerMaxAgi[a] = g;
            PlayerAttackRange[a] = h + 2 * PlayerStr[a];
            if (checkInventoryCompo(4 + a, 23)) {
                PlayerAttackRange[a] += getInventoryCompo(4 + a, 8);
            }
            PlayerMaxLp[a] = 50 + 8 * PlayerSpLp[a] + 2 * PlayerStr[a] + 3 * PlayerDex[a] + 2 * PlayerMag[a];
        } else if (4 == PlayerClass[a]) {
            PlayerMinAt[a] = b + srFloor(PlayerMag[a] / 4);
            PlayerMaxAt[a] = d + srFloor(PlayerMag[a] / 3);
            PlayerMinAgi[a] = srMax(e - PlayerDex[a], 50);
            PlayerMaxAgi[a] = srMax(g - PlayerDex[a], 60);
            PlayerAttackRange[a] = h + 2 * PlayerStr[a];
            if (checkInventoryCompo(4 + a, 23)) {
                PlayerAttackRange[a] += getInventoryCompo(4 + a, 8);
            }
            PlayerMaxLp[a] = 50 + 8 * PlayerSpLp[a] + 2 * PlayerStr[a] + 2 * PlayerDex[a] + 2 * PlayerMag[a];
        } else if (5 == PlayerClass[a]) {
            PlayerMinAt[a] = b;
            PlayerMaxAt[a] = d;
            PlayerMinAgi[a] = e;
            PlayerMaxAgi[a] = g;
            PlayerAttackRange[a] = h + 2 * PlayerMag[a];
            if (checkInventoryCompo(4 + a, 23)) {
                PlayerAttackRange[a] += getInventoryCompo(4 + a, 8);
            }
            PlayerMaxLp[a] = 50 + 8 * PlayerSpLp[a] + 2 * PlayerStr[a] + 2 * PlayerDex[a] + 2 * PlayerMag[a];
        } else if (6 == PlayerClass[a]) {
            PlayerMinAt[a] = b + srFloor(b * PlayerStr[a] / 50);
            PlayerMaxAt[a] = d + srFloor(d * PlayerStr[a] / 50);
            PlayerMinAgi[a] = srMax(srFloor(50 * e / (PlayerDex[a] + 50)), 5);
            PlayerMaxAgi[a] = srMax(srFloor(50 * g / (PlayerDex[a] + 50)), 10);
            PlayerAttackRange[a] = h;
            if (checkInventoryCompo(4 + a, 23)) {
                PlayerAttackRange[a] += getInventoryCompo(4 + a, 8);
            }
            PlayerMaxLp[a] = 50 + 8 * PlayerSpLp[a] + 2 * PlayerStr[a] + 2 * PlayerDex[a] + 2 * PlayerMag[a];
        } else if (7 == PlayerClass[a]) {
            PlayerMinAt[a] = b + srFloor(PlayerStr[a] / 2);
            PlayerMaxAt[a] = d + srFloor(PlayerStr[a] / 2);
            PlayerMinAgi[a] = e;
            PlayerMaxAgi[a] = g;
            PlayerAttackRange[a] = h;
            PlayerMaxLp[a] = 50 + 10 * PlayerSpLp[a] + 3 * PlayerStr[a] + 3 * PlayerDex[a] + 2 * PlayerMag[a];
        } else if (8 == PlayerClass[a]) {
            PlayerMinAt[a] = b + srFloor(PlayerStr[a] / 4);
            PlayerMaxAt[a] = d + srFloor(PlayerStr[a] / 3);
            PlayerMinAgi[a] = e;
            PlayerMaxAgi[a] = g;
            PlayerAttackRange[a] = h;
            if (checkInventoryCompo(4 + a, 23)) {
                PlayerAttackRange[a] += getInventoryCompo(4 + a, 8);
            }
            PlayerMaxLp[a] = 50 + 10 * PlayerSpLp[a] + 4 * PlayerStr[a] + 2 * PlayerDex[a] + 2 * PlayerMag[a];
        }
        if (checkInventoryCompo(4 + a, 1)) {
            PlayerMaxLp[a] += getInventoryCompo(4 + a, 8);
        }
        if (checkInventoryCompo(4 + a, 32)) {
            PlayerMaxLp[a] += srFloor(getInventoryCompo(4 + a, 8) * PlayerMaxLp[a] / 100);
        }
        if (checkInventoryCompo(4 + a, 47)) {
            PlayerMaxLp[a] += getInventoryCompo(4 + a, 9);
        }
        if (1 == getItemData(InventoryItem[4 + a], 5) || 2 == getItemData(InventoryItem[4 + a], 5) || 3 == getItemData(InventoryItem[4 + a], 5) || 7 == getItemData(InventoryItem[4 + a], 5) || 8 == getItemData(InventoryItem[4 + a], 5)) {
            if (checkInventoryCompo(4 + a, 6)) {
                PlayerMinAt[a] += getInventoryCompo(4 + a, 8);
                PlayerMaxAt[a] += getInventoryCompo(4 + a, 9);
            }
            if (checkInventoryCompo(4 + a, 7)) {
                PlayerMinAt[a] += srFloor(getInventoryCompo(4 + a, 8) * PlayerMinAt[a] / 100);
                PlayerMaxAt[a] += srFloor(getInventoryCompo(4 + a, 8) * PlayerMaxAt[a] / 100);
            }
            if (checkInventoryCompo(4 + a, 45)) {
                PlayerMinAt[a] += srFloor(getInventoryCompo(4 + a, 8) * PlayerMinAt[a] / 100);
                PlayerMaxAt[a] += srFloor(getInventoryCompo(4 + a, 8) * PlayerMaxAt[a] / 100);
            }
        } else if (4 == getItemData(InventoryItem[4 + a], 5) || 5 == getItemData(InventoryItem[4 + a], 5)) {
            if (checkInventoryCompo(4 + a, 13)) {
                PlayerMinAt[a] += getInventoryCompo(4 + a, 8);
                PlayerMaxAt[a] += getInventoryCompo(4 + a, 9);
            }
            if (checkInventoryCompo(4 + a, 15)) {
                PlayerMinAt[a] += getInventoryCompo(4 + a, 8);
                PlayerMaxAt[a] += getInventoryCompo(4 + a, 9);
            }
            if (checkInventoryCompo(4 + a, 17)) {
                PlayerMinAt[a] += getInventoryCompo(4 + a, 8);
                PlayerMaxAt[a] += getInventoryCompo(4 + a, 9);
            }
            if (checkInventoryCompo(4 + a, 18)) {
                PlayerMinAt[a] += getInventoryCompo(4 + a, 8);
                PlayerMaxAt[a] += getInventoryCompo(4 + a, 9);
            }
        } else if (6 == getItemData(InventoryItem[4 + a], 5)) {
            if (checkInventoryCompo(4 + a, 6)) {
                PlayerMinAt[a] += getInventoryCompo(4 + a, 8);
                PlayerMaxAt[a] += getInventoryCompo(4 + a, 9);
            }
            if (checkInventoryCompo(4 + a, 7)) {
                PlayerMinAt[a] += srFloor(getInventoryCompo(4 + a, 8) * PlayerMinAt[a] / 100);
                PlayerMaxAt[a] += srFloor(getInventoryCompo(4 + a, 8) * PlayerMaxAt[a] / 100);
            }
            if (0 == getItemData(InventoryItem[4 + a], 37)) {
                if (checkInventoryCompo(4 + a, 13)) {
                    PlayerMinAt[a] += getInventoryCompo(4 + a, 8);
                    PlayerMaxAt[a] += getInventoryCompo(4 + a, 9);
                }
                if (checkInventoryCompo(4 + a, 15)) {
                    PlayerMinAt[a] += getInventoryCompo(4 + a, 8);
                    PlayerMaxAt[a] += getInventoryCompo(4 + a, 9);
                }
                if (checkInventoryCompo(4 + a, 17)) {
                    PlayerMinAt[a] += getInventoryCompo(4 + a, 8);
                    PlayerMaxAt[a] += getInventoryCompo(4 + a, 9);
                }
                if (checkInventoryCompo(4 + a, 18)) {
                    PlayerMinAt[a] += getInventoryCompo(4 + a, 8);
                    PlayerMaxAt[a] += getInventoryCompo(4 + a, 9);
                }
            }
        }
        if (checkInventoryCompo(4 + a, 21)) {
            b = getInventoryCompo(4 + a, 8);
            PlayerMinAgi[a] -= srFloor(PlayerMinAgi[a] * b / 100);
            PlayerMaxAgi[a] -= srFloor(PlayerMaxAgi[a] * b / 100);
        }
        PlayerMinAt[a] += srFloor(PlayerMinAt[a] * PlayerStrAura[a] / 100);
        PlayerMaxAt[a] += srFloor(PlayerMaxAt[a] * PlayerStrAura[a] / 100);
        if (1 == GameMode) {
            PlayerMaxLp[a] *= [1, 5, 5, 5, 5, 3, 4, 5, 5][PlayerClass[a]];
            PlayerMaxLp[a] *= PartyRank[1] + 1;
        }
        PlayerCurrentLp[a] = srClampA(PlayerCurrentLp[a], 0, PlayerMaxLp[a])
    }
    for (a = 0; a < c; a++) {
        PlayerStrAura[a] = 0;
        PlayerDexAura[a] = 0;
        PlayerMagAura[a] = 0;
    }
    for (a = 0; a < c; a++) {
        if (5 == PlayerClass[a] && 5 == getItemData(InventoryItem[4 + a], 5) && 0 != PlayerCurrentLp[a]) {
            //for (d = srFloor(srFloor(SR_PLAYER.a[a][9].x + SR_PLAYER.a[a][10].x) / 2), e = srFloor(srFloor(SR_PLAYER.a[a][9].y + SR_PLAYER.a[a][10].y) / 2), b = a >> 2 << 2; b < (a >> 2 << 2) + 4; b++) {
            d = srFloor(srFloor(SR_PLAYER.pl_current_joint[a][9].x + SR_PLAYER.pl_current_joint[a][10].x) / 2);
            e = srFloor(srFloor(SR_PLAYER.pl_current_joint[a][9].y + SR_PLAYER.pl_current_joint[a][10].y) / 2);
            for (b = a >> 2 << 2; b < (a >> 2 << 2) + 4; b++) {
                if (0 != PlayerCurrentLp[b]) {
                    g = srFloor(srFloor(SR_PLAYER.pl_current_joint[b][9].y + SR_PLAYER.pl_current_joint[b][10].y) / 2);
                    if (srAbs(d - srFloor(srFloor(SR_PLAYER.pl_current_joint[b][9].x + SR_PLAYER.pl_current_joint[b][10].x) / 2)) < PlayerAttackRange[a] && srAbs(e - g) < PlayerAttackRange[a]) {
                        PlayerStrAura[b] += PlayerStr[a];
                        PlayerDexAura[b] += PlayerDex[a];
                        PlayerMagAura[b] += PlayerMag[a];
                    }
                }
            }
        }
    }
    for (a = 0; a < c; a++) {
        if (0 != PlayerCurrentLp[a] && checkInventoryCompo(4 + a, 28)) {
            PlayerStrAura[a] += getInventoryCompo(4 + a, 8);
        }
    }
    antiCheatSet()
}

//WINDOW.fff = drawUi;

/*
uiをかく
*/
function drawUi(a) {
    var b, c, d, e, g;
    if ((LeftClickIsUp || Clicked) && 256 <= MouseY1) {
        MouseUp = !0;
    } else if ((LeftClickIsUp || Clicked) && 256 > MouseY1) {
        MouseUp = !1;
    }
    filledRect(0, 257, 512, 126, [13407305, 9480368, 7241784, 7630870, 11302740, 13599032, 10993609, 6322320, 1921195, 10053120, 6714227, 6313296, 6313296][STAGE_DATA[CurrentStage][CurrentArea][0]]);
    showTextTopLeft(SMALL_TEXT, 10, 374, CHAR_COPYRIGHT1, 0, 0, 0, 0, 0, 0, 0, 128, 5, 7);
    e = 10;
    g = 260;
    var h = 4753E3;
    c = 9999999;
    if (98 > PartyLv[0]) {
        h = 0;
        for (b = 1; b < PartyLv[0]; b++) {
            h += 1E3 * b;
        }
        c = h + 1E3 * b
    }
    setPlayerStatus();
    if (2 == a) {
        antiCheatCheck();
        for (b = 0; 4 > b; b++) {
            PlayerStrAura[b] = 0;
            PlayerDexAura[b] = 0;
            PlayerMagAura[b] = 0;
        }
        antiCheatSet()
    }
    if (4 > SelectedPanel) {
        b = "LP  " + PlayerCurrentLp[SelectedPanel] + "/" + PlayerMaxLp[SelectedPanel];
        d = "STR " + PlayerStr[SelectedPanel];
        var q = "DEX " + PlayerDex[SelectedPanel];
        var m = "MAG " + PlayerMag[SelectedPanel];
        showTextSolidTopLeft(LARGE_TEXT, e, g + 0, CLASS_NAME[getItemData(InventoryItem[4 + SelectedPanel], 5)], 16777215, 0);
        showTextSolidTopLeft(LARGE_TEXT, e, g + 16, b, 16777215, 0);
        if (SR_PLAYER.pl_class[SelectedPanel] != PLAYER_CLASS_DEAD) {
            showTextSolidTopLeft(LARGE_TEXT, e, g + 28, d, 16777215, 0);
            showTextSolidTopLeft(LARGE_TEXT, e, g + 40, q, 16777215, 0);
            showTextSolidTopLeft(LARGE_TEXT, e, g + 52, m, 16777215, 0);
            showTextSolidTopLeft(SMALL_TEXT, e, g + 30, "              AT ", -1, 0);
            showTextSolidTopLeft(SMALL_TEXT, e, g + 42, "              AGI ", -1, 0);
            showTextSolidTopLeft(SMALL_TEXT, e, g + 54, "              RANGE ", -1, 0);
            showTextSolidTopLeft(SMALL_TEXT, e, g + 30, "                 " + PlayerMinAt[SelectedPanel] + "-" + PlayerMaxAt[SelectedPanel], 0, -1);
            showTextSolidTopLeft(SMALL_TEXT, e, g + 42, "                  " + PlayerMinAgi[SelectedPanel] + "-" + PlayerMaxAgi[SelectedPanel], 0, -1);
            showTextSolidTopLeft(SMALL_TEXT, e, g + 54, "                    " + PlayerAttackRange[SelectedPanel], 0, -1);
            if (5 == PlayerClass[SelectedPanel]) {
                showTextSolidTopLeft(SMALL_TEXT, e, g + 66, "AURA          AURA", -1, 0);
                showTextSolidTopLeft(SMALL_TEXT, e, g + 66, "     (AT)" + PlayerStr[SelectedPanel] + "%", 0, -1);
                showTextSolidTopLeft(SMALL_TEXT, e, g + 66, "                   (DF)" + PlayerDex[SelectedPanel] / 5, 0, -1);
            } else if (7 == PlayerClass[SelectedPanel]) {
                showTextSolidTopLeft(SMALL_TEXT, e, g + 66, "              BULLET", -1, 0);
                showTextSolidTopLeft(SMALL_TEXT, e, g + 66, "                     +" + PlayerDex[SelectedPanel] / 5, 0, -1);
            } else if (8 == PlayerClass[SelectedPanel]) {
                var l;
                if (10 > PlayerDex[SelectedPanel]) {
                    l = 0 + (PlayerDex[SelectedPanel] - 0) / 10;
                } else if (30 > PlayerDex[SelectedPanel]) {
                    l = 1 + (PlayerDex[SelectedPanel] - 10) / 20;
                } else if (60 > PlayerDex[SelectedPanel]) {
                    l = 2 + (PlayerDex[SelectedPanel] - 30) / 30;
                } else if (100 > PlayerDex[SelectedPanel]) {
                    l = 3 + (PlayerDex[SelectedPanel] - 60) / 40;
                } else {
                    l = 4;
                }
                showTextSolidTopLeft(SMALL_TEXT, e, g + 66, "              RING", -1, 0);
                showTextSolidTopLeft(SMALL_TEXT, e, g + 66, "                   +" + ("" + l).substring(0, srMin(("" + l).length, 5)), 0, -1)
            }
        }
        showTextSolidTopLeft(LARGE_TEXT, e, g + 76, "LV  " + PartyLv[0], 16777215, 0);
        showTextSolidTopLeft(LARGE_TEXT, e, g + 76, "        SP " + PlayerSp[SelectedPanel], 16777215, 0);
        showTextSolidTopLeft(LARGE_TEXT, e, g + 88, "EXP " + PartyExp + "(" + srFloor(100 * (PartyExp - h) / (c - h)) + "%)", 16777215, 0);
        showTextSolidTopLeft(LARGE_TEXT, e, g + 100, "$$$ " + PartyGold, 16777215, 0);
        showTextSolidTopLeft(SMALL_TEXT, e + 105, g + 102, "FP " + PartyFp[0], -1, 0);
        if (SR_PLAYER.pl_class[SelectedPanel] == PLAYER_CLASS_DEAD) {
            h = srMax(srFloor(PartyGold / 10), 10 * PartyLv[0]);
            b = "Revival $ " + h;
            showTextSolidTopLeft(LARGE_TEXT, e, g + 40, b, 8421504, 0);
            if (isMouseHovered(e, g + 40, 8 * b.length, 12) && MouseUp) {
                if (h <= PartyGold && Clicked && 0 != PlayerCurrentLp[0] + PlayerCurrentLp[1] + PlayerCurrentLp[2] + PlayerCurrentLp[3]) {
                    antiCheatCheck();
                    PlayerCurrentLp[SelectedPanel] += srFloor(PlayerMaxLp[SelectedPanel] / 4);
                    PartyGold -= h;
                    SR_PLAYER.plSet(SelectedPanel, srFloor(SR_PLAYER.pl_current_joint[SelectedPanel][0].x / 8), srFloor(SR_PLAYER.pl_current_joint[SelectedPanel][0].y / 8));
                    antiCheatSet();
                }
                showTextSolidTopLeft(LARGE_TEXT, e, g + 40, b, 16711680, 0)
            }
        } else if (0 < PlayerSp[SelectedPanel]) {
            h = Clicked;
            antiCheatCheck();
            if (isMouseHovered(e, g + 16, 8 * b.length + 16, 12) && MouseUp) {
                if (h) {
                    PlayerSpLp[SelectedPanel]++;
                    PlayerSp[SelectedPanel]--;
                }
                showTextSolidTopLeft(LARGE_TEXT, e, g + 16, b, 16711680, 0);
            } else if (isMouseHovered(e, g + 28, 8 * d.length + 16, 12) && MouseUp) {
                if (h) {
                    PlayerSpStr[SelectedPanel]++;
                    PlayerSp[SelectedPanel]--;
                }
                showTextSolidTopLeft(LARGE_TEXT, e, g + 28, d, 16711680, 0);
            } else if (isMouseHovered(e, g + 40, 8 * q.length + 16, 12) && MouseUp) {
                if (h) {
                    PlayerSpDex[SelectedPanel]++;
                    PlayerSp[SelectedPanel]--;
                }
                showTextSolidTopLeft(LARGE_TEXT, e, g + 40, q, 16711680, 0);
            } else if (isMouseHovered(e, g + 52, 8 * m.length + 16, 12) && MouseUp) {
                if (h) {
                    PlayerSpMag[SelectedPanel]++;
                    PlayerSp[SelectedPanel]--;
                }
                showTextSolidTopLeft(LARGE_TEXT, e, g + 52, m, 16711680, 0);
            }
            antiCheatSet();
            showTextSolidTopLeft(LARGE_TEXT, e + 8 * b.length, g + 16, " +", 16711680, 0);
            showTextSolidTopLeft(LARGE_TEXT, e + 8 * d.length, g + 28, " +", 16711680, 0);
            showTextSolidTopLeft(LARGE_TEXT, e + 8 * q.length, g + 40, " +", 16711680, 0);
            showTextSolidTopLeft(LARGE_TEXT, e + 8 * m.length, g + 52, " +", 16711680, 0)
        }
    } else {
        m = InventoryItem[SelectedPanel];
        if (8 <= SelectedPanel && 11 >= SelectedPanel) {
            m = InventoryCompo1[4 + SelectedPanel - 8];
        }
        if (12 <= SelectedPanel && 15 >= SelectedPanel) {
            m = InventoryCompo2[4 + SelectedPanel - 12];
        }
        showTextSolidSpacingTopLeft(e, g + 0, ITEM_DATA[m][0] + " " + (ITEM_DATA[m][1] ? ITEM_DATA[m][1] : ""), 16777215, 0, -1);
        if (0 != m && 59 != m) {
            b = getItemData(m, 5);
            if (9 == b) {
                showTextSolidTopLeft(LARGE_TEXT, e, g + 16, "Compo Item", -1, 0);
                showTextSolidSpacingTopLeft(e, g + 32, ITEM_DATA[m][10], 16777215, 0, -1);
                showTextSolidSpacingTopLeft(e, g + 44, ITEM_DATA[m][11], 16777215, 0, -1);
            } else {
                showTextSolidTopLeft(LARGE_TEXT, e, g + 16, "AT " + ITEM_DATA[m][10] + "-" + ITEM_DATA[m][11], 16777215, 0);
                showTextSolidTopLeft(LARGE_TEXT, e, g + 28, "AGI " + ITEM_DATA[m][14] + "-" + ITEM_DATA[m][15], 16777215, 0);
                showTextSolidTopLeft(LARGE_TEXT, e, g + 40, "RANGE " + ITEM_DATA[m][16], 16777215, 0);
                c = getItemData(m, 34);
                d = getItemData(m, 35);
                h = srMax(getItemData(m, 36), 0);
                q = getItemData(m, 39);
                m = getItemData(m, 40);
                if (1 == c || 2 == c || 3 == c || 4 == c || 5 == c) {
                    if (checkInventoryCompo(SelectedPanel, 13)) {
                        q += getInventoryCompo(SelectedPanel, 8);
                        m += getInventoryCompo(SelectedPanel, 9);
                    }
                    if (checkInventoryCompo(SelectedPanel, 15)) {
                        q += getInventoryCompo(SelectedPanel, 8);
                        m += getInventoryCompo(SelectedPanel, 9);
                    }
                    if (checkInventoryCompo(SelectedPanel, 17)) {
                        q += getInventoryCompo(SelectedPanel, 8);
                        m += getInventoryCompo(SelectedPanel, 9);
                    }
                    if (checkInventoryCompo(SelectedPanel, 18)) {
                        q += getInventoryCompo(SelectedPanel, 8);
                        m += getInventoryCompo(SelectedPanel, 9);
                    }
                    if (checkInventoryCompo(SelectedPanel, 16)) {
                        d += getInventoryCompo(SelectedPanel, 8);
                    }
                    if (checkInventoryCompo(SelectedPanel, 19)) {
                        d += getInventoryCompo(SelectedPanel, 8);
                    }
                    if (checkInventoryCompo(SelectedPanel, 20)) {
                        d += getInventoryCompo(SelectedPanel, 8);
                    }
                }
                showTextSolidTopLeft(LARGE_TEXT, e, g + 56, "TYPE " + "physical fire ice thunder poison freeze".split(" ")[c], 16777215, 0);
                showTextSolidTopLeft(LARGE_TEXT, e, g + 68, "AT " + q + "-" + m, 16777215, 0);
                if (6 == b) {
                    showTextSolidTopLeft(LARGE_TEXT, e, g + 80, "$$ " + h, 16777215, 0);
                } else {
                    showTextSolidTopLeft(LARGE_TEXT, e, g + 80, "MP " + h, 16777215, 0);
                }
                if (2 == c) {
                    showTextSolidTopLeft(LARGE_TEXT, e, g + 80, "        SLOW " + d + "%", 16777215, 0);
                } else if (4 == c) {
                    showTextSolidTopLeft(LARGE_TEXT, e, g + 80, "        TIME " + d / 50 + "s", 16777215, 0);
                } else if (5 == c) {
                    showTextSolidTopLeft(LARGE_TEXT, e, g + 80, "        TIME " + d / 50 + "s", 16777215, 0);
                }
                filledRect(e + 0, g + 96, 12, 12, 0);
                filledRect(e + 75, g + 96, 12, 12, 0);
                DisplayMode2 = 2;
                drawFromImage(SmallItemImage, e + 0, g + 96, 12, 12, 12 * getItemData(InventoryCompo1[SelectedPanel], 3), 0, 12, 12, getItemData(InventoryCompo1[SelectedPanel], 6));
                drawFromImage(SmallItemImage, e + 75, g + 96, 12, 12, 12 * getItemData(InventoryCompo2[SelectedPanel], 3), 0, 12, 12, getItemData(InventoryCompo2[SelectedPanel], 6));
                DisplayMode2 = 0;
                showTextSolidTopLeft(SMALL_TEXT, e + 16, g + 99, ITEM_DATA[InventoryCompo1[SelectedPanel]][0].substring(0, srMin(8, ITEM_DATA[InventoryCompo1[SelectedPanel]][0].length)) + " " + ITEM_DATA[InventoryCompo1[SelectedPanel]][1], -1, 0);
                showTextSolidTopLeft(SMALL_TEXT, e + 91, g + 99, ITEM_DATA[InventoryCompo2[SelectedPanel]][0].substring(0, srMin(8, ITEM_DATA[InventoryCompo2[SelectedPanel]][0].length)) + " " + ITEM_DATA[InventoryCompo2[SelectedPanel]][1], -1, 0)
            }
        }
    }
    e = 192;
    g = 271;
    showTextCenter(SMALL_TEXT, e - 15, g + 8, "PLA  ", 0, 0, 0, 0, 0, 0, 0, 128, 5, 7);
    showTextCenter(SMALL_TEXT, e - 15, g + 16, "  YER", 0, 0, 0, 0, 0, 0, 0, 128, 5, 7);
    showTextCenter(SMALL_TEXT, e - 15, g + 36, "WEA  ", 0, 0, 0, 0, 0, 0, 0, 128, 5, 7);
    showTextCenter(SMALL_TEXT, e - 15, g + 44, "  PON", 0, 0, 0, 0, 0, 0, 0, 128, 5, 7);
    showTextCenter(SMALL_TEXT, e - 15, g + 68, "COMPO", 0, 0, 0, 0, 0, 0, 0, 128, 5, 7);
    showTextCenter(SMALL_TEXT, e - 15, g + 96, "COMPO", 0, 0, 0, 0, 0, 0, 0, 128, 5, 7);
    for (b = 0; 4 > b; b++) {
        filledRect(e + 32 * b, g - 12, 24, 4, 0);
        filledRect(e + 32 * b, g - 12, srFloor(24 * PlayerCurrentLp[b] / PlayerMaxLp[b]), 4, 10027008);
        h = srMax(getItemData(InventoryItem[4 + b], 36), 1);
        c = getItemData(InventoryItem[4 + b], 5);
        if (4 != c && 5 != c && 6 != c) {
            filledRect(e + 32 * b, g - 6, srFloor(23 * PlayerMp[b] / h) + 1, 2, 128);
        }
        filledRect(e + 32 * b, g + 0, 24, 24, 0);
        filledRect(e + 32 * b, g + 28, 24, 24, 0);
        if (restrictSlot(b, 0)) {
            filledRect(e + 32 * b, g + 56, 24, 24, 0);
        }
        if (restrictSlot(b, 1)) {
            filledRect(e + 32 * b, g + 84, 24, 24, 0);
        }
        drawFromImage(PlayerImage, e + 32 * b, g, 24, 24, 24 * getItemData(InventoryItem[4 + b], 5), 0, 24, 24, 16777215);
        colorPortraitWeap(e + 32 * b, g, 24 * getItemData(InventoryItem[4 + b], 5), getItemData(InventoryItem[4 + b], 6));
        DisplayMode2 = 2;
        drawFromImage(LargeItemImage, e + 32 * b, g + 28, 24, 24, 24 * getItemData(InventoryItem[4 + b], 4), 0, 24, 24, getItemData(InventoryItem[4 + b], 6));
        if (restrictSlot(b, 0)) {
            drawFromImage(LargeItemImage, e + 32 * b, g + 56, 24, 24, 24 * getItemData(InventoryCompo1[4 + b], 4), 0, 24, 24, getItemData(InventoryCompo1[4 + b], 6));
        }
        if (restrictSlot(b, 1)) {
            drawFromImage(LargeItemImage, e + 32 * b, g + 84, 24, 24, 24 * getItemData(InventoryCompo2[4 + b], 4), 0, 24, 24, getItemData(InventoryCompo2[4 + b], 6));
        }
        DisplayMode2 = 0;
        if (ITEM_DATA[InventoryItem[4 + b]][1]) {
            showTextSolidTopLeft(SMALL_TEXT, e + 32 * b + 19, g + 45, "" + ITEM_DATA[InventoryItem[4 + b]][1], 16777215, -1);
        }
        if (ITEM_DATA[InventoryCompo1[4 + b]][1] && restrictSlot(b, 0)) {
            showTextSolidTopLeft(SMALL_TEXT, e + 32 * b + 19, g + 73, "" + ITEM_DATA[InventoryCompo1[4 + b]][1], 16777215, -1);
        }
        if (ITEM_DATA[InventoryCompo2[4 + b]][1] && restrictSlot(b, 1)) {
            showTextSolidTopLeft(SMALL_TEXT, e + 32 * b + 19, g + 101, "" + ITEM_DATA[InventoryCompo2[4 + b]][1], 16777215, -1);
        }
    }
    frameRect(e + 32 * SelectedPlayer - 1, g - 1, 26, 26, 16711680);
    e = 344;
    g = 271;
    showTextSolidTopLeft(LARGE_TEXT, e, g + -12, "ITEM", 16777215, 0);
    for (b = 0; 24 > b; b++) {
        filledRect(e + b % 6 * 28, g + 28 * srFloor(b / 6), 24, 24, 0);
        DisplayMode2 = 2;
        drawFromImage(LargeItemImage, e + b % 6 * 28, g + 28 * srFloor(b / 6), 24, 24, 24 * getItemData(InventoryItem[16 + b], 4), 0, 24, 24, getItemData(InventoryItem[16 + b], 6));
        DisplayMode2 = 0;
        if (ITEM_DATA[InventoryItem[16 + b]][1]) {
            showTextSolidTopLeft(SMALL_TEXT, e + b % 6 * 28 + 19, g + 28 * srFloor(b / 6) + 17, "" + ITEM_DATA[InventoryItem[16 + b]][1], 16777215, -1);
        }
    }
    b = -1;
    e = 192;
    g = 271;
    if (isMouseHovered(e - 4, g - 4, 128, 112) && MouseUp) {
        c = srFloor((MouseX1 - e + 4) / 32);
        d = srFloor((MouseY1 - g + 4) / 28);
        b = 4 * d + c;
        BackGroundFill(e + 32 * c, g + 28 * d, 24, 24, 8388608);
    }
    e = 344;
    g = 271;
    if (isMouseHovered(e - 4, g - 4, 168, 112) && MouseUp) {
        c = srFloor((MouseX1 - e + 4) / 28);
        d = srFloor((MouseY1 - g + 4) / 28);
        b = 16 + 6 * d + c;
        BackGroundFill(e + 28 * c, g + 28 * d, 24, 24, 8388608);
    }
    antiCheatCheck();
    if (0 <= b && 3 >= b && 0 == InventoryItem[40] && Clicked) {
        SelectedPlayer = b;
    } else if (4 <= b && 8 > b && Clicked) {
        if (0 == InventoryItem[40] || getItemData(InventoryItem[40], 5) == PlayerClass[b - 4]) {
            a = InventoryItem[b];
            InventoryItem[b] = InventoryItem[40];
            InventoryItem[40] = a;
            a = InventoryCompo1[b];
            InventoryCompo1[b] = InventoryCompo1[40];
            InventoryCompo1[40] = a;
            a = InventoryCompo2[b];
            InventoryCompo2[b] = InventoryCompo2[40];
            InventoryCompo2[40] = a;
            PlayerMp[b - 4] = 0;
            SR_PLAYER.pl_skill_attack_time[b - 4] = 0
        }
    } else if (8 <= b && 11 >= b && Clicked) {
        if (9 == getItemData(InventoryItem[40], 5) && restrictSlot(b - 8, 0)) {
            InventoryCompo1[4 + b - 8] = InventoryItem[40];
            InventoryItem[40] = 0;
            InventoryCompo1[40] = 0;
            InventoryCompo2[40] = 0;
            PlayerMp[b - 8] = 0;
        }
    } else if (12 <= b && 15 >= b && Clicked) {
        if (9 == getItemData(InventoryItem[40], 5) && restrictSlot(b - 12, 1)) {
            InventoryCompo2[4 + b - 12] = InventoryItem[40];
            InventoryItem[40] = 0;
            InventoryCompo1[40] = 0;
            InventoryCompo2[40] = 0;
            PlayerMp[b - 12] = 0;
        }
    } else if (16 <= b && 40 > b && Clicked) {
        if (1 == ClickToSell && 0 != InventoryItem[b]) {
            h = srFloor(getItemData(InventoryItem[b], 2) / 8);
            if (Clicked) {
                SR_DROP.dpAdd(40, 200, 1, h, 0);
                InventoryItem[b] = 0;
                InventoryCompo1[b] = 0;
                InventoryCompo2[b] = 0;
            }
        } else {
            a = InventoryItem[b];
            InventoryItem[b] = InventoryItem[40];
            InventoryItem[40] = a;
            a = InventoryCompo1[b];
            InventoryCompo1[b] = InventoryCompo1[40];
            InventoryCompo1[40] = a;
            a = InventoryCompo2[b];
            InventoryCompo2[b] = InventoryCompo2[40];
            InventoryCompo2[40] = a;
        }
    } else if (-1 == b && 0 != InventoryItem[40] && Clicked && 256 > MouseY1 && 0 == a) {
        SR_DROP.dpAdd(SR_PLAYER.pl_current_joint[SelectedPlayer][0].x, SR_PLAYER.pl_current_joint[SelectedPlayer][0].y, InventoryItem[40], InventoryCompo1[40], InventoryCompo2[40]);
        InventoryItem[40] = 0;
        InventoryCompo1[40] = 0;
        InventoryCompo2[40] = 0;
    }
    antiCheatSet();
    if (-1 == b) {
        SelectedPanel = SelectedPlayer;
    } else {
        SelectedPanel = b;
    }
    if (0 != InventoryItem[40]) {
        DisplayMode2 = 2;
        drawFromImageCentered(LargeItemImage, MouseX1, MouseY1, 24, 24, 24 * getItemData(InventoryItem[40], 4), 0, 24, 24, getItemData(InventoryItem[40], 6));
        DisplayMode2 = 0;
    }
    if (1 == ClickToSell) {
        c = srClampA(MouseX1, 56, 456);
        d = srClampA(MouseY1 - 8, 10, 374);
        if (16 <= b && 40 > b) {
            h = srFloor(getItemData(InventoryItem[b], 2) / 8);
            showTextSolidCenter(LARGE_TEXT, c, d, "" + h + "$ SELL", 16777215, 0)
        } else {
            showTextSolidCenter(LARGE_TEXT, c, d, "CLICK TO SELL", 16777215, 0)
        }
    }
}

/*
アイテムを付けれるかチェック
*/
function restrictSlot(a, b) {
    if (0 == InventoryItem[40] || 9 != getItemData(InventoryItem[40], 5)) {
        return !0;
    }
    if (0 == InventoryItem[4 + a] || 0 == b && 59 == InventoryCompo1[4 + a] || 1 == b && 59 == InventoryCompo2[4 + a]) {
        return !1;
    }
    var c = getItemData(InventoryItem[40], 7);
    if (0 == b && c == getItemData(InventoryCompo2[4 + a], 7) || 1 == b && c == getItemData(InventoryCompo1[4 + a], 7)) {
        return !1
    } else {
        return compoRestrictCheck(c, getItemData(InventoryItem[4 + a], 5), getItemData(InventoryItem[4 + a], 34), getItemData(InventoryItem[4 + a], 12))
    }
}

/*
コンポを付けれるかチェック
*/
function compoRestrictCheck(a, b, c, d) {
    if (1 == a || 2 == a || 3 == a || 4 == a || 5 == a) {
        return !0;
    }
    if (6 == a) {
        if (1 == b || 2 == b || 3 == b || 6 == b || 7 == b || 8 == b) {
            return !0
        }
    } else if (7 == a) {
        if (1 == b || 2 == b || 3 == b || 6 == b || 7 == b || 8 == b) {
            return !0
        }
    } else {
        if (8 == a || 9 == a || 10 == a) {
            return !0;
        }
        if (11 == a) {
            if (1 == b || 2 == b || 7 == b) {
                return !0
            }
        } else if (12 == a) {
            if (1 == b || 2 == b || 7 == b) {
                return !0
            }
        } else if (37 == a) {
            if (1 == b || 2 == b || 7 == b) {
                return !0
            }
        } else if (13 == a) {
            if (1 == c) {
                return !0
            }
        } else if (14 == a) {
            if (1 == c) {
                return !0
            }
        } else if (15 == a) {
            if (2 == c) {
                return !0
            }
        } else if (16 == a) {
            if (2 == c) {
                return !0
            }
        } else if (17 == a) {
            if (3 == c) {
                return !0
            }
        } else if (18 == a) {
            if (4 == c) {
                return !0
            }
        } else if (19 == a) {
            if (4 == c) {
                return !0
            }
        } else if (20 == a) {
            if (5 == c) {
                return !0
            }
        } else {
            if (21 == a) {
                return !0;
            }
            if (22 == a) {
                if (2 == b) {
                    return !0
                }
            } else if (23 == a) {
                if (3 == b || 4 == b || 5 == b || 6 == b || 8 == b) {
                    return !0
                }
            } else if (24 == a) {
                if (3 == b || 4 == b || 6 == b) {
                    return !0
                }
            } else if (25 == a) {
                if (3 == b || 4 == b || 6 == b) {
                    return !0
                }
            } else if (26 == a) {
                if (2 <= d) {
                    return !0
                }
            } else if (27 == a) {
                if (1 == b || 3 == b || 6 == b || 8 == b) {
                    return !0
                }
            } else if (43 == a) {
                if (1 == b || 3 == b || 4 == b || 6 == b || 7 == b) {
                    return !0
                }
            } else if (29 == a) {
                if (1 == b || 2 == b || 3 == b || 6 == b || 7 == b || 8 == b) {
                    return !0
                }
            } else if (28 == a) {
                if (1 == b || 2 == b || 7 == b) {
                    return !0
                }
            } else if (44 == a) {
                if (3 == b || 4 == b || 6 == b || 7 == b || 8 == b) {
                    return !0
                }
            } else {
                if (32 == a || 33 == a || 34 == a || 35 == a || 36 == a || 38 == a || 39 == a || 40 == a || 41 == a) {
                    return !0;
                }
                if (42 == a) {
                    if (1 == b || 7 == b) {
                        return !0
                    }
                } else if (45 == a) {
                    if (2 == b) {
                        return !0
                    }
                } else {
                    if (46 == a) {
                        return !0;
                    }
                    if (47 == a) {
                        if (8 == b) {
                            return !0
                        }
                    } else if (48 == a || 49 == a) {
                        return !0
                    }
                }
            }
        }
    }
    return !1
}

var PLAYER_CLASS_DEAD = 9;
var SR_PLAYER = new SrPlayer;

/*
棒人間
*/
function SrPlayer() {
    var a, b;
    // 8x21 SrVec2
    this.pl_current_joint = Array(8);
    for (a = 0; 8 > a; a++) {
        this.pl_current_joint[a] = Array(21);
        for (b = 0; 21 > b; b++) {
            this.pl_current_joint[a][b] = new SrVec2;
        }
    }
    // 8x21 SrVec2
    this.pl_last_joint = Array(8);
    for (a = 0; 8 > a; a++) {
        this.pl_last_joint[a] = Array(21);
        for (b = 0; 21 > b; b++) {
            this.pl_last_joint[a][b] = new SrVec2;
        }
    }
    this.pl_class = new Int32Array(8);
    this.pl_hover_time = new Int32Array(8);
    this.pl_on_ground = new Int32Array(8);
    this.pl_attack_point = new Int32Array(8);
    this.pl_attack_cooldown = new Int32Array(8);
    this.pl_damage_effect_time = new Int32Array(8);
    this.pl_skill_attack_time = new Int32Array(8);
    this.pl_walk_interval = new Int32Array(8);
    this.pl_held_player = -1;
    this.pl_held_joint = 0;
    this.pl_is_found = new Int32Array(8);
    this.pl_damage_dealt = this.pl_vs_ready = 0;
    this.pl_slow_time = new Int32Array(8);
    this.pl_slow_rate = new Int32Array(8);
    this.pl_poison_time = new Int32Array(8);
    this.pl_poison_damage = new Int32Array(8);
    this.pl_freeze_time = new Int32Array(8);
    this.pl_ring_move_status = Array(8);
    for (a = 0; 8 > a; a++) {
        this.pl_ring_move_status[a] = new Int32Array(6);
    }
    this.pl_ring_move_time = Array(8);
    for (a = 0; 8 > a; a++) {
        this.pl_ring_move_time[a] = new Int32Array(6);
    }
    this.pl_ring_hit_interval = Array(8);
    for (a = 0; 8 > a; a++) {
        this.pl_ring_hit_interval[a] = new Int32Array(6);
    }


}

/*
リセット(棒人間を離す)
*/
SrPlayer.prototype.plReset = function () {
    this.pl_held_player = -1;
    this.pl_held_joint = 0
};

/*
セット
*/
SrPlayer.prototype.plSet = function (a, b, c) {
    b *= 8;
    c *= 8;
    for (var d = 0; 21 > d; d++) {
        setVec2(this.pl_current_joint[a][d], b + srRandom(4), c + srRandom(4));
        this.pl_last_joint[a][d].vecSet(this.pl_current_joint[a][d]);
    }
    this.pl_class[a] = PlayerClass[a];
    this.pl_hover_time[a] = 0;
    this.pl_on_ground[a] = 0;
    this.pl_attack_point[a] = -1;
    this.pl_attack_cooldown[a] = 0;
    this.pl_damage_effect_time[a] = 0;
    this.pl_skill_attack_time[a] = 0;
    this.pl_walk_interval[a] = 0;
    this.pl_is_found[a] = 0;
    this.pl_slow_time[a] = 0;
    this.pl_slow_rate[a] = 0;
    this.pl_poison_time[a] = 0;
    this.pl_poison_damage[a] = 0;
    for (d = this.pl_freeze_time[a] = 0; 6 > d; d++) {
        this.pl_ring_move_status[a][d] = 0;
        this.pl_ring_move_time[a][d] = 0;
        this.pl_ring_hit_interval[a][d] = 0
    }
};
//WINDOW.fff = SrPlayer.prototype.plMove;

/*
ジョイントの動き
*/
SrPlayer.prototype.plMove = function (a, b) {
    var c = this.pl_current_joint[a][b];
    var d = new SrVec2;
    setDistance(d, c, this.pl_last_joint[a][b]);
    c.vecSet(this.pl_last_joint[a][b]);
    var e = (magnitudeOf(d) >> 2) + 1;
    scaleVec2(d, 1 / e);
    var g, h, q;
    h = srClampA(c.x, 0, 511) >> 3;
    q = srClampA(c.y, 0, 383) >> 3;
    h = SR_TERRAIN.tr_data[q][h];
    if (9 == h) {
        scaleVec2(d, .95);
        this.pl_on_ground[a] |= 2;
    }
    var m = .5;
    if (8 == STAGE_DATA[SR_TERRAIN.tr_stage_id][CurrentArea][0]) {
        m = 1;
    }
    for (var l = 0; l < e; l++) {
        g = c.y + d.y;
        h = srClampA(c.x, 0, 511) >> 3;
        q = srClampA(g, 0, 383) >> 3;
        h = SR_TERRAIN.tr_data[q][h];
        if (384 > g) {
            if (0 <= h && 8 >= h) {
                d.x *= m;
                d.y = -d.y;
                this.pl_on_ground[a] |= 1;
            } else {
                c.y = g;
            }
        }
        g = c.x + d.x;
        h = srClampA(g, 0, 511) >> 3;
        q = srClampA(c.y, 0, 383) >> 3;
        h = SR_TERRAIN.tr_data[q][h];
        if (0 <= g && 512 > g) {
            if (0 <= h && 8 >= h) {
                d.y *= m;
                d.x = -d.x;
                this.pl_on_ground[a] |= 1
            } else {
                c.x = g
            }
        }
    }
};

/*
敵を見つける
-1->いない
*/
function plFindPlayer(a, b, c, d, e) {
    var g = SR_PLAYER;
    var h = .5 * (a + c);
    var q = 1E3;
    var m = -1;
    if (1 == g.pl_vs_ready) {
        return m;
    }
    for (var l = e + 4; e < l; e++) {
        g.pl_is_found[e] = 0;
        var A = g.pl_current_joint[e][2];
        if (g.pl_class[e] != PLAYER_CLASS_DEAD && A.x - 5 <= c && A.x + 5 >= a && A.y - 10 <= d && A.y + 10 >= b) {
            g.pl_is_found[e] = 1;
            if (srAbs(A.x - h) < q) {
                q = srAbs(A.x - h);
                m = e
            }
        }
    }
    return m
}

/*
プレイヤーがダメージをうける
*/
function plGetDamage(a, b, c, d, e, g, h, q, m, l) {
    var A = SR_PLAYER;
    var z = -1;
    A.pl_damage_dealt = 0;
    q *= .5;
    m *= .5;
    for (var Z = l + 4; l < Z; l++) {
        if (A.pl_class[l] != PLAYER_CLASS_DEAD && !(A.pl_current_joint[l][2].x - 5 > g + q || A.pl_current_joint[l][2].x + 5 < g - q || A.pl_current_joint[l][2].y - 10 > h + m || A.pl_current_joint[l][2].y + 10 < h - m)) {
            var z = -1;
            var B = d + srFloor(srRandom(e - d + 1));
            A.pl_damage_effect_time[l] = 2;
            var S = 16711680;
            if (4 <= l) {
                z = 1;
                S = 12632256;
            }
            if (checkInventoryCompo(4 + l, 28)) {
                B += srFloor(B * getInventoryCompo(4 + l, 9) / 100);
            }
            var ia = 0;
            if (1 == b && checkInventoryCompo(4 + l, 32)) {
                B += srFloor(B * getInventoryCompo(4 + l, 9) / 100);
            }
            if (2 == b) {
                if (checkInventoryCompo(4 + l, 38) && srRandom(100) < getInventoryCompo(4 + l, 8)) {
                    ia = 1;
                }
                if (!ia) {
                    A.pl_slow_time[l] = 500;
                    A.pl_slow_rate[l] = c;
                    if (checkInventoryCompo(4 + l, 9)) {
                        A.pl_slow_time[l] -= srFloor(A.pl_slow_time[l] * getInventoryCompo(4 + l, 8) / 100);
                    }
                }
            } else if (4 == b) {
                if (checkInventoryCompo(4 + l, 39) && srRandom(100) < getInventoryCompo(4 + l, 8)) {
                    ia = 1;
                }
                if (!ia) {
                    A.pl_poison_time[l] = c;
                    A.pl_poison_damage[l] = B;
                    if (checkInventoryCompo(4 + l, 9)) {
                        A.pl_poison_time[l] -= srFloor(A.pl_poison_time[l] * getInventoryCompo(4 + l, 8) / 100);
                        A.pl_poison_damage[l] -= srFloor(A.pl_poison_damage[l] * getInventoryCompo(4 + l, 8) / 100);
                    }
                }
                z = l;
                continue
            } else if (5 == b) {
                if (checkInventoryCompo(4 + l, 40) && srRandom(100) < getInventoryCompo(4 + l, 8)) {
                    ia = 1;
                }
                if (!ia) {
                    A.pl_freeze_time[l] = srFloor(c / 10);
                    if (checkInventoryCompo(4 + l, 9)) {
                        A.pl_freeze_time[l] -= srFloor(A.pl_freeze_time[l] * getInventoryCompo(4 + l, 8) / 100);
                    }
                }
            }
            if (0 == b) {
                B = srMax(1, B - srFloor(PlayerDexAura[l] / 5));
            }
            if (checkInventoryCompo(4 + l, 8) && 0 == b) {
                B = srMax(1, B - getInventoryCompo(4 + l, 8));
            }
            if (checkInventoryCompo(4 + l, 9) && 0 != b) {
                B -= srFloor(B * getInventoryCompo(4 + l, 8) / 100);
            }
            if (checkInventoryCompo(4 + l, 10) && srRandom(100) < getInventoryCompo(4 + l, 8)) {
                B = 0;
                A.pl_damage_effect_time[l] = 0;
                S = 16744576;
            }
            antiCheatCheck();
            PlayerCurrentLp[l] = srClampA(PlayerCurrentLp[l] - B, 0, PlayerMaxLp[l]);
            antiCheatSet();
            if (2 > PartyDamageEffect) {
                SR_INDICATOR.inAdd(A.pl_current_joint[l][0].x, A.pl_current_joint[l][0].y, z, B, S);
            }
            A.pl_damage_dealt += B;
            z = l;
            if (0 == a) {
                break
            }
        }
    }
    return z
}

//WINDOW.fff = SrPlayer.prototype.plSetDrag;
/*
プレイヤーつかむ
*/
SrPlayer.prototype.plSetDrag = function () {
    var a = new SrVec2;
    var b;
    var c;
    if (-1 == this.pl_held_player && 1 != GameMode) {
        if (Clicked) {
            b = 20;
            a.x = MouseX1 - this.pl_last_joint[SelectedPlayer][0].x;
            a.y = MouseY1 - (this.pl_last_joint[SelectedPlayer][0].y - 8);
            c = magnitudeOf(a);
            if (20 > c && c < b && (0 != PlayerCurrentLp[SelectedPlayer] || 0 != PartyDragDeadBody)) {
                b = c;
                this.pl_held_player = SelectedPlayer;
                this.pl_held_joint = 0;
            }
            for (var d = 0; 4 > d; d++) {
                if (0 != PlayerCurrentLp[d] || 0 != PartyDragDeadBody) {
                    for (var e = 0; 10 > e; e++) {
                        a.x = MouseX1 - this.pl_last_joint[d][e].x;
                        a.y = MouseY1 - this.pl_last_joint[d][e].y;
                        c = magnitudeOf(a);
                        if (20 > c && c < b) {
                            b = c;
                            this.pl_held_player = d;
                            this.pl_held_joint = e;
                            SelectedPlayer = d
                        }
                    }
                }
            }
        }
    } else if (!LeftClickWasDown) {
        this.pl_held_player = -1;
        this.pl_held_joint = 0
    }
};

/*
飛び道具の攻撃
a:SrPlayer
*/
function plProjectileAttack(a, b, c, d, e) {
    var g = new SrVec2;
    var h = b;
    if (8 > b) {
        h = InventoryItem[4 + b];
    }
    var q = getItemData(h, 8) % 100;
    var m = srFloor(getItemData(h, 8) / 100);
    var l = getItemData(h, 17);
    var A = getItemData(h, 18);
    var z = getItemData(h, 19);
    var Z = getItemData(h, 20);
    var B = getItemData(h, 21);
    var S = getItemData(h, 22);
    var ia = getItemData(h, 23);
    var za = getItemData(h, 24);
    var ta = getItemData(h, 25);
    var X = getItemData(h, 26);
    var T = getItemData(h, 27);
    var Y = getItemData(h, 28);
    var Ua = getItemData(h, 29);
    var eb = getItemData(h, 30);
    var Va = getItemData(h, 31);
    var ua = getItemData(h, 32);
    var pa = getItemData(h, 33);
    var Ha = 0;
    var rb = getItemData(h, 9);
    var Aa;
    if (8 > b) {
        Aa = PlayerMinAt[b];
    } else {
        Aa = getItemData(h, 10);
    }
    var ka;
    if (8 > b) {
        ka = PlayerMaxAt[b];
    } else {
        ka = getItemData(h, 11);
    }
    var ab = getItemData(h, 12);
    var Pa = getItemData(h, 13);
    var Wa = getItemData(h, 34);
    var Ca = getItemData(h, 35);
    var yb = getItemData(h, 37);
    var Hb = getItemData(h, 42);
    var Ib = getItemData(h, 43);
    var Jb = getItemData(h, 44);
    var Kb = getItemData(h, 45);
    var Lb = getItemData(h, 46);
    var Mb = getItemData(h, 47);
    var Nb = getItemData(h, 48);
    var Ob = getItemData(h, 49);
    var Pb = getItemData(h, 50);
    var Qb = getItemData(h, 51);
    var sb = getItemData(h, 52);
    var Rb = getItemData(h, 53);
    var Sb = getItemData(h, 54);
    var Tb = getItemData(h, 55);
    var Ub = getItemData(h, 56);
    var Vb = getItemData(h, 57);
    var $b = getItemData(h, 38);
    var ca = getItemData(h, 39);
    var Ba = getItemData(h, 40);
    var Oc = getItemData(h, 41);
    var Pc = Wa;
    var zb = Ca;
    if (8 > b) {
        var tb = getItemData(InventoryItem[4 + b], 5);
        /*1 == tb || 2 == tb || 7 == tb
            ? (Aa = getItemData(InventoryItem[4 + b], 39), ka = getItemData(InventoryItem[4 + b], 40), checkInventoryCompo(4 + b, 13) && (Aa += getInventoryCompo(4 + b, 8), ka += getInventoryCompo(4 + b, 9)), checkInventoryCompo(4 + b, 14) && (T += getInventoryCompo(4 + b, 8)), checkInventoryCompo(4 + b, 15) && (Aa += getInventoryCompo(4 + b, 8), ka += getInventoryCompo(4 + b, 9)), checkInventoryCompo(4 + b, 16) && (Ca += getInventoryCompo(4 + b, 8)), checkInventoryCompo(4 + b, 17) && (Aa += getInventoryCompo(4 + b, 8), ka += getInventoryCompo(4 + b, 9)), checkInventoryCompo(4 + b, 18) && (Aa += getInventoryCompo(4 + b, 8), ka += getInventoryCompo(4 + b, 9)), checkInventoryCompo(4 + b, 19) && (Ca += getInventoryCompo(4 + b, 8)), checkInventoryCompo(4 + b, 20) && (Ca += getInventoryCompo(4 + b, 8)), Aa += srFloor(Aa * PlayerStrAura[b] / 100), ka += srFloor(ka * PlayerStrAura[b] / 100), 7 == tb && (ab += srFloor(PlayerDex[b] / 5)))
            : 3 == tb
                ? (402 != h && (Ca = Wa = 0), antiCheatCheck(), h = getItemData(InventoryItem[4 + b], 36), PlayerMp[b] = srMin(PlayerMp[b] + PlayerMag[b], h), PlayerMp[b] == h && 0 < h ? PlayerMp[b] = 0 : yb = 0, antiCheatSet(), checkInventoryCompo(4 + b, 13) && (ca += getInventoryCompo(4 + b, 8), Ba += getInventoryCompo(4 + b, 9)), checkInventoryCompo(4 + b, 14) && (sb += getInventoryCompo(4 + b, 8)), checkInventoryCompo(4 + b, 15) && (ca += getInventoryCompo(4 + b, 8), Ba += getInventoryCompo(4 + b, 9)), checkInventoryCompo(4 + b, 16) && (zb += getInventoryCompo(4 + b, 8)), checkInventoryCompo(4 + b, 17) && (ca += getInventoryCompo(4 + b, 8), Ba += getInventoryCompo(4 + b, 9)), checkInventoryCompo(4 + b, 18) && (ca += getInventoryCompo(4 + b, 8), Ba += getInventoryCompo(4 + b, 9)), checkInventoryCompo(4 + b, 19) && (zb += getInventoryCompo(4 + b, 8)), checkInventoryCompo(4 + b, 20) && (zb += getInventoryCompo(4 + b, 8)), ca += srFloor(ca * PlayerStrAura[b] / 100), Ba += srFloor(Ba * PlayerStrAura[b] / 100), checkInventoryCompo(4 + b, 24) && srRandom(100) < getInventoryCompo(4 + b, 8) && (Va = 1), checkInventoryCompo(4 + b, 25) && (pa += getInventoryCompo(4 + b, 8)), checkInventoryCompo(4 + b, 27) && srRandom(100) < getInventoryCompo(4 + b, 8) && (rb = 1), checkInventoryCompo(4 + b, 29) && srRandom(100) < getInventoryCompo(4 + b, 8) && (Aa += srFloor(getInventoryCompo(4 + b, 9) * Aa / 100), ka += srFloor(getInventoryCompo(4 + b, 9) * ka / 100)))
                : 4 == tb || 5 == tb
                    ? (checkInventoryCompo(4 + b, 13) && (ca += getInventoryCompo(4 + b, 8), Ba += getInventoryCompo(4 + b, 9)), checkInventoryCompo(4 + b, 14) && (T += getInventoryCompo(4 + b, 8), sb += getInventoryCompo(4 + b, 8)), checkInventoryCompo(4 + b, 15) && (ca += getInventoryCompo(4 + b, 8), Ba += getInventoryCompo(4 + b, 9)), checkInventoryCompo(4 + b, 16) && (Ca += getInventoryCompo(4 + b, 8), zb += getInventoryCompo(4 + b, 8)), checkInventoryCompo(4 + b, 17) && (ca += getInventoryCompo(4 + b, 8), Ba += getInventoryCompo(4 + b, 9)), checkInventoryCompo(4 + b, 18) && (ca += getInventoryCompo(4 + b, 8), Ba += getInventoryCompo(4 + b, 9)), checkInventoryCompo(4 + b, 19) && (Ca += getInventoryCompo(4 + b, 8), zb += getInventoryCompo(4 + b, 8)), checkInventoryCompo(4 + b, 20) && (Ca += getInventoryCompo(4 + b, 8), zb += getInventoryCompo(4 + b, 8)), ca += srFloor(ca * PlayerStrAura[b] / 100), Ba += srFloor(Ba * PlayerStrAura[b] / 100), checkInventoryCompo(4 + b, 24) && srRandom(100) < getInventoryCompo(4 + b, 8) && (Va = 1), checkInventoryCompo(4 + b, 25) && (pa += getInventoryCompo(4 + b, 8)))
                    : 6 == tb
                        ? (0 != yb && (Ca = Wa = 0), checkInventoryCompo(4 + b, 13) && (ca += getInventoryCompo(4 + b, 8), Ba += getInventoryCompo(4 + b, 9)), checkInventoryCompo(4 + b, 14) && (sb += getInventoryCompo(4 + b, 8)), checkInventoryCompo(4 + b, 15) && (ca += getInventoryCompo(4 + b, 8), Ba += getInventoryCompo(4 + b, 9)), checkInventoryCompo(4 + b, 16) && (zb += getInventoryCompo(4 + b, 8)), checkInventoryCompo(4 + b, 17) && (ca += getInventoryCompo(4 + b, 8), Ba += getInventoryCompo(4 + b, 9)), checkInventoryCompo(4 + b, 18) && (ca += getInventoryCompo(4 + b, 8), Ba += getInventoryCompo(4 + b, 9)), checkInventoryCompo(4 + b, 19) && (zb += getInventoryCompo(4 + b, 8)), checkInventoryCompo(4 + b, 20) && (zb += getInventoryCompo(4 + b, 8)), ca += srFloor(ca * PlayerStrAura[b] / 100), Ba += srFloor(Ba * PlayerStrAura[b] / 100), checkInventoryCompo(4 + b, 24) && srRandom(100) < getInventoryCompo(4 + b, 8) && (Va = 1), checkInventoryCompo(4 + b, 25) && (pa += getInventoryCompo(4 + b, 8)), checkInventoryCompo(4 + b, 27) && srRandom(100) < getInventoryCompo(4 + b, 8) && (rb = 1), checkInventoryCompo(4 + b, 29) && srRandom(100) < getInventoryCompo(4 + b, 8) && (Aa += srFloor(getInventoryCompo(4 + b, 9) * Aa / 100), ka += srFloor(getInventoryCompo(4 + b, 9) * ka / 100)))
                        : 8 == tb && (Aa = getItemData(InventoryItem[4 + b], 39), ka = getItemData(InventoryItem[4 + b], 40), checkInventoryCompo(4 + b, 13) && (Aa += getInventoryCompo(4 + b, 8), ka += getInventoryCompo(4 + b, 9)), checkInventoryCompo(4 + b, 13) && (ca += getInventoryCompo(4 + b, 8), Ba += getInventoryCompo(4 + b, 9)), checkInventoryCompo(4 + b, 14) && (T += getInventoryCompo(4 + b, 8), sb += getInventoryCompo(4 + b, 8)), checkInventoryCompo(4 + b, 15) && (Aa += getInventoryCompo(4 + b, 8), ka += getInventoryCompo(4 + b, 9)), checkInventoryCompo(4 + b, 15) && (ca += getInventoryCompo(4 + b, 8), Ba += getInventoryCompo(4 + b, 9)), checkInventoryCompo(4 + b, 16) && (Ca += getInventoryCompo(4 + b, 8), zb += getInventoryCompo(4 + b, 8)), checkInventoryCompo(4 + b, 17) && (Aa += getInventoryCompo(4 + b, 8), ka += getInventoryCompo(4 + b, 9)), checkInventoryCompo(4 + b, 17) && (ca += getInventoryCompo(4 + b, 8), Ba += getInventoryCompo(4 + b, 9)), checkInventoryCompo(4 + b, 18) && (Aa += getInventoryCompo(4 + b, 8), ka += getInventoryCompo(4 + b, 9)), checkInventoryCompo(4 + b, 18) && (ca += getInventoryCompo(4 + b, 8), Ba += getInventoryCompo(4 + b, 9)), checkInventoryCompo(4 + b, 19) && (Ca += getInventoryCompo(4 + b, 8), zb += getInventoryCompo(4 + b, 8)), checkInventoryCompo(4 + b, 20) && (Ca += getInventoryCompo(4 + b, 8), zb += getInventoryCompo(4 + b, 8)), Aa += srFloor(Aa * PlayerStrAura[b] / 100), ka += srFloor(ka * PlayerStrAura[b] / 100), ca += srFloor(ca * PlayerStrAura[b] / 100), Ba += srFloor(Ba * PlayerStrAura[b] / 100));*/
        if (1 == tb || 2 == tb || 7 == tb) {
            Aa = getItemData(InventoryItem[4 + b], 39);
            ka = getItemData(InventoryItem[4 + b], 40);
            if (checkInventoryCompo(4 + b, 13)) {
                Aa += getInventoryCompo(4 + b, 8);
                ka += getInventoryCompo(4 + b, 9);
            }
            if (checkInventoryCompo(4 + b, 14)) {
                T += getInventoryCompo(4 + b, 8);
            }
            if (checkInventoryCompo(4 + b, 15)) {
                Aa += getInventoryCompo(4 + b, 8);
                ka += getInventoryCompo(4 + b, 9);
            }
            if (checkInventoryCompo(4 + b, 16)) {
                Ca += getInventoryCompo(4 + b, 8);
            }
            if (checkInventoryCompo(4 + b, 17)) {
                Aa += getInventoryCompo(4 + b, 8);
                ka += getInventoryCompo(4 + b, 9);
            }
            if (checkInventoryCompo(4 + b, 18)) {
                Aa += getInventoryCompo(4 + b, 8);
                ka += getInventoryCompo(4 + b, 9);
            }
            if (checkInventoryCompo(4 + b, 19)) {
                Ca += getInventoryCompo(4 + b, 8);
            }
            if (checkInventoryCompo(4 + b, 20)) {
                Ca += getInventoryCompo(4 + b, 8);
            }
            Aa += srFloor(Aa * PlayerStrAura[b] / 100);
            ka += srFloor(ka * PlayerStrAura[b] / 100);
            if (7 == tb) {
                ab += srFloor(PlayerDex[b] / 5);
            }
        } else if (3 == tb) {
            if (402 != h) {
                Ca = Wa = 0;
            }
            antiCheatCheck();
            h = getItemData(InventoryItem[4 + b], 36);
            PlayerMp[b] = srMin(PlayerMp[b] + PlayerMag[b], h);
            if (PlayerMp[b] == h && 0 < h) {
                PlayerMp[b] = 0;
            } else {
                yb = 0;
            }
            antiCheatSet();
            if (checkInventoryCompo(4 + b, 13)) {
                ca += getInventoryCompo(4 + b, 8);
                Ba += getInventoryCompo(4 + b, 9);
            }
            if (checkInventoryCompo(4 + b, 14)) {
                sb += getInventoryCompo(4 + b, 8);
            }
            if (checkInventoryCompo(4 + b, 15)) {
                ca += getInventoryCompo(4 + b, 8);
                Ba += getInventoryCompo(4 + b, 9);
            }
            if (checkInventoryCompo(4 + b, 16)) {
                zb += getInventoryCompo(4 + b, 8);
            }
            if (checkInventoryCompo(4 + b, 17)) {
                ca += getInventoryCompo(4 + b, 8);
                Ba += getInventoryCompo(4 + b, 9);
            }
            if (checkInventoryCompo(4 + b, 18)) {
                ca += getInventoryCompo(4 + b, 8);
                Ba += getInventoryCompo(4 + b, 9);
            }
            if (checkInventoryCompo(4 + b, 19)) {
                zb += getInventoryCompo(4 + b, 8);
            }
            if (checkInventoryCompo(4 + b, 20)) {
                zb += getInventoryCompo(4 + b, 8);
            }
            ca += srFloor(ca * PlayerStrAura[b] / 100);
            Ba += srFloor(Ba * PlayerStrAura[b] / 100);
            if (checkInventoryCompo(4 + b, 24) && srRandom(100) < getInventoryCompo(4 + b, 8)) {
                Va = 1;
            }
            if (checkInventoryCompo(4 + b, 25)) {
                pa += getInventoryCompo(4 + b, 8);
            }
            if (checkInventoryCompo(4 + b, 27) && srRandom(100) < getInventoryCompo(4 + b, 8)) {
                rb = 1;
            }
            if (checkInventoryCompo(4 + b, 29) && srRandom(100) < getInventoryCompo(4 + b, 8)) {
                Aa += srFloor(getInventoryCompo(4 + b, 9) * Aa / 100);
                ka += srFloor(getInventoryCompo(4 + b, 9) * ka / 100);
            }
        } else if (4 == tb || 5 == tb) {
            if (checkInventoryCompo(4 + b, 13)) {
                ca += getInventoryCompo(4 + b, 8);
                Ba += getInventoryCompo(4 + b, 9);
            }
            if (checkInventoryCompo(4 + b, 14)) {
                T += getInventoryCompo(4 + b, 8);
                sb += getInventoryCompo(4 + b, 8);
            }
            if (checkInventoryCompo(4 + b, 15)) {
                ca += getInventoryCompo(4 + b, 8);
                Ba += getInventoryCompo(4 + b, 9);
            }
            if (checkInventoryCompo(4 + b, 16)) {
                Ca += getInventoryCompo(4 + b, 8);
                zb += getInventoryCompo(4 + b, 8);
            }
            if (checkInventoryCompo(4 + b, 17)) {
                ca += getInventoryCompo(4 + b, 8);
                Ba += getInventoryCompo(4 + b, 9);
            }
            if (checkInventoryCompo(4 + b, 18)) {
                ca += getInventoryCompo(4 + b, 8);
                Ba += getInventoryCompo(4 + b, 9);
            }
            if (checkInventoryCompo(4 + b, 19)) {
                Ca += getInventoryCompo(4 + b, 8);
                zb += getInventoryCompo(4 + b, 8);
            }
            if (checkInventoryCompo(4 + b, 20)) {
                Ca += getInventoryCompo(4 + b, 8);
                zb += getInventoryCompo(4 + b, 8);
            }
            ca += srFloor(ca * PlayerStrAura[b] / 100);
            Ba += srFloor(Ba * PlayerStrAura[b] / 100);
            if (checkInventoryCompo(4 + b, 24) && srRandom(100) < getInventoryCompo(4 + b, 8)) {
                Va = 1;
            }
            if (checkInventoryCompo(4 + b, 25)) {
                pa += getInventoryCompo(4 + b, 8);
            }
        } else if (6 == tb) {
            if (0 != yb) {
                Ca = Wa = 0;
            }
            if (checkInventoryCompo(4 + b, 13)) {
                ca += getInventoryCompo(4 + b, 8);
                Ba += getInventoryCompo(4 + b, 9);
            }
            if (checkInventoryCompo(4 + b, 14)) {
                sb += getInventoryCompo(4 + b, 8);
            }
            if (checkInventoryCompo(4 + b, 15)) {
                ca += getInventoryCompo(4 + b, 8);
                Ba += getInventoryCompo(4 + b, 9);
            }
            if (checkInventoryCompo(4 + b, 16)) {
                zb += getInventoryCompo(4 + b, 8);
            }
            if (checkInventoryCompo(4 + b, 17)) {
                ca += getInventoryCompo(4 + b, 8);
                Ba += getInventoryCompo(4 + b, 9);
            }
            if (checkInventoryCompo(4 + b, 18)) {
                ca += getInventoryCompo(4 + b, 8);
                Ba += getInventoryCompo(4 + b, 9);
            }
            if (checkInventoryCompo(4 + b, 19)) {
                zb += getInventoryCompo(4 + b, 8);
            }
            if (checkInventoryCompo(4 + b, 20)) {
                zb += getInventoryCompo(4 + b, 8);
            }
            ca += srFloor(ca * PlayerStrAura[b] / 100);
            Ba += srFloor(Ba * PlayerStrAura[b] / 100);
            if (checkInventoryCompo(4 + b, 24) && srRandom(100) < getInventoryCompo(4 + b, 8)) {
                Va = 1;
            }
            if (checkInventoryCompo(4 + b, 25)) {
                pa += getInventoryCompo(4 + b, 8);
            }
            if (checkInventoryCompo(4 + b, 27) && srRandom(100) < getInventoryCompo(4 + b, 8)) {
                rb = 1;
            }
            if (checkInventoryCompo(4 + b, 29) && srRandom(100) < getInventoryCompo(4 + b, 8)) {
                Aa += srFloor(getInventoryCompo(4 + b, 9) * Aa / 100);
                ka += srFloor(getInventoryCompo(4 + b, 9) * ka / 100);
            }
        } else if (8 == tb) {
            Aa = getItemData(InventoryItem[4 + b], 39);
            ka = getItemData(InventoryItem[4 + b], 40);
            if (checkInventoryCompo(4 + b, 13)) {
                Aa += getInventoryCompo(4 + b, 8);
                ka += getInventoryCompo(4 + b, 9);
            }
            if (checkInventoryCompo(4 + b, 13)) {
                ca += getInventoryCompo(4 + b, 8);
                Ba += getInventoryCompo(4 + b, 9);
            }
            if (checkInventoryCompo(4 + b, 14)) {
                T += getInventoryCompo(4 + b, 8);
                sb += getInventoryCompo(4 + b, 8);
            }
            if (checkInventoryCompo(4 + b, 15)) {
                Aa += getInventoryCompo(4 + b, 8);
                ka += getInventoryCompo(4 + b, 9);
            }
            if (checkInventoryCompo(4 + b, 15)) {
                ca += getInventoryCompo(4 + b, 8);
                Ba += getInventoryCompo(4 + b, 9);
            }
            if (checkInventoryCompo(4 + b, 16)) {
                Ca += getInventoryCompo(4 + b, 8);
                zb += getInventoryCompo(4 + b, 8);
            }
            if (checkInventoryCompo(4 + b, 17)) {
                Aa += getInventoryCompo(4 + b, 8);
                ka += getInventoryCompo(4 + b, 9);
            }
            if (checkInventoryCompo(4 + b, 17)) {
                ca += getInventoryCompo(4 + b, 8);
                Ba += getInventoryCompo(4 + b, 9);
            }
            if (checkInventoryCompo(4 + b, 18)) {
                Aa += getInventoryCompo(4 + b, 8);
                ka += getInventoryCompo(4 + b, 9);
            }
            if (checkInventoryCompo(4 + b, 18)) {
                ca += getInventoryCompo(4 + b, 8);
                Ba += getInventoryCompo(4 + b, 9);
            }
            if (checkInventoryCompo(4 + b, 19)) {
                Ca += getInventoryCompo(4 + b, 8);
                zb += getInventoryCompo(4 + b, 8);
            }
            if (checkInventoryCompo(4 + b, 20)) {
                Ca += getInventoryCompo(4 + b, 8);
                zb += getInventoryCompo(4 + b, 8);
            }
            Aa += srFloor(Aa * PlayerStrAura[b] / 100);
            ka += srFloor(ka * PlayerStrAura[b] / 100);
            ca += srFloor(ca * PlayerStrAura[b] / 100);
            Ba += srFloor(Ba * PlayerStrAura[b] / 100);
        }
        if (checkInventoryCompo(4 + b, 26)) {
            ab += getInventoryCompo(4 + b, 8) + srFloor(ab * getInventoryCompo(4 + b, 9) / 100);
        }
        if ((3 == tb || 4 == tb || 6 == tb) && checkInventoryCompo(4 + b, 43) && srRandom(100) < getInventoryCompo(4 + b, 8)) {
            Ha = getInventoryCompo(4 + b, 9);
        }
        if (checkInventoryCompo(4 + b, 44) && srRandom(100) < getInventoryCompo(4 + b, 8)) {
            ua = 2
        }
    }
    tb = 0;
    if (1 != GameMode) {
        if (6 == q) {
            h = SR_ENEMY.en_current_joint[e][0].x;
            e = SR_ENEMY.en_current_joint[e][0].y;
        } else {
            h = SR_ENEMY.en_current_joint[e][20].x;
            e = SR_ENEMY.en_current_joint[e][20].y;
        }
    } else {
        tb = 1 - (e >> 2);
        h = a.pl_current_joint[e][2].x;
        e = a.pl_current_joint[e][2].y;
    }
    if (q) {
        if (1 == q) {
            q = c + 10 * g.x;
            a = d + 10 * g.y;
            SR_PROJECTILE.pjAdd(tb, q, a, 0, 0, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, ua, pa, Ha, rb, Aa, ka, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, ca, Ba, Oc, Pc, zb);
        } else if (2 == q) {
            g = h - c;
            g /= srAbs(g);
            q = c + 10 * g;
            a = d;
            var ac = g * Pa * .1;
            for (b = 0; b < ab; b++) {
                SR_PROJECTILE.pjAdd(tb, q, a, ac, 0, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, ua, pa, Ha, rb, Aa, ka, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, ca, Ba, Oc, Pc, zb)
            }
        } else if (3 == q) {
            setVec2(g, h - c, e - d);
            var Hd;
            if (0 < m) {
                Hd = m;
            } else {
                Hd = 16;
            }
            var m = srFloor(512 * angleToXAxis(g) / TWOPI);
            m = m - srFloor((ab - 1) * Hd / 2);
            for (b = 0; b < ab; b++) {
                g.x = AngleArray[m & 511][0];
                g.y = -AngleArray[m & 511][1];
                q = c + 10 * g.x;
                a = d + 10 * g.y;
                var ac = g.x * Pa * .1;
                var de = g.y * Pa * .1;
                SR_PROJECTILE.pjAdd(tb, q, a, ac, de, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, ua, pa, Ha, rb, Aa, ka, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, ca, Ba, Oc, Pc, zb);
                m += Hd
            }
        } else if (4 == q) {
            for (b = 0; b < ab; b++) {
                setVec2(g, h - c, e - d);
                if (0 < m) {
                    Hd = m;
                } else {
                    Hd = ab + 4;
                }
                if (1 < ab) {
                    var ac = srFloor(srRandom(512));
                    var ee = srRandom(4) * Hd;
                    g.x += AngleArray[ac][0] * ee;
                    g.y += AngleArray[ac][1] * ee
                }
                q = c;
                a = d;
                ac = g.x / Pa;
                de = (g.y - .5 * Pa * Pa * Ua * .01) / Pa;
                SR_PROJECTILE.pjAdd(tb, q, a, ac, de, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, ua, pa, Ha, rb, Aa, ka, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, ca, Ba, Oc, Pc, zb)
            }
        } else if (5 == q) {
            for (b = 0; b < ab; b++) {
                if (0 == m) {
                    q = c + srRandomRange(-40, 40);
                    a = d + srRandomRange(-60, 0);
                } else {
                    q = c + srRandomRange(-10 * (m - 1), 10 * (m - 1));
                    a = d + srRandomRange(-60, -50);
                }
                setVec2(g, h - q, e - a);
                normalize(g);
                scaleVec2(g, Pa);
                SR_PROJECTILE.pjAdd(tb, q, a, g.x, g.y, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, ua, pa, Ha, rb, Aa, ka, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, ca, Ba, Oc, Pc, zb);
            }
        } else if (6 == q) {
            for (b = 0; b < ab; b++) {
                q = h + srRandomRange(-Pa, Pa);
                a = e + srRandomRange(-Pa, Pa);
                SR_PROJECTILE.pjAdd(tb, q, a, 0, 0, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, ua, pa, Ha, rb, Aa, ka, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, ca, Ba, Oc, Pc, zb);
            }
        } else if (7 == q || 10 == q) {
            g.x = c - a.pl_current_joint[b][5].x;
            g.y = d - a.pl_current_joint[b][5].y;
            if (10 == q && 0 < g.y) {
                g.y = -g.y;
            }
            q = a.pl_current_joint[b][5].x + .5 * g.x;
            a = a.pl_current_joint[b][5].y + .5 * g.y;
            normalize(g);
            scaleVec2(g, .1 * Pa);
            for (b = 0; b < ab; b++) {
                SR_PROJECTILE.pjAdd(tb, q, a, g.x, g.y, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, ua, pa, Ha, rb, Aa, ka, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, ca, Ba, Oc, Pc, zb);
            }
        } else if (12 == q) {
            g = c - a.pl_current_joint[b][0].x;
            g /= srAbs(g);
            q = a.pl_current_joint[b][0].x;
            a = a.pl_current_joint[b][0].y;
            ac = g * Pa * .1;
            for (b = 0; b < ab; b++) {
                SR_PROJECTILE.pjAdd(tb, q, a, ac, 0, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, ua, pa, Ha, rb, Aa, ka, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, ca, Ba, Oc, Pc, zb);
            }
        } else if (8 == q) {
            for (b = 0; b < ab; b++) {
                if (0 == m) {
                    q = h + srRandomRange(-40, 40);
                } else {
                    q = h + srRandomRange(-10 * (m - 1), 10 * (m - 1));
                }
                a = e + srRandomRange(-30, -60);
                SR_PROJECTILE.pjAdd(tb, q, a, 0, 0, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, ua, pa, Ha, rb, Aa, ka, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, ca, Ba, Oc, Pc, zb);
            }
        } else if (9 == q) {
            if (0 == m) {
                q = h;
                a = e;
            } else {
                q = c;
                a = d;
            }
            c = srFloor(512 / ab);
            ac = srFloor(srRandom(c));
            for (b = 0; b < ab; b++) {
                g.x = AngleArray[ac][0] * Pa;
                g.y = AngleArray[ac][1] * Pa;
                SR_PROJECTILE.pjAdd(tb, q, a, g.x, g.y, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, ua, pa, Ha, rb, Aa, ka, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, ca, Ba, Oc, Pc, zb);
                ac += c;
            }
        } else if (11 == q) {
            setVec2(g, h - c, e - d);
            ee = normalize(g);
            if (0 < m) {
                Hd = m;
            } else {
                Hd = 0;
            }
            for (b = 0; b < ab; b++) {
                ac = srRandomRange(-Hd, Hd);
                q = c + g.x * ee / 2 + g.y * ac;
                a = d + g.y * ee / 2 - g.x * ac;
                ac = Pa * (b + 1) / ab * g.x;
                de = Pa * (b + 1) / ab * g.y;
                SR_PROJECTILE.pjAdd(tb, q, a, ac, de, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, ua, pa, Ha, rb, Aa, ka, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, ca, Ba, Oc, Pc, zb)
            }
        }
    }
}

/*
歩く
*/
function plWalk(a, b) {
    if (0 != PlayerAutoMove[b] || 1 == GameMode) {
        if (0 < a.pl_walk_interval[b]) {
            a.pl_walk_interval[b]--;
        } else if (!(20 > srFloor(100 * PlayerCurrentLp[b] / PlayerMaxLp[b]) && 1 != GameMode && 0 == PartyMoveIfDying)) {
            var c = .5 * (a.pl_current_joint[b][9].x + a.pl_current_joint[b][10].x);
            var d = .5 * (a.pl_current_joint[b][9].y + a.pl_current_joint[b][10].y);
            var e = PlayerAttackRange[b];
            var g;
            if (1 != GameMode) {
                g = findEnemy(c - 200 - e, d - 20 - e, c + 200 + e, d + 100 + e);
            } else {
                g = plFindPlayer(c - 600, d - 300, c + 600, d + 300, 1 - (b >> 2) << 2);
            }
            if (-1 != g) {
                a.pl_walk_interval[b] = 15;
                e = .6;
                //if (c < (1 != GameMode ? SR_ENEMY.a[g][20].x : a.a[g][2].x)) {
                if (1 != GameMode && c < SR_ENEMY.en_current_joint[g][20].x || 1 == GameMode && c < a.pl_current_joint[g][2].x) {
                    c = srFloor(srClampA(c + 14, 0, 511) / 8);
                    d = srFloor(srClampA(d - 6, 8, 383) / 8);
                    if (0 <= SR_TERRAIN.tr_data[d][c] && 8 >= SR_TERRAIN.tr_data[d][c]) {
                        e = 2;
                    }
                    if (0 <= SR_TERRAIN.tr_data[d - 1][c] && 8 >= SR_TERRAIN.tr_data[d - 1][c]) {
                        e = 4;
                    }
                    if (a.pl_current_joint[b][9].x < a.pl_current_joint[b][10].x) {
                        a.pl_current_joint[b][7].x += 4;
                        a.pl_current_joint[b][7].y -= 3 * e
                    } else {
                        a.pl_current_joint[b][8].x += 4;
                        a.pl_current_joint[b][8].y -= 3 * e
                    }
                } else {
                    c = srFloor(srClampA(c - 14, 0, 511) / 8);
                    d = srFloor(srClampA(d - 6, 8, 383) / 8);
                    if (0 <= SR_TERRAIN.tr_data[d][c] && 8 >= SR_TERRAIN.tr_data[d][c]) {
                        e = 2;
                    }
                    if (0 <= SR_TERRAIN.tr_data[d - 1][c] && 8 >= SR_TERRAIN.tr_data[d - 1][c]) {
                        e = 4;
                    }
                    if (a.pl_current_joint[b][9].x > a.pl_current_joint[b][10].x) {
                        a.pl_current_joint[b][7].x -= 4;
                        a.pl_current_joint[b][7].y -= 3 * e
                    } else {
                        a.pl_current_joint[b][8].x -= 4;
                        a.pl_current_joint[b][8].y -= 3 * e
                    }
                }
            }
        }
    }
}

/*
泳ぐ
*/
function plSwim(a, b) {
    if (0 != PlayerAutoMove[b] && !(20 > srFloor(100 * PlayerCurrentLp[b] / PlayerMaxLp[b]) && 0 == PartyMoveIfDying)) {
        var c = .5 * (a.pl_current_joint[b][9].x + a.pl_current_joint[b][10].x);
        var d = .5 * (a.pl_current_joint[b][9].y + a.pl_current_joint[b][10].y);
        var e = PlayerAttackRange[b];
        if (1 != GameMode) {
            e = findEnemy(c - 200 - e, d - 100 - e, c + 200 + e, d + 100 + e);
        } else {
            e = plFindPlayer(c - 600, d - 300, c + 600, d + 300, 1 - (b >> 2) << 2);
        }
        if (-1 != e && 9 == SR_TERRAIN.tr_data[srFloor(srClampA(d, 8, 383) / 8)][srFloor(srClampA(c, 0, 511) / 8)]) {
            //if (c < (1 != GameMode ? SR_ENEMY.a[e][20].x : a.a[e][2].x)) {
            if (1 != GameMode && c < SR_ENEMY.en_current_joint[e][20].x || 1 == GameMode && c < a.pl_current_joint[e][2].x) {
                a.pl_current_joint[b][0].x += .25;
                a.pl_current_joint[b][1].x += .25;
            } else {
                a.pl_current_joint[b][0].x -= .25;
                a.pl_current_joint[b][1].x -= .25;
            }
            //if (d < (1 != GameMode ? SR_ENEMY.a[e][20].y : a.a[e][2].y)) {
            if (1 != GameMode && d < SR_ENEMY.en_current_joint[e][20].y || 1 == GameMode && d < a.pl_current_joint[e][2].y) {
                a.pl_current_joint[b][0].y += .25;
                a.pl_current_joint[b][1].y += .25;
            } else {
                a.pl_current_joint[b][0].y -= .25;
                a.pl_current_joint[b][1].y -= .25;
            }
            a.pl_current_joint[b][0].x += srRandomRange(-.25, .25);
            a.pl_current_joint[b][0].y += srRandomRange(-.25, .25);
            a.pl_current_joint[b][1].x += srRandomRange(-.25, .25);
            a.pl_current_joint[b][1].y += srRandomRange(-.25, .25)
        }
    }
}

//WINDOW.fff = SrPlayer.prototype.plMain;
/*
メインの動き
*/
SrPlayer.prototype.plMain = function () {
    var a, b, c;
    this.plSetDrag();
    var d;
    if (1 != GameMode) {
        d = 4;
    } else {
        d = 8;
    }
    for (a = 0; a < d; a++) {
        if (0 < this.pl_poison_time[a] && 0 < PlayerCurrentLp[a]) {
            this.pl_poison_time[a]--;
            antiCheatCheck();
            PlayerCurrentLp[a] = srMax(PlayerCurrentLp[a] - this.pl_poison_damage[a], 0);
            antiCheatSet()
        }
        if (0 < this.pl_freeze_time[a] && 0 < PlayerCurrentLp[a]) {
            this.pl_freeze_time[a]--;
        } else {
            if (0 < this.pl_slow_time[a] && 0 < PlayerCurrentLp[a]) {
                this.pl_slow_time[a]--;
                if (srRandom(100) < this.pl_slow_rate[a]) {
                    continue;
                }
            }
            if (0 != PlayerCurrentLp[a]) {
                if (0 == InventoryItem[4 + a]) {
                    this.pl_class[a] = 0;
                } else {
                    this.pl_class[a] = PlayerClass[a];
                }
            }
            if ((55 != CurrentStage && 89 != CurrentStage && CurrentArea != STAGE_DATA[CurrentStage].length - 1 || 0 == SR_ENEMY.en_last_index) && 0 < (this.pl_on_ground[a] & 1) && 0 != PlayerCurrentLp[a]) {
                b = (this.pl_current_joint[a][9].x + this.pl_current_joint[a][10].x) / 2;
                c = (this.pl_current_joint[a][9].y + this.pl_current_joint[a][10].y) / 2;
                var e = SR_TERRAIN.tr_high_surface[63];
                if (7 == STAGE_DATA[CurrentStage][CurrentArea][1]) {
                    e = SR_TERRAIN.tr_low_surface[63];
                }
                if (500 < b && 10 > srAbs(8 * e - c)) {
                    if (CurrentArea != STAGE_DATA[CurrentStage].length - 1) {
                        SignTouch = 1
                    } else {
                        SignTouch = 2
                    }
                }
            }
            this.pl_hover_time[a]++;
            if (0 == PlayerCurrentLp[a]) {
                for (b = 0; 11 > b; b++) {
                    moveJoint(this.pl_current_joint[a][b], this.pl_last_joint[a][b], .05, .99);
                }
            } else if (2 == this.pl_on_ground[a]) {
                for (b = 0; 11 > b; b++) {
                    moveJoint(this.pl_current_joint[a][b], this.pl_last_joint[a][b], .01, .99);
                }
            } else if (10 > this.pl_hover_time[a]) {
                moveJoint(this.pl_current_joint[a][0], this.pl_last_joint[a][0], -.2, .99);
                moveJoint(this.pl_current_joint[a][1], this.pl_last_joint[a][1], 0, .99);
                moveJoint(this.pl_current_joint[a][2], this.pl_last_joint[a][2], -.1, .99);
                moveJoint(this.pl_current_joint[a][3], this.pl_last_joint[a][3], 0, .99);
                moveJoint(this.pl_current_joint[a][4], this.pl_last_joint[a][4], 0, .99);
                moveJoint(this.pl_current_joint[a][5], this.pl_last_joint[a][5], 0, .99);
                moveJoint(this.pl_current_joint[a][6], this.pl_last_joint[a][6], 0, .99);
                moveJoint(this.pl_current_joint[a][7], this.pl_last_joint[a][7], 0, .99);
                moveJoint(this.pl_current_joint[a][8], this.pl_last_joint[a][8], 0, .99);
                moveJoint(this.pl_current_joint[a][9], this.pl_last_joint[a][9], .3, .99);
                moveJoint(this.pl_current_joint[a][10], this.pl_last_joint[a][10], .3, .99);
            } else {
                for (b = 0; 11 > b; b++) {
                    moveJoint(this.pl_current_joint[a][b], this.pl_last_joint[a][b], .05, .99);
                }
            }
            if (0 == PlayerCurrentLp[a] && this.pl_class[a] != PLAYER_CLASS_DEAD) {
                this.pl_class[a] = PLAYER_CLASS_DEAD;
                for (b = 0; 11 > b; b++) {
                    this.pl_current_joint[a][b].x += srRandomRange(-2, 2);
                    this.pl_current_joint[a][b].y += srRandomRange(-1, -3);
                }
                if (1 == GameMode) {
                    e = 1 - (a >> 2) << 2;
                    for (b = 0; 4 > b; b++) {
                        if (checkInventoryCompo(4 + e + b, 41) && srRandom(100) < getInventoryCompo(4 + e + b, 8)) {
                            c = plFindPlayer(this.pl_current_joint[a][0].x - 600, this.pl_current_joint[a][0].y - 300, this.pl_current_joint[a][0].x + 600, this.pl_current_joint[a][0].y + 300, a >> 2 << 2);
                            if (-1 != c) {
                                plProjectileAttack(SR_PLAYER, getInventoryCompo(4 + e + b, 9), this.pl_current_joint[a][0].x, this.pl_current_joint[a][0].y, c)
                            }
                        }
                    }
                }
            }
            if (this.pl_held_player == a && 1 != GameMode) {
                if (0 == PlayerCurrentLp[a]) {
                    this.pl_current_joint[this.pl_held_player][this.pl_held_joint].x += (MouseX1 - this.pl_current_joint[this.pl_held_player][this.pl_held_joint].x) * .04;
                    this.pl_current_joint[this.pl_held_player][this.pl_held_joint].y += (MouseY1 - this.pl_current_joint[this.pl_held_player][this.pl_held_joint].y) * .04;
                } else {
                    this.pl_current_joint[this.pl_held_player][this.pl_held_joint].x += (MouseX1 - this.pl_current_joint[this.pl_held_player][this.pl_held_joint].x) * .2;
                    this.pl_current_joint[this.pl_held_player][this.pl_held_joint].y += (MouseY1 - this.pl_current_joint[this.pl_held_player][this.pl_held_joint].y) * .2;
                }
            }
            if (!this.pl_class[a] || 1 == this.pl_class[a]) {
                this.plBoxer(a);
            } else if (2 == this.pl_class[a]) {
                this.plGradiator(a);
            } else if (3 == this.pl_class[a]) {
                this.plSniper(a);
            } else if (4 == this.pl_class[a]) {
                this.plMagician(a);
            } else if (5 == this.pl_class[a]) {
                this.plPriest(a);
            } else if (6 == this.pl_class[a]) {
                this.plGunner(a);
            } else if (7 == this.pl_class[a]) {
                this.plWhipper(a);
            } else if (8 == this.pl_class[a]) {
                this.plAngel(a);
            } else if (this.pl_class[a] == PLAYER_CLASS_DEAD) {
                pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][2], 3.6, .5, .5);
                pullJoints(this.pl_current_joint[a][3], this.pl_current_joint[a][5], 4.8, .5, .5);
                pullJoints(this.pl_current_joint[a][4], this.pl_current_joint[a][6], 4.8, .5, .5);
                pullJoints(this.pl_current_joint[a][7], this.pl_current_joint[a][9], 4.8, .5, .5);
                pullJoints(this.pl_current_joint[a][8], this.pl_current_joint[a][10], 4.8, .5, .5);
            }
            if (0 < (this.pl_on_ground[a] & 1)) {
                this.pl_hover_time[a] = 0;
            }
            for (b = this.pl_on_ground[a] = 0; 11 > b; b++) {
                this.plMove(a, b)
            }
        }
    }
};

//WINDOW.fff = SrPlayer.prototype.plBoxer;
/*
boxer
*/
SrPlayer.prototype.plBoxer = function (a) {
    var b;
    var c;
    var d = new SrVec2;
    var e = 1 - (a >> 2) << 2;
    b = PlayerMinAt[a];
    var g = PlayerMaxAt[a];
    var h = PlayerMinAgi[a] + srRandomInt(PlayerMaxAgi[a] - PlayerMinAgi[a] + 1);
    c = PlayerAttackRange[a];
    if (this.pl_on_ground[a] && this.pl_class[a] && this.pl_held_player != a) {
        if (0 < this.pl_attack_cooldown[a]) {
            this.pl_attack_cooldown[a]--;
        }
        var q = .5 * (this.pl_current_joint[a][9].x + this.pl_current_joint[a][10].x);
        var m = .5 * (this.pl_current_joint[a][9].y + this.pl_current_joint[a][10].y);
        if (1 != GameMode) {
            c = findEnemy(q - c, m - c, q + c, m);
        } else {
            c = plFindPlayer(q - c, m - c, q + c, m, e);
        }
        if (!this.pl_attack_cooldown[a] && -1 != c) {
            this.pl_attack_cooldown[a] = h;
            //q < (1 != GameMode ? SR_ENEMY.a[c][20].x : this.a[c][2].x)  ? this.a[a][5].x < this.a[a][6].x  ? (this.a[a][5].x += 4, this.a[a][4].x -= 4, this.a[a][2].y += 1, this.b[a] = 5)  : (this.a[a][6].x += 4, this.a[a][3].x -= 4, this.a[a][2].y += 1, this.b[a] = 6): this.a[a][5].x > this.a[a][6].x ? (this.a[a][5].x -= 4, this.a[a][4].x += 4, this.a[a][2].y += 1, this.b[a] = 5): (this.a[a][6].x -= 4, this.a[a][3].x += 4, this.a[a][2].y += 1, this.b[a] = 6);
            if (1 != GameMode && q < SR_ENEMY.en_current_joint[c][20].x || 1 == GameMode && q < this.pl_current_joint[c][2].x) {
                if (this.pl_current_joint[a][5].x < this.pl_current_joint[a][6].x) {
                    this.pl_current_joint[a][5].x += 4;
                    this.pl_current_joint[a][4].x -= 4;
                    this.pl_current_joint[a][2].y += 1;
                    this.pl_attack_point[a] = 5
                } else {
                    this.pl_current_joint[a][6].x += 4;
                    this.pl_current_joint[a][3].x -= 4;
                    this.pl_current_joint[a][2].y += 1;
                    this.pl_attack_point[a] = 6
                }
            } else {
                if (this.pl_current_joint[a][5].x > this.pl_current_joint[a][6].x) {
                    this.pl_current_joint[a][5].x -= 4;
                    this.pl_current_joint[a][4].x += 4;
                    this.pl_current_joint[a][2].y += 1;
                    this.pl_attack_point[a] = 5;
                } else {
                    this.pl_current_joint[a][6].x -= 4;
                    this.pl_current_joint[a][3].x += 4;
                    this.pl_current_joint[a][2].y += 1;
                    this.pl_attack_point[a] = 6;
                }
            }
            antiCheatCheck();
            h = getItemData(InventoryItem[4 + a], 36);
            PlayerMp[a] = srMin(PlayerMp[a] + PlayerMag[a], h);
            if (PlayerMp[a] == h && 0 < h || -1 == h) {
                PlayerMp[a] = 0;
                plProjectileAttack(this, a, this.pl_current_joint[a][this.pl_attack_point[a]].x, this.pl_current_joint[a][this.pl_attack_point[a]].y, c);
            }
            if (checkInventoryCompo(4 + a, 46)) {
                h = getInventoryCompo(4 + a, 8);
                PlayerCurrentLp[a] = srClampA(PlayerCurrentLp[a] + h, 0, PlayerMaxLp[a]);
                SR_INDICATOR.inAdd(this.pl_current_joint[a][0].x, this.pl_current_joint[a][0].y, 0, h, 65280);
            }
            antiCheatSet()
        }
        if (-1 == c) {
            plWalk(this, a);
        }
        plSwim(this, a)
    }
    if (-1 != this.pl_attack_point[a] && this.pl_class[a] && this.pl_held_player != a) {
        c = getItemData(InventoryItem[4 + a], 9);
        if (checkInventoryCompo(4 + a, 27) && srRandom(100) < getInventoryCompo(4 + a, 8)) {
            c = 1;
        }
        if (checkInventoryCompo(4 + a, 29) && srRandom(100) < getInventoryCompo(4 + a, 8)) {
            b += srFloor(getInventoryCompo(4 + a, 9) * b / 100);
            g += srFloor(getInventoryCompo(4 + a, 9) * g / 100);
        }
        h = 12;
        q = 8;
        if (checkInventoryCompo(4 + a, 42)) {
            h += srFloor(12 * getInventoryCompo(4 + a, 8) / 100);
            q += srFloor(8 * getInventoryCompo(4 + a, 8) / 100);
        }
        if (1 != GameMode) {
            e = enGetDamage(c, 0, 0, b, g, this.pl_current_joint[a][this.pl_attack_point[a]].x, this.pl_current_joint[a][this.pl_attack_point[a]].y, h, q)
        } else {
            e = plGetDamage(c, 0, 0, b, g, this.pl_current_joint[a][this.pl_attack_point[a]].x, this.pl_current_joint[a][this.pl_attack_point[a]].y, h, q, e)
        }
        if (-1 != e) {
            this.pl_attack_point[a] = -1;
            if (checkInventoryCompo(4 + a, 11)) {
                h = srMax(1, srFloor(this.pl_damage_dealt * getInventoryCompo(4 + a, 8) / 100));
                antiCheatCheck();
                PlayerCurrentLp[a] = srClampA(PlayerCurrentLp[a] + h, 0, PlayerMaxLp[a]);
                antiCheatSet();
                SR_INDICATOR.inAdd(this.pl_current_joint[a][0].x, this.pl_current_joint[a][0].y, 0, h, 65280);
            }
            if (checkInventoryCompo(4 + a, 12) && !GameMode && srRandom(100) < getInventoryCompo(4 + a, 8)) {
                SR_DROP.dpAdd(this.pl_current_joint[a][0].x, this.pl_current_joint[a][0].y, 2, 0, 0);
            }
            if (checkInventoryCompo(4 + a, 37) && !GameMode && srRandom(100) < getInventoryCompo(4 + a, 8)) {
                g = 100;
                for (b = 0; 4 > b; b++) {
                    if (checkInventoryCompo(4 + b, 35)) {
                        g += getInventoryCompo(4 + b, 8);
                    }
                }
                SR_DROP.dpAdd(this.pl_current_joint[a][0].x, this.pl_current_joint[a][0].y, 1, srFloor(this.pl_damage_dealt * g / 100), 0)
            }
            if (checkInventoryCompo(4 + a, 43) && srRandom(100) < getInventoryCompo(4 + a, 8)) {
                b = getInventoryCompo(4 + a, 9);
                if (1 != GameMode) {
                    setDistance(d, SR_ENEMY.en_current_joint[e][0], this.pl_current_joint[a][1]);
                } else {
                    setDistance(d, SR_PLAYER.pl_current_joint[e][1], this.pl_current_joint[a][1]);
                }
                normalize(d);
                scaleVec2(d, .2 * b);
                if (1 != GameMode) {
                    scaleVec2(d, ENEMY_KNOCKBACK_VAR[ENEMY_DATA[SR_ENEMY.en_id[e]][ENEMY_TYPE]] / ENEMY_DATA[SR_ENEMY.en_id[e]][ENEMY_SIZE]);
                } else {
                    scaleVec2(d, .1);
                }
                if (1 != GameMode) {
                    //vecSub
                    SR_ENEMY.en_last_joint[e][0].vecSub(d)
                } else {
                    //vecSub
                    SR_PLAYER.pl_last_joint[e][0].vecSub(d)
                }
            }
        }
    }
    pullJoints(this.pl_current_joint[a][0], this.pl_current_joint[a][1], 3.6, .5, .5);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][2], 3.6, .5, .5);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][3], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][4], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][3], this.pl_current_joint[a][5], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][4], this.pl_current_joint[a][6], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][2], this.pl_current_joint[a][7], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][2], this.pl_current_joint[a][8], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][7], this.pl_current_joint[a][9], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][8], this.pl_current_joint[a][10], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][7], this.pl_current_joint[a][8], 6, .1, .1)
};

//WINDOW.fff = SrPlayer.prototype.plGradiator;
/*
gradiator
*/
SrPlayer.prototype.plGradiator = function (a) {
    var b;
    var c;
    var d = new SrVec2;
    var e = 1 - (a >> 2) << 2;
    b = PlayerMinAt[a];
    var g = PlayerMaxAt[a];
    var h = PlayerMinAgi[a] + srRandomInt(PlayerMaxAgi[a] - PlayerMinAgi[a] + 1);
    var q = PlayerAttackRange[a];
    if (this.pl_on_ground[a] && this.pl_held_player != a) {
        if (0 < this.pl_attack_cooldown[a]) {
            this.pl_attack_cooldown[a]--;
        }
        var m = .5 * (this.pl_current_joint[a][9].x + this.pl_current_joint[a][10].x);
        var l = .5 * (this.pl_current_joint[a][9].y + this.pl_current_joint[a][10].y);
        if (1 != GameMode) {
            c = findEnemy(m - q, l - q, m + q, l);
        } else {
            c = plFindPlayer(m - q, l - q, m + q, l, e);
        }
        if (!this.pl_attack_cooldown[a] && -1 != c) {
            this.pl_attack_cooldown[a] = h;
            //if (m < (1 != GameMode ? SR_ENEMY.a[c][20].x : this.a[c][2].x)) {
            if (1 != GameMode && m < SR_ENEMY.en_current_joint[c][20].x || 1 == GameMode && m < this.pl_current_joint[c][2].x) {
                this.pl_current_joint[a][5].x += 3;
                this.pl_current_joint[a][5].y += .2 * (l - 2 - this.pl_current_joint[a][5].y);
                this.pl_current_joint[a][6].x = this.pl_current_joint[a][5].x - 2;
                this.pl_current_joint[a][6].y = this.pl_current_joint[a][5].y;
                this.pl_current_joint[a][1].x -= 3;
            } else {
                this.pl_current_joint[a][5].x -= 3;
                this.pl_current_joint[a][5].y += .2 * (l - 2 - this.pl_current_joint[a][5].y);
                this.pl_current_joint[a][6].x = this.pl_current_joint[a][5].x + 2;
                this.pl_current_joint[a][6].y = this.pl_current_joint[a][5].y;
                this.pl_current_joint[a][1].x += 3;
            }
            this.pl_attack_point[a] = 5;
            antiCheatCheck();
            h = getItemData(InventoryItem[4 + a], 36);
            PlayerMp[a] = srMin(PlayerMp[a] + PlayerMag[a], h);
            if (PlayerMp[a] == h && 0 < h) {
                PlayerMp[a] = 0;
                this.pl_skill_attack_time[a] = getItemData(InventoryItem[4 + a], 41);
            }
            if (checkInventoryCompo(4 + a, 46)) {
                h = getInventoryCompo(4 + a, 8);
                PlayerCurrentLp[a] = srClampA(PlayerCurrentLp[a] + h, 0, PlayerMaxLp[a]);
                SR_INDICATOR.inAdd(this.pl_current_joint[a][0].x, this.pl_current_joint[a][0].y, 0, h, 65280);
            }
            antiCheatSet();
        }
        if (-1 == c) {
            plWalk(this, a);
        }
        plSwim(this, a)
    }
    if (-1 != this.pl_attack_point[a]) {
        if (checkInventoryCompo(4 + a, 29) && srRandom(100) < getInventoryCompo(4 + a, 8)) {
            b += srFloor(getInventoryCompo(4 + a, 9) * b / 100);
            g += srFloor(getInventoryCompo(4 + a, 9) * g / 100);
        }
        setDistance(d, this.pl_current_joint[a][5], this.pl_current_joint[a][6]);
        normalize(d);
        scaleVec2(d, q);
        c = this.pl_current_joint[a][6].x + d.x / 2;
        h = this.pl_current_joint[a][6].y + d.y / 2;
        //if(-1 != (1 != GameMode ? enGetDamage(1, 0, 0, b, g, c, h, srAbs(d.x), srAbs(d.y)) : plGetDamage(1, 0, 0, b, g, c, h, srAbs(d.x), srAbs(d.y), e)) ) {
        if (1 != GameMode && -1 != enGetDamage(1, 0, 0, b, g, c, h, srAbs(d.x), srAbs(d.y)) || 1 == GameMode && -1 != plGetDamage(1, 0, 0, b, g, c, h, srAbs(d.x), srAbs(d.y), e)) {
            this.pl_attack_point[a] = -1;
            if (checkInventoryCompo(4 + a, 11)) {
                h = srMax(1, srFloor(this.pl_damage_dealt * getInventoryCompo(4 + a, 8) / 100));
                antiCheatCheck();
                PlayerCurrentLp[a] = srClampA(PlayerCurrentLp[a] + h, 0, PlayerMaxLp[a]);
                antiCheatSet();
                SR_INDICATOR.inAdd(this.pl_current_joint[a][0].x, this.pl_current_joint[a][0].y, 0, h, 65280);
            }
            if (checkInventoryCompo(4 + a, 12) && !GameMode && srRandom(100) < getInventoryCompo(4 + a, 8)) {
                SR_DROP.dpAdd(this.pl_current_joint[a][0].x, this.pl_current_joint[a][0].y, 2, 0, 0)
            }
        }
        if (checkInventoryCompo(4 + a, 37) && !GameMode && srRandom(100) < getInventoryCompo(4 + a, 8)) {
            g = 100;
            for (b = 0; 4 > b; b++) {
                if (checkInventoryCompo(4 + b, 35)) {
                    g += getInventoryCompo(4 + b, 8);
                }
            }
            SR_DROP.dpAdd(this.pl_current_joint[a][0].x, this.pl_current_joint[a][0].y, 1, srFloor(this.pl_damage_dealt * g / 100), 0)
        }
    }
    pullJoints(this.pl_current_joint[a][0], this.pl_current_joint[a][1], 3.6, .5, .5);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][2], 3.6, .5, .5);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][3], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][4], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][3], this.pl_current_joint[a][5], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][4], this.pl_current_joint[a][6], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][3], this.pl_current_joint[a][4], 4.8, .01, .01);
    pullJoints(this.pl_current_joint[a][5], this.pl_current_joint[a][6], 2.4, .5, .5);
    pullJoints(this.pl_current_joint[a][2], this.pl_current_joint[a][7], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][2], this.pl_current_joint[a][8], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][7], this.pl_current_joint[a][9], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][8], this.pl_current_joint[a][10], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][7], this.pl_current_joint[a][8], 6, .1, .1);
    if (0 < this.pl_skill_attack_time[a]) {
        this.pl_skill_attack_time[a]--;
        setDistance(d, this.pl_current_joint[a][5], this.pl_current_joint[a][6]);
        normalize(d);
        scaleVec2(d, q);
        d.vecAdd(this.pl_current_joint[a][6]);
        if (1 != GameMode) {
            plProjectileAttack(this, a, d.x, d.y, 0)
        } else {
            plProjectileAttack(this, a, d.x, d.y, e)
        }
    }
};

//WINDOW.fff = SrPlayer.prototype.plSniper;
/*
sniper
*/
SrPlayer.prototype.plSniper = function (a) {
    var b;
    b = 1 - (a >> 2) << 2;
    var c = PlayerMinAgi[a] + srRandomInt(PlayerMaxAgi[a] - PlayerMinAgi[a] + 1);
    var d = PlayerAttackRange[a];
    var e = .5 * (this.pl_current_joint[a][9].x + this.pl_current_joint[a][10].x);
    var g = .5 * (this.pl_current_joint[a][9].y + this.pl_current_joint[a][10].y);
    if (1 != GameMode) {
        b = findEnemy(e - d, g - d, e + d, g + d);
    } else {
        b = plFindPlayer(e - d, g - d, e + d, g + d, b);
    }
    if (-1 != b) {
        if (1 != GameMode && e < SR_ENEMY.en_current_joint[b][20].x || 1 == GameMode && e < this.pl_current_joint[b][2].x) {
            this.pl_current_joint[a][6].x += .2;
            this.pl_current_joint[a][6].y -= .2;
            this.pl_current_joint[a][5].x -= .2
        } else {
            this.pl_current_joint[a][6].x -= .2;
            this.pl_current_joint[a][6].y -= .2;
            this.pl_current_joint[a][5].x += .2;
        }
        this.pl_current_joint[a][5].y += .2;
    }
    if (this.pl_on_ground[a] && this.pl_held_player != a) {
        if (0 < this.pl_attack_cooldown[a]) {
            this.pl_attack_cooldown[a]--;
        }
        if (!this.pl_attack_cooldown[a]) {
            if (-1 != b) {
                this.pl_attack_cooldown[a] = c;
                pullJoints(this.pl_current_joint[a][5], this.pl_current_joint[a][6], 2, .2, .2);
                this.pl_attack_point[a] = 6;
            }
            if (-1 != this.pl_attack_point[a]) {
                plProjectileAttack(this, a, this.pl_current_joint[a][6].x, this.pl_current_joint[a][6].y, b);
                this.pl_attack_point[a] = -1;
                if (checkInventoryCompo(4 + a, 46)) {
                    c = getInventoryCompo(4 + a, 8);
                    antiCheatCheck();
                    PlayerCurrentLp[a] = srClampA(PlayerCurrentLp[a] + c, 0, PlayerMaxLp[a]);
                    antiCheatSet();
                    SR_INDICATOR.inAdd(this.pl_current_joint[a][0].x, this.pl_current_joint[a][0].y, 0, c, 65280);
                }
            }
        }
        if (-1 == b) {
            plWalk(this, a);
            plSwim(this, a);
        }
    }
    pullJoints(this.pl_current_joint[a][0], this.pl_current_joint[a][1], 3.6, .5, .5);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][2], 3.6, .5, .5);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][3], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][4], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][3], this.pl_current_joint[a][5], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][4], this.pl_current_joint[a][6], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][5], this.pl_current_joint[a][6], 9.6, .02, .02);
    pullJoints(this.pl_current_joint[a][2], this.pl_current_joint[a][7], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][2], this.pl_current_joint[a][8], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][7], this.pl_current_joint[a][9], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][8], this.pl_current_joint[a][10], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][7], this.pl_current_joint[a][8], 6, .1, .1)
};

//WINDOW.fff = SrPlayer.prototype.plMagician;
/*
magician
*/
SrPlayer.prototype.plMagician = function (a) {
    var b;
    b = 1 - (a >> 2) << 2;
    var c = PlayerMinAgi[a] + srRandomInt(PlayerMaxAgi[a] - PlayerMinAgi[a] + 1);
    var d = PlayerAttackRange[a];
    var e = .5 * (this.pl_current_joint[a][9].x + this.pl_current_joint[a][10].x);
    var g = .5 * (this.pl_current_joint[a][9].y + this.pl_current_joint[a][10].y);
    if (1 != GameMode) {
        b = findEnemy(e - d, g - d, e + d, g + d);
    } else {
        b = plFindPlayer(e - d, g - d, e + d, g + d, b);
    }
    if (-1 != b) {
        if (1 != GameMode && e < SR_ENEMY.en_current_joint[b][20].x || 1 == GameMode && e < this.pl_current_joint[b][2].x) {
            this.pl_current_joint[a][5].x += .1;
            this.pl_current_joint[a][6].x += .1;
            this.pl_current_joint[a][1].x -= .2;
        } else {
            this.pl_current_joint[a][5].x -= .1;
            this.pl_current_joint[a][6].x -= .1;
            this.pl_current_joint[a][1].x += .2;
        }
    }
    if (this.pl_on_ground[a] && this.pl_held_player != a) {
        if (0 < this.pl_attack_cooldown[a]) {
            this.pl_attack_cooldown[a]--;
        }
        if (!this.pl_attack_cooldown[a]) {
            if (-1 != b) {
                this.pl_attack_cooldown[a] = c;
                if (1 != GameMode && e < SR_ENEMY.en_current_joint[b][20].x || 1 == GameMode && e < this.pl_current_joint[b][2].x) {
                    pullJoints(this.pl_current_joint[a][5], this.pl_current_joint[a][6], 0, .1, .1);
                    this.pl_attack_point[a] = 6;
                } else {
                    pullJoints(this.pl_current_joint[a][5], this.pl_current_joint[a][6], 0, .1, .1);
                    this.pl_attack_point[a] = 5;
                }
            }
            if (-1 != this.pl_attack_point[a]) {
                plProjectileAttack(this, a, this.pl_current_joint[a][6].x, this.pl_current_joint[a][6].y, b);
                this.pl_attack_point[a] = -1;
                if (checkInventoryCompo(4 + a, 46)) {
                    c = getInventoryCompo(4 + a, 8);
                    antiCheatCheck();
                    PlayerCurrentLp[a] = srClampA(PlayerCurrentLp[a] + c, 0, PlayerMaxLp[a]);
                    antiCheatSet();
                    SR_INDICATOR.inAdd(this.pl_current_joint[a][0].x, this.pl_current_joint[a][0].y, 0, c, 65280);
                }
            }
        }
        if (-1 == b) {
            plWalk(this, a);
            plSwim(this, a);
        }
    }
    pullJoints(this.pl_current_joint[a][0], this.pl_current_joint[a][1], 3.6, .5, .5);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][2], 3.6, .5, .5);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][3], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][4], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][3], this.pl_current_joint[a][5], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][4], this.pl_current_joint[a][6], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][5], this.pl_current_joint[a][6], 10.8, .01, .01);
    pullJoints(this.pl_current_joint[a][2], this.pl_current_joint[a][7], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][2], this.pl_current_joint[a][8], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][7], this.pl_current_joint[a][9], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][8], this.pl_current_joint[a][10], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][7], this.pl_current_joint[a][8], 6, .1, .1)
};

//WINDOW.fff = SrPlayer.prototype.plPriest;
/*
priest
*/
SrPlayer.prototype.plPriest = function (a) {
    var b;
    var c;
    var d = 1 - (a >> 2) << 2;
    b = PlayerMinAgi[a] + srRandomInt(PlayerMaxAgi[a] - PlayerMinAgi[a] + 1);
    c = PlayerAttackRange[a];
    var e = .5 * (this.pl_current_joint[a][9].x + this.pl_current_joint[a][10].x);
    var g = .5 * (this.pl_current_joint[a][9].y + this.pl_current_joint[a][10].y);
    if (1 != GameMode) {
        c = findEnemy(e - c, g - c / 2, e + c, g + c / 2);
    } else {
        c = plFindPlayer(e - c, g - c / 2, e + c, g + c / 2, d);
    }
    if (this.pl_on_ground[a] && this.pl_held_player != a) {
        if (0 < this.pl_attack_cooldown[a]) {
            this.pl_attack_cooldown[a]--;
        }
        if (!this.pl_attack_cooldown[a] && -1 != c) {
            this.pl_attack_cooldown[a] = b;
            this.pl_current_joint[a][6].y -= 2;
            this.pl_current_joint[a][5].y += 2;
            //priestは直近の敵だけでなく範囲内のすべての敵に攻撃する
            if (1 != GameMode) {
                for (b = 0; b < SR_ENEMY.en_last_index; b++) {
                    if (0 != SR_ENEMY.en_is_found[b]) {
                        plProjectileAttack(this, a, this.pl_current_joint[a][6].x, this.pl_current_joint[a][6].y, b);
                    }
                }
            } else {
                for (b = d; b < d + 4; b++) {
                    if (0 != SR_PLAYER.pl_is_found[b]) {
                        plProjectileAttack(this, a, this.pl_current_joint[a][6].x, this.pl_current_joint[a][6].y, b);
                    }
                }
            }
            if (checkInventoryCompo(4 + a, 46)) {
                d = getInventoryCompo(4 + a, 8);
                antiCheatCheck();
                for (b = a >> 2 << 2; b < (a >> 2 << 2) + 4; b++) {
                    if (a != b && 0 != PlayerCurrentLp[b]) {
                        PlayerCurrentLp[b] = srClampA(PlayerCurrentLp[b] + d, 0, PlayerMaxLp[b]);
                        SR_INDICATOR.inAdd(this.pl_current_joint[b][0].x, this.pl_current_joint[b][0].y, 0, d, 65280);
                    }
                }
                antiCheatSet()
            }
        }
        if (-1 == c) {
            plWalk(this, a);
            plSwim(this, a)
        }
    }
    pullJoints(this.pl_current_joint[a][0], this.pl_current_joint[a][1], 3.6, .5, .5);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][2], 3.6, .5, .5);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][3], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][4], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][3], this.pl_current_joint[a][5], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][4], this.pl_current_joint[a][6], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][2], this.pl_current_joint[a][7], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][2], this.pl_current_joint[a][8], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][7], this.pl_current_joint[a][9], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][8], this.pl_current_joint[a][10], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][7], this.pl_current_joint[a][8], 6, .1, .1)
};

//WINDOW.fff = SrPlayer.prototype.plGunner;
/*
gunner
*/
SrPlayer.prototype.plGunner = function (a) {
    var b;
    var c;
    var d = new SrVec2;
    c = 1 - (a >> 2) << 2;
    b = PlayerMinAgi[a] + srRandomInt(PlayerMaxAgi[a] - PlayerMinAgi[a] + 1);
    var e = PlayerAttackRange[a];
    var g = .5 * (this.pl_current_joint[a][9].x + this.pl_current_joint[a][10].x);
    var h = .5 * (this.pl_current_joint[a][9].y + this.pl_current_joint[a][10].y);
    if (1 != GameMode) {
        c = findEnemy(g - e, h - e, g + e, h + e);
    } else {
        c = plFindPlayer(g - e, h - e, g + e, h + e, c);
    }
    if (-1 != c && this.pl_held_player != a) {
        if (1 != GameMode) {
            setDistance(d, SR_ENEMY.en_current_joint[c][20], this.pl_current_joint[a][6]);
        } else {
            setDistance(d, this.pl_current_joint[c][2], this.pl_current_joint[a][6]);
        }
        normalize(d);
        this.pl_current_joint[a][5].x += .2 * d.x;
        this.pl_current_joint[a][5].y += .2 * d.y;
        this.pl_current_joint[a][6].x += .2 * d.x;
        this.pl_current_joint[a][6].y += .2 * d.y;
        this.pl_current_joint[a][1].x -= .4 * d.x;
        this.pl_current_joint[a][1].y -= .4 * d.y;
    }
    if (this.pl_on_ground[a] && this.pl_held_player != a) {
        if (0 < this.pl_attack_cooldown[a]) {
            this.pl_attack_cooldown[a]--;
        }
        if (!this.pl_attack_cooldown[a]) {
            if (-1 != c) {
                this.pl_attack_cooldown[a] = b;
                this.pl_current_joint[a][5].y -= 1.5;
                this.pl_current_joint[a][6].y -= 1.5;
                this.pl_current_joint[a][3].y += 1.6;
                this.pl_current_joint[a][4].y += 1.6;
                this.pl_attack_point[a] = 6
            }
            if (-1 != this.pl_attack_point[a]) {
                e = getItemData(InventoryItem[4 + a], 36);
                g = 1;
                if (258 == InventoryItem[4 + a]) {
                    g = getItemData(InventoryItem[4 + a], 12);
                    if (checkInventoryCompo(4 + a, 26)) {
                        g += getInventoryCompo(4 + a, 8) + srFloor(g * getInventoryCompo(4 + a, 9) / 100);
                    }
                }
                antiCheatCheck();
                if (0 < e) {
                    e = srMax(e - PlayerMag[a], 1)
                    if (e * g <= PartyGold) {
                        PartyGold = srClampA(PartyGold - e * g, 0, 9999999);
                        for (b = 0; b < g; b++) {
                            SR_INDICATOR.inAdd(this.pl_current_joint[a][6].x, this.pl_current_joint[a][6].y, 0 > d.x ? .5 : -.5, e, 16776960);
                        }
                        e = 0
                    }
                }
                if (0 == e) {
                    plProjectileAttack(this, a, this.pl_current_joint[a][6].x, this.pl_current_joint[a][6].y, c);
                    if (checkInventoryCompo(4 + a, 46)) {
                        d = getInventoryCompo(4 + a, 8);
                        PlayerCurrentLp[a] = srClampA(PlayerCurrentLp[a] + d, 0, PlayerMaxLp[a]);
                        SR_INDICATOR.inAdd(this.pl_current_joint[a][0].x, this.pl_current_joint[a][0].y, 0, d, 65280);
                    }
                }
                antiCheatSet();
                this.pl_attack_point[a] = -1
            }
        }
        if (-1 == c) {
            plWalk(this, a);
            plSwim(this, a)
        }
    }
    pullJoints(this.pl_current_joint[a][0], this.pl_current_joint[a][1], 3.6, .5, .5);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][2], 3.6, .5, .5);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][3], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][4], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][3], this.pl_current_joint[a][5], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][4], this.pl_current_joint[a][6], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][5], this.pl_current_joint[a][6], 1.2, .5, .5);
    pullJoints(this.pl_current_joint[a][2], this.pl_current_joint[a][7], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][2], this.pl_current_joint[a][8], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][7], this.pl_current_joint[a][9], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][8], this.pl_current_joint[a][10], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][7], this.pl_current_joint[a][8], 6, .1, .1)
};

//WINDOW.fff = SrPlayer.prototype.plWhipper;
/*
whipper
*/
SrPlayer.prototype.plWhipper = function (a) {
    var b;
    var c = new SrVec2;
    var d = 1 - (a >> 2) << 2;
    var e = PlayerMinAt[a];
    var g = PlayerMaxAt[a];
    var h = PlayerMinAgi[a] + srRandomInt(PlayerMaxAgi[a] - PlayerMinAgi[a] + 1);
    var q = PlayerAttackRange[a];
    for (b = 11; 14 >= b; b++) {
        moveJoint(this.pl_current_joint[a][b], this.pl_last_joint[a][b], .05, .95);
    }
    if (this.pl_on_ground[a] && this.pl_held_player != a) {
        if (0 < this.pl_attack_cooldown[a]) {
            this.pl_attack_cooldown[a]--;
        }
        b = .5 * (this.pl_current_joint[a][9].x + this.pl_current_joint[a][10].x);
        var m = .5 * (this.pl_current_joint[a][9].y + this.pl_current_joint[a][10].y);
        if (1 != GameMode) {
            b = findEnemy(b - q, m - q - 20, b + q, m + 20);
        } else {
            b = plFindPlayer(b - q, m - q - 20, b + q, m + 20, d);
        }
        if (!this.pl_attack_cooldown[a] && -1 != b) {
            this.pl_attack_cooldown[a] = h;
            if (this.pl_current_joint[a][5].x < this.pl_current_joint[a][6].x) {
                this.pl_current_joint[a][5].x += 4;
                this.pl_current_joint[a][4].x -= 4;
            } else {
                this.pl_current_joint[a][6].x += 4;
                this.pl_current_joint[a][3].x -= 4;
            }
            this.pl_current_joint[a][2].y += 1;
            this.pl_attack_point[a] = 14;
            antiCheatCheck();
            h = getItemData(InventoryItem[4 + a], 36);
            PlayerMp[a] = srMin(PlayerMp[a] + PlayerMag[a], h);
            if (checkInventoryCompo(4 + a, 46)) {
                h = getInventoryCompo(4 + a, 8);
                PlayerCurrentLp[a] = srClampA(PlayerCurrentLp[a] + h, 0, PlayerMaxLp[a]);
                SR_INDICATOR.inAdd(this.pl_current_joint[a][0].x, this.pl_current_joint[a][0].y, 0, h, 65280);
            }
            antiCheatSet();
        }
        if (-1 == b) {
            plWalk(this, a);
        }
        plSwim(this, a)
    }
    if (-1 != this.pl_attack_point[a]) {
        if (checkInventoryCompo(4 + a, 29) && srRandom(100) < getInventoryCompo(4 + a, 8)) {
            e += srFloor(getInventoryCompo(4 + a, 9) * e / 100);
            g += srFloor(getInventoryCompo(4 + a, 9) * g / 100);
        }
        h = 20;
        if (checkInventoryCompo(4 + a, 42)) {
            h += srFloor(20 * getInventoryCompo(4 + a, 8) / 100);
        }
        if (1 != GameMode) {
            d = enGetDamage(1, 0, 0, e, g, this.pl_current_joint[a][this.pl_attack_point[a]].x, this.pl_current_joint[a][this.pl_attack_point[a]].y, h, h);
        } else {
            d = plGetDamage(1, 0, 0, e, g, this.pl_current_joint[a][this.pl_attack_point[a]].x, this.pl_current_joint[a][this.pl_attack_point[a]].y, h, h, d);
        }
        if (-1 != d) {
            antiCheatCheck();
            h = getItemData(InventoryItem[4 + a], 36);
            if (PlayerMp[a] == h && 0 < h || -1 == h) {
                PlayerMp[a] = 0;
                e = this.pl_current_joint[a][this.pl_attack_point[a]].y;
                g = srFloor(srClampA(this.pl_current_joint[a][this.pl_attack_point[a]].x, 0, 511) / 8);
                h = srFloor(srClampA(this.pl_current_joint[a][this.pl_attack_point[a]].y, 0, 255) / 8);
                if (0 <= h - SR_TERRAIN.tr_low_surface[g]) {
                    e = 8 * SR_TERRAIN.tr_low_surface[g] + 7;
                } else {
                    if (3 >= srAbs(h - SR_TERRAIN.tr_high_surface[g])) {
                        e = 8 * SR_TERRAIN.tr_high_surface[g] + 7;
                    }
                }
                plProjectileAttack(this, a, this.pl_current_joint[a][this.pl_attack_point[a]].x, e, d);
            }
            antiCheatSet();
            this.pl_attack_point[a] = -1;
            if (checkInventoryCompo(4 + a, 11)) {
                h = srMax(1, srFloor(this.pl_damage_dealt * getInventoryCompo(4 + a, 8) / 100));
                antiCheatCheck();
                PlayerCurrentLp[a] = srClampA(PlayerCurrentLp[a] + h, 0, PlayerMaxLp[a]);
                antiCheatSet();
                SR_INDICATOR.inAdd(this.pl_current_joint[a][0].x, this.pl_current_joint[a][0].y, 0, h, 65280);
            }
            if (checkInventoryCompo(4 + a, 12) && !GameMode && srRandom(100) < getInventoryCompo(4 + a, 8)) {
                SR_DROP.dpAdd(this.pl_current_joint[a][0].x, this.pl_current_joint[a][0].y, 2, 0, 0);
            }
            if (checkInventoryCompo(4 + a, 37) && !GameMode && srRandom(100) < getInventoryCompo(4 + a, 8)) {
                e = 100;
                for (b = 0; 4 > b; b++) {
                    if (checkInventoryCompo(4 + b, 35)) {
                        e += getInventoryCompo(4 + b, 8);
                    }
                }
                SR_DROP.dpAdd(this.pl_current_joint[a][0].x, this.pl_current_joint[a][0].y, 1, srFloor(this.pl_damage_dealt * e / 100), 0)
            }
            if (checkInventoryCompo(4 + a, 43) && srRandom(100) < getInventoryCompo(4 + a, 8)) {
                e = getInventoryCompo(4 + a, 9);
                if (1 != GameMode) {
                    setDistance(c, SR_ENEMY.en_current_joint[d][0], this.pl_current_joint[a][1]);
                } else {
                    setDistance(c, SR_PLAYER.pl_current_joint[d][1], this.pl_current_joint[a][1]);
                }
                normalize(c);
                scaleVec2(c, .2 * e);
                if (1 != GameMode) {
                    scaleVec2(c, ENEMY_KNOCKBACK_VAR[ENEMY_DATA[SR_ENEMY.en_id[d]][ENEMY_TYPE]] / ENEMY_DATA[SR_ENEMY.en_id[d]][ENEMY_SIZE]);
                } else {
                    scaleVec2(c, .1);
                }
                if (1 != GameMode) {
                    //vecSub
                    SR_ENEMY.en_last_joint[d][0].vecSub(c)
                } else {
                    //vecSub
                    SR_PLAYER.pl_last_joint[d][0].vecSub(c)
                }
            }
        }
    }
    pullJoints(this.pl_current_joint[a][0], this.pl_current_joint[a][1], 3.6, .5, .5);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][2], 3.6, .5, .5);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][3], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][4], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][3], this.pl_current_joint[a][5], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][4], this.pl_current_joint[a][6], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][5], this.pl_current_joint[a][6], 14.4, .02, .02);
    pullJoints(this.pl_current_joint[a][5], this.pl_current_joint[a][11], 4.8, 0, .3);
    pullJoints(this.pl_current_joint[a][11], this.pl_current_joint[a][12], 4.8, 0, .3);
    pullJoints(this.pl_current_joint[a][12], this.pl_current_joint[a][13], 4.8, 0, .3);
    pullJoints(this.pl_current_joint[a][13], this.pl_current_joint[a][14], 4.8, 0, .3);
    pullJoints(this.pl_current_joint[a][2], this.pl_current_joint[a][7], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][2], this.pl_current_joint[a][8], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][7], this.pl_current_joint[a][9], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][8], this.pl_current_joint[a][10], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][7], this.pl_current_joint[a][8], 6, .1, .1)
};

//WINDOW.fff = SrPlayer.prototype.plAngel;
/*
angel
*/
SrPlayer.prototype.plAngel = function (a) {
    var b;
    var c;
    var d = new SrVec2;
    var e = 1 - (a >> 2) << 2;
    var g = PlayerMinAt[a];
    var h = PlayerMaxAt[a];
    var q = PlayerMinAgi[a] + srRandomInt(PlayerMaxAgi[a] - PlayerMinAgi[a] + 1);
    var m = PlayerAttackRange[a];
    var l;
    if (10 > PlayerDex[a]) {
        l = 1;
    } else if (30 > PlayerDex[a]) {
        l = 2;
    } else if (60 > PlayerDex[a]) {
        l = 3;
    } else if (100 > PlayerDex[a]) {
        l = 4;
    } else {
        l = 5;
    }
    if (checkInventoryCompo(4 + a, 47)) {
        l += 1;
    }
    for (b = 11; 14 >= b; b++) {
        moveJoint(this.pl_current_joint[a][b], this.pl_last_joint[a][b], .05, .95);
    }
    for (b = 15; 20 >= b; b++) {
        moveJoint(this.pl_current_joint[a][b], this.pl_last_joint[a][b], 0, 1);
    }
    this.pl_current_joint[a][11].x -= .1;
    this.pl_current_joint[a][11].y -= .1;
    this.pl_current_joint[a][12].x -= .1;
    this.pl_current_joint[a][12].y += .1;
    this.pl_current_joint[a][13].x += .1;
    this.pl_current_joint[a][13].y -= .1;
    this.pl_current_joint[a][14].x += .1;
    this.pl_current_joint[a][14].y += .1;
    if (this.pl_on_ground[a] && this.pl_held_player != a) {
        if (0 < this.pl_attack_cooldown[a]) {
            this.pl_attack_cooldown[a]--;
        }
        b = .5 * (this.pl_current_joint[a][9].x + this.pl_current_joint[a][10].x);
        c = .5 * (this.pl_current_joint[a][9].y + this.pl_current_joint[a][10].y);
        if (1 != GameMode) {
            c = findEnemy(b - m, c - m, b + m, c + m);
        } else {
            c = plFindPlayer(b - m, c - m, b + m, c + m, e);
        }
        //for (b = 0; b < l && 0 != this.s[a][b]; b++) ;
        b = 0;
        while (b < l && 0 != this.pl_ring_move_status[a][b]) {
            b++;
        }
        if (!this.pl_attack_cooldown[a] && -1 != c && b != l) {
            this.pl_attack_cooldown[a] = q;
            this.pl_ring_move_status[a][b] = 1;
            this.pl_ring_move_time[a][b] = srFloor(m / 2) + 20;
            this.pl_ring_hit_interval[a][b] = 0;
            this.pl_current_joint[a][12].x -= 2;
            this.pl_current_joint[a][14].x += 2;
            this.pl_attack_point[a] = 15 + b;
            this.pl_current_joint[a][this.pl_attack_point[a]].vecSet(this.pl_current_joint[a][0]);
            this.pl_current_joint[a][this.pl_attack_point[a]].y -= 5;
            this.pl_last_joint[a][this.pl_attack_point[a]].vecSet(this.pl_current_joint[a][this.pl_attack_point[a]]);
            if (1 != GameMode) {
                setDistance(d, SR_ENEMY.en_current_joint[c][20], this.pl_current_joint[a][this.pl_attack_point[a]]);
            } else {
                setDistance(d, this.pl_current_joint[c][1], this.pl_current_joint[a][this.pl_attack_point[a]]);
            }
            normalize(d);
            scaleVec2(d, 2);
            //vecAdd
            this.pl_current_joint[a][this.pl_attack_point[a]].vecAdd(d);
        }
        if (-1 == c) {
            plWalk(this, a);
            plSwim(this, a)
        }
    }
    for (b = 0; b < l; b++) {
        if (0 != this.pl_ring_move_status[a][b]) {
            this.pl_attack_point[a] = 15 + b;
            this.pl_ring_move_time[a][b]--;
            if (0 >= this.pl_ring_move_time[a][b]) {
                if (1 == this.pl_ring_move_status[a][b]) {
                    this.pl_ring_move_status[a][b]++;
                    d.vecSet(this.pl_current_joint[a][0]);
                    d.y -= 5;
                    this.pl_last_joint[a][this.pl_attack_point[a]].vecSet(this.pl_current_joint[a][this.pl_attack_point[a]]);
                    setDistance(d, d, this.pl_current_joint[a][this.pl_attack_point[a]]);
                    q = normalize(d);
                    scaleVec2(d, 2);
                    //vecAdd
                    this.pl_current_joint[a][this.pl_attack_point[a]].vecAdd(d);
                    this.pl_ring_move_time[a][b] = srFloor(q / 2);
                } else {
                    this.pl_ring_move_status[a][b] = 0;
                    this.pl_ring_move_time[a][b] = 0;
                    this.pl_ring_hit_interval[a][b] = 0;
                }
            }
            this.pl_ring_hit_interval[a][b]--;
            if (0 >= this.pl_ring_hit_interval[a][b]) {
                q = 0;
                if (checkInventoryCompo(4 + a, 27) && srRandom(100) < getInventoryCompo(4 + a, 8)) {
                    q = 1;
                }
                //クリティカルの時の処理
                //ここで重複するバグが発生する
                if (checkInventoryCompo(4 + a, 29) && srRandom(100) < getInventoryCompo(4 + a, 8)) {
                    g += srFloor(getInventoryCompo(4 + a, 9) * g / 100);
                    h += srFloor(getInventoryCompo(4 + a, 9) * h / 100);
                }
                if (1 != GameMode) {
                    q = enGetDamage(q, 0, 0, g, h, this.pl_current_joint[a][this.pl_attack_point[a]].x, this.pl_current_joint[a][this.pl_attack_point[a]].y, 10, 10);
                } else {
                    q = plGetDamage(q, 0, 0, g, h, this.pl_current_joint[a][this.pl_attack_point[a]].x, this.pl_current_joint[a][this.pl_attack_point[a]].y, 10, 10, e);
                }
                if (-1 != q) {
                    antiCheatCheck();
                    m = getItemData(InventoryItem[4 + a], 36);
                    PlayerMp[a] = srMin(PlayerMp[a] + PlayerMag[a], m);
                    if (PlayerMp[a] == m && 0 < m || -1 == m) {
                        PlayerMp[a] = 0;
                        plProjectileAttack(this, a, this.pl_current_joint[a][this.pl_attack_point[a]].x, this.pl_current_joint[a][this.pl_attack_point[a]].y, q);
                    }
                    if (checkInventoryCompo(4 + a, 46)) {
                        q = getInventoryCompo(4 + a, 8);
                        PlayerCurrentLp[a] = srClampA(PlayerCurrentLp[a] + q, 0, PlayerMaxLp[a]);
                        SR_INDICATOR.inAdd(this.pl_current_joint[a][0].x, this.pl_current_joint[a][0].y, 0, q, 65280);
                    }
                    antiCheatSet();
                    this.pl_ring_hit_interval[a][b] = getItemData(InventoryItem[4 + a], 7)
                }
            }
        }
    }
    pullJoints(this.pl_current_joint[a][0], this.pl_current_joint[a][1], 3.6, .5, .5);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][2], 3.6, .5, .5);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][3], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][4], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][3], this.pl_current_joint[a][5], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][4], this.pl_current_joint[a][6], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][2], this.pl_current_joint[a][7], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][2], this.pl_current_joint[a][8], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][7], this.pl_current_joint[a][9], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][8], this.pl_current_joint[a][10], 4.8, .5, .5);
    pullJoints(this.pl_current_joint[a][7], this.pl_current_joint[a][8], 6, .1, .1);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][11], 3.6, 0, .1);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][12], 12, 0, .1);
    pullJoints(this.pl_current_joint[a][11], this.pl_current_joint[a][12], 9.6, .5, .5);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][13], 3.6, 0, .1);
    pullJoints(this.pl_current_joint[a][1], this.pl_current_joint[a][14], 12, 0, .1);
    pullJoints(this.pl_current_joint[a][13], this.pl_current_joint[a][14], 9.6, .5, .5)
};

//WINDOW.fff = SrPlayer.prototype.plDraw;
/*
プレイヤーを描く
*/
SrPlayer.prototype.plDraw = function () {
    var a;
    var b;
    var c = new SrVec2;
    var d = new SrVec2;
    var e;
    if (1 != GameMode) {
        e = 4;
    } else {
        e = 8;
    }
    for (a = 0; a < e; a++) {
        var g = getItemData(InventoryItem[4 + a], 16);
        var h = getItemData(InventoryItem[4 + a], 6);
        var q = 15908203;
        var m = 16777215;
        if (checkInventoryCompo(4 + a, 32)) {
            q = 13421772;
            m = 3342438;
        }
        if (0 < this.pl_freeze_time[a]) {
            q = 1989840;
            m = 5934817;
        } else {
            if (0 < this.pl_slow_time[a]) {
                q = 9840;
                m = 1989840;
            } else {
                if (0 < this.pl_poison_time[a]) {
                    q = 3381504;
                    m = 3407616;
                }
            }
        }
        if (0 < this.pl_damage_effect_time[a]) {
            this.pl_damage_effect_time[a]--;
            m = 16711680;
        }
        DisplayMode2 = DisplayMode1 = 1;
        if (a != SelectedPlayer || GameMode || 2 != PartyPlayerSymbol) {
            if (0 < AngerCrownLightningTime) {
                AngerCrownLightningTime--;
                var l = srMin(AngerCrownLightningTime, 64);
                for (b = 0; 11 > b; b++) {
                    drawFromImageCentered(StageEffectImage, srFloor(this.pl_current_joint[a][b].x), srFloor(this.pl_current_joint[a][b].y), 24, 24, 0, 0, 12, 12, l << 24 | 16777062);
                }
                if (120 < AngerCrownLightningTime) {
                    b = srRandomInt(11);
                    plProjectileAttack(SR_PLAYER, 563, SR_PLAYER.pl_current_joint[a][b].x, SR_PLAYER.pl_current_joint[a][b].y, 0)
                }
            } else {
                for (b = 0; 11 > b; b++) {
                    drawFromImageCentered(StageEffectImage, srFloor(this.pl_current_joint[a][b].x), srFloor(this.pl_current_joint[a][b].y), 12, 12, 0, 0, 12, 12, 1073741824);
                }
            }
        } else {
            for (b = 0; 11 > b; b++) {
                drawFromImageCentered(StageEffectImage, srFloor(this.pl_current_joint[a][b].x), srFloor(this.pl_current_joint[a][b].y), 12, 12, 0, 0, 12, 12, 1358888960);
            }
        }
        DisplayMode1 = DisplayMode2 = 0;
        if (8 == this.pl_class[a]) {
            b = (h & 16711680) >> 17 << 16 | (h & 65280) >> 9 << 8 | (h & 255) >> 1;
            drawLine(this.pl_current_joint[a][1].x, this.pl_current_joint[a][1].y, this.pl_current_joint[a][11].x, this.pl_current_joint[a][11].y, b);
            drawLine(this.pl_current_joint[a][1].x, this.pl_current_joint[a][1].y, this.pl_current_joint[a][12].x, this.pl_current_joint[a][12].y, b);
            drawLine(this.pl_current_joint[a][11].x, this.pl_current_joint[a][11].y, this.pl_current_joint[a][12].x, this.pl_current_joint[a][12].y, b);
            drawLine(this.pl_current_joint[a][1].x, this.pl_current_joint[a][1].y, this.pl_current_joint[a][13].x, this.pl_current_joint[a][13].y, b);
            drawLine(this.pl_current_joint[a][1].x, this.pl_current_joint[a][1].y, this.pl_current_joint[a][14].x, this.pl_current_joint[a][14].y, b);
            drawLine(this.pl_current_joint[a][13].x, this.pl_current_joint[a][13].y, this.pl_current_joint[a][14].x, this.pl_current_joint[a][14].y, b);
        }


        drawLine(this.pl_current_joint[a][1].x, this.pl_current_joint[a][1].y, this.pl_current_joint[a][2].x, this.pl_current_joint[a][2].y, m);
        if (this.pl_class[a] != PLAYER_CLASS_DEAD) {
            drawLine(this.pl_current_joint[a][1].x, this.pl_current_joint[a][1].y, this.pl_current_joint[a][3].x, this.pl_current_joint[a][3].y, m);
            drawLine(this.pl_current_joint[a][1].x, this.pl_current_joint[a][1].y, this.pl_current_joint[a][4].x, this.pl_current_joint[a][4].y, m);
        }
        drawLine(this.pl_current_joint[a][3].x, this.pl_current_joint[a][3].y, this.pl_current_joint[a][5].x, this.pl_current_joint[a][5].y, m);
        drawLine(this.pl_current_joint[a][4].x, this.pl_current_joint[a][4].y, this.pl_current_joint[a][6].x, this.pl_current_joint[a][6].y, m);
        if (this.pl_class[a] != PLAYER_CLASS_DEAD) {
            drawLine(this.pl_current_joint[a][2].x, this.pl_current_joint[a][2].y, this.pl_current_joint[a][7].x, this.pl_current_joint[a][7].y, m);
            drawLine(this.pl_current_joint[a][2].x, this.pl_current_joint[a][2].y, this.pl_current_joint[a][8].x, this.pl_current_joint[a][8].y, m);
        }
        drawLine(this.pl_current_joint[a][7].x, this.pl_current_joint[a][7].y, this.pl_current_joint[a][9].x, this.pl_current_joint[a][9].y, m);
        drawLine(this.pl_current_joint[a][8].x, this.pl_current_joint[a][8].y, this.pl_current_joint[a][10].x, this.pl_current_joint[a][10].y, m);

        /*

        drawLine(this.g[a][1].x, this.g[a][1].y, this.g[a][2].x, this.g[a][2].y, 65535);
        if (this.f[a] != PLAYER_CLASS_DEAD) {
            drawLine(this.g[a][1].x, this.g[a][1].y, this.g[a][3].x, this.g[a][3].y, 65535);
            drawLine(this.g[a][1].x, this.g[a][1].y, this.g[a][4].x, this.g[a][4].y, 65535);
        }
        drawLine(this.g[a][3].x, this.g[a][3].y, this.g[a][5].x, this.g[a][5].y, 65535);
        drawLine(this.g[a][4].x, this.g[a][4].y, this.g[a][6].x, this.g[a][6].y, 65535);
        if (this.f[a] != PLAYER_CLASS_DEAD) {
            drawLine(this.g[a][2].x, this.g[a][2].y, this.g[a][7].x, this.g[a][7].y, 65535);
            drawLine(this.g[a][2].x, this.g[a][2].y, this.g[a][8].x, this.g[a][8].y, 65535);
        }
        drawLine(this.g[a][7].x, this.g[a][7].y, this.g[a][9].x, this.g[a][9].y, 65535);
        drawLine(this.g[a][8].x, this.g[a][8].y, this.g[a][10].x, this.g[a][10].y, 65535);


        //*/

        frameRect(srFloor(this.pl_current_joint[a][0].x) - 2, srFloor(this.pl_current_joint[a][0].y) - 2, 5, 5, q);
        DisplayMode2 = 2;
        if (checkInventoryCompo(4 + a, 48)) {
            drawFromImage(SmallItemImage, srFloor(this.pl_current_joint[a][0].x) - 6, srFloor(this.pl_current_joint[a][0].y) - 6 - 6, 12, 12, 228, 0, 12, 12, 16766720);
        }
        if (checkInventoryCompo(4 + a, 49)) {
            drawFromImage(SmallItemImage, srFloor(this.pl_current_joint[a][0].x) - 6, srFloor(this.pl_current_joint[a][0].y) - 6 - 6, 12, 12, 228, 0, 12, 12, 14540253);
        }
        DisplayMode2 = 0;
        if (1 == this.pl_class[a]) {
            g = 3;
            if (checkInventoryCompo(4 + a, 42)) {
                g = 5;
            }
            filledRect(srFloor(this.pl_current_joint[a][5].x) - 1, srFloor(this.pl_current_joint[a][5].y) - 1, g, g, h);
            filledRect(srFloor(this.pl_current_joint[a][6].x) - 1, srFloor(this.pl_current_joint[a][6].y) - 1, g, g, h);
        } else if (2 == this.pl_class[a]) {
            if (checkInventoryCompo(4 + a, 22)) {
                g += getInventoryCompo(4 + a, 8);
            }
            if (checkInventoryCompo(4 + a, 45)) {
                g += getInventoryCompo(4 + a, 9);
            }
            setDistance(c, this.pl_current_joint[a][5], this.pl_current_joint[a][6]);
            normalize(c);
            scaleVec2(c, g);
            c.vecAdd(this.pl_current_joint[a][6]);
            drawLine(this.pl_current_joint[a][6].x, this.pl_current_joint[a][6].y, c.x, c.y, h);
        } else if (3 == this.pl_class[a]) {
            setDistance(c, this.pl_current_joint[a][6], this.pl_current_joint[a][5]);
            normalize(c);
            d.vecSet(c);
            setPerpendicular(d);
            scaleVec2(c, 18);
            c.vecAdd(this.pl_current_joint[a][5]);
            drawLine(this.pl_current_joint[a][5].x, this.pl_current_joint[a][5].y, c.x, c.y, h);
            scaleVec2(d, 8);
            setSumVec2(c, this.pl_current_joint[a][6], d);
            drawLine(this.pl_current_joint[a][5].x, this.pl_current_joint[a][5].y, c.x, c.y, 8421504);
            setDistance(d, this.pl_current_joint[a][6], d);
            drawLine(this.pl_current_joint[a][5].x, this.pl_current_joint[a][5].y, d.x, d.y, 8421504);
            drawLine(c.x, c.y, d.x, d.y, 12632256);
        } else if (4 == this.pl_class[a]) {
            setSumVec2(c, this.pl_current_joint[a][5], this.pl_current_joint[a][6]);
            scaleVec2(c, .5);
            filledRect(srFloor(c.x) - 1, srFloor(c.y) - 1, 3, 3, h);
        } else if (5 == this.pl_class[a]) {
            c.x = this.pl_current_joint[a][0].x + srRandomRange(-10, 10);
            c.y = this.pl_current_joint[a][0].y + srRandomRange(-10, 0);
            setDistance(c, this.pl_current_joint[a][6], this.pl_current_joint[a][4]);
            normalize(c);
            setPerpendicular(c);
            scaleVec2(c, 8);
            drawLine(this.pl_current_joint[a][6].x - c.x, this.pl_current_joint[a][6].y - c.y, this.pl_current_joint[a][6].x + c.x, this.pl_current_joint[a][6].y + c.y, 8421504);
            filledRect(srFloor(this.pl_current_joint[a][6].x + c.x) - 1, srFloor(this.pl_current_joint[a][6].y + c.y) - 1, 3, 3, h);
        } else if (6 == this.pl_class[a]) {
            g = srFloor(srClampA(srFloor(this.pl_current_joint[a][6].x) - srFloor(this.pl_current_joint[a][1].x), -8, 8) / 2);
            if (-4 == g) {
                filledRect(srFloor(this.pl_current_joint[a][6].x) - 5, srFloor(this.pl_current_joint[a][6].y) - 2, 7, 2, h);
            } else if (-3 == g) {
                filledRect(srFloor(this.pl_current_joint[a][6].x) - 4, srFloor(this.pl_current_joint[a][6].y) - 2, 6, 2, h);
            } else if (-2 == g) {
                filledRect(srFloor(this.pl_current_joint[a][6].x) - 3, srFloor(this.pl_current_joint[a][6].y) - 2, 5, 2, h);
            } else if (-1 == g) {
                filledRect(srFloor(this.pl_current_joint[a][6].x) - 2, srFloor(this.pl_current_joint[a][6].y) - 2, 3, 2, h);
            } else if (0 == g) {
                filledRect(srFloor(this.pl_current_joint[a][6].x) - 1, srFloor(this.pl_current_joint[a][6].y) - 3, 2, 2, h);
            } else if (1 == g) {
                filledRect(srFloor(this.pl_current_joint[a][6].x) - 1, srFloor(this.pl_current_joint[a][6].y) - 2, 3, 2, h);
            } else if (2 == g) {
                filledRect(srFloor(this.pl_current_joint[a][6].x) - 2, srFloor(this.pl_current_joint[a][6].y) - 2, 5, 2, h);
            } else if (3 == g) {
                filledRect(srFloor(this.pl_current_joint[a][6].x) - 2, srFloor(this.pl_current_joint[a][6].y) - 2, 6, 2, h);
            } else if (4 == g) {
                filledRect(srFloor(this.pl_current_joint[a][6].x) - 2, srFloor(this.pl_current_joint[a][6].y) - 2, 7, 2, h);
            }
            filledRect(srFloor(this.pl_current_joint[a][6].x) - 1, srFloor(this.pl_current_joint[a][6].y) - 2, 2, 4, h);
        } else if (7 == this.pl_class[a]) {
            g = 3;
            if (checkInventoryCompo(4 + a, 42)) {
                g = 5;
            }
            b = (h & 16711680) >> 17 << 16 | (h & 65280) >> 9 << 8 | (h & 255) >> 1;
            drawLine(this.pl_current_joint[a][5].x, this.pl_current_joint[a][5].y, this.pl_current_joint[a][11].x, this.pl_current_joint[a][11].y, b);
            drawLine(this.pl_current_joint[a][11].x, this.pl_current_joint[a][11].y, this.pl_current_joint[a][12].x, this.pl_current_joint[a][12].y, b);
            drawLine(this.pl_current_joint[a][12].x, this.pl_current_joint[a][12].y, this.pl_current_joint[a][13].x, this.pl_current_joint[a][13].y, b);
            drawLine(this.pl_current_joint[a][13].x, this.pl_current_joint[a][13].y, this.pl_current_joint[a][14].x, this.pl_current_joint[a][14].y, b);
            filledRect(srFloor(this.pl_current_joint[a][14].x) - 1, srFloor(this.pl_current_joint[a][14].y) - 1, g, g, h);
        } else if (8 == this.pl_class[a]) {
            if (10 > PlayerDex[a]) {
                g = 1;
            } else if (30 > PlayerDex[a]) {
                g = 2;
            } else if (60 > PlayerDex[a]) {
                g = 3;
            } else if (100 > PlayerDex[a]) {
                g = 4;
            } else {
                g = 5;
            }
            if (checkInventoryCompo(4 + a, 47)) {
                g += 1;
            }
            //for (b = 0; b < g && 0 != this.s[a][b]; b++) ;
            b = 0;
            while (b < g && 0 != this.pl_ring_move_status[a][b]) {
                b++;
            }
            if (b != g) {
                drawFromImageCentered(StageEffectImage, srFloor(this.pl_current_joint[a][0].x), srFloor(this.pl_current_joint[a][0].y) - 5, 7, 3, 33, 0, 7, 3, h);
            }
            for (b = 0; b < g; b++) {
                if (0 != this.pl_ring_move_status[a][b]) {
                    drawFromImageCentered(StageEffectImage, srFloor(this.pl_current_joint[a][15 + b].x), srFloor(this.pl_current_joint[a][15 + b].y), 7, 3, 33, 0, 7, 3, h)
                }
            }
        }
        if (40 != SequenceStep) {
            if (0 < PlayerStrAura[a] + PlayerDexAura[a]) {
                DisplayMode1 = 2;
                DisplayMode2 = 1;
                h = PlayerStrAura[a];
                if (h < PlayerDexAura[a]) {
                    h = PlayerDexAura[a];
                }
                if (h < PlayerMagAura[a]) {
                    h = PlayerMagAura[a];
                }
                h = 4278190080 | 255 * PlayerStrAura[a] / h << 16 | 255 * PlayerDexAura[a] / h << 8 | 255 * PlayerMagAura[a] / h;
                drawFromImageCentered(StageEffectImage, srFloor(srFloor(this.pl_current_joint[a][9].x + this.pl_current_joint[a][10].x) / 2), srFloor(srFloor(this.pl_current_joint[a][9].y + this.pl_current_joint[a][10].y) / 2), 20, 12, 12, 0, 20, 12, h);
                DisplayMode1 = DisplayMode2 = 0;
            }
            if (0 < (PartyShowLpBar & 1) && 0 < PlayerCurrentLp[a]) {
                filledRect(srFloor(this.pl_current_joint[a][0].x) - 6, srFloor(this.pl_current_joint[a][0].y) - 6, 13, 2, 10027008);
                filledRect(srFloor(this.pl_current_joint[a][0].x) - 6, srFloor(this.pl_current_joint[a][0].y) - 6, srFloor(13 * PlayerCurrentLp[a] / PlayerMaxLp[a]), 2, 52224);
            }
            if (a == SelectedPlayer && !GameMode) {
                if (0 == PartyPlayerSymbol) {
                    filledRect(srFloor(this.pl_current_joint[a][0].x) - 1, srFloor(this.pl_current_joint[a][0].y) - 8, 3, 3, 16776960)
                } else if (1 == PartyPlayerSymbol) {
                    drawLine(srFloor(this.pl_current_joint[a][0].x) - 3, srFloor(this.pl_current_joint[a][0].y) - 14, srFloor(this.pl_current_joint[a][0].x) + 3, srFloor(this.pl_current_joint[a][0].y) - 14, 16776960);
                    drawLine(srFloor(this.pl_current_joint[a][0].x) - 3, srFloor(this.pl_current_joint[a][0].y) - 14, srFloor(this.pl_current_joint[a][0].x) + .5, srFloor(this.pl_current_joint[a][0].y) - 7, 16776960);
                    drawLine(srFloor(this.pl_current_joint[a][0].x) + 3.5, srFloor(this.pl_current_joint[a][0].y) - 14, srFloor(this.pl_current_joint[a][0].x) + .5, srFloor(this.pl_current_joint[a][0].y) - 7, 16776960)
                }
            }
        }
        //if(this.pl_is_found[a]>0) {
        //    drawLine( srFloor(this.pl_current_joint[a][0].x), srFloor(this.pl_current_joint[a][0].y), srFloor(this.pl_current_joint[a][0].x), srFloor(this.pl_current_joint[a][0].y-100), 16777215);
        //}
        //console.log(this.pl_ring_hit_interval[0].toString());
        //showTextSolidSpacingTopLeft(srFloor(this.pl_current_joint[a][0].x), srFloor(this.pl_current_joint[a][0].y),"abc",16777215,16771681,10);
        //showTextSolidCenter(LARGE_TEXT,srFloor(this.pl_current_joint[a][0].x), srFloor(this.pl_current_joint[a][0].y),"abc",16777215,255);
        //showTextMiddle(SMALL_TEXT,srFloor(this.pl_current_joint[a][0].x), srFloor(this.pl_current_joint[a][0].y),"abc",255,255,255,55,0,0,255,150,50,70)
    }
};

var STAGE_INDEX_DATA = [0, 0, 5, 9, 14, 19, 23, 27, 31, 35, 39, 41, 45, 49, 53, 57, 61, 65, 70, 75, 80, 80, 85, 90, 94, 98, 102, 106, 110, 114, 116, 120, 124, 128, 130, 134, 138, 142, 146, 150, 154, 158, 162, 164, 168, 172, 176, 180, 180, 185, 190, 195, 199, 203, 207, 211, 215, 219, 223, 227, 231, 235, 239, 243, 245, 249, 253, 257, 260, 264, 268, 268, 270, 274, 278, 282, 286, 290, 290, 294, 298, 302, 306, 310, 315, 320, 324, 328, 332, 338, 339];
var ENEMY_LEVEL = 0;
var ENEMY_TYPE = 1;
var ENEMY_SIZE = 3;
var ENEMY_LP = 6;
var ENEMY_PHYSICAL_RESISTANCE = 35;
var ENEMY_FIRE_RESISTANCE = 36;
var ENEMY_ICE_RESISTANCE = 37;
var ENEMY_THUNDER_RESISTANCE = 38;
var ENEMY_POISON_RESISTANCE = 39;
var ENEMY_FREEZE_RESISTANCE = 40;
var ENEMY_SECOND_ATTACK = 60;
var ENEMY_EXP = 61;
var ENEMY_GOLD = 62;
var ENEMY_DROP_FIRST = 63;
var ENEMY_DATA = [
//Opening Street
    [1, 0, 1, 1, 3394611, 10053171, 10, 2, 1, 1, 4294967091, 1, 16, 16, 8, 8, 0, 0, 10, 10, 0, 100, 0, 0, 0, 0, 1, 3, 1, 1, 50, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 7, 40, 189, 40, 19, 80],
    [2, 0, 1, 1, 3394815, 10053171, 20, 2, 1, 1, 4294967091, 1, 16, 16, 8, 8, 0, 0, 10, 10, 0, 100, 0, 0, 0, 0, 2, 3, 1, 1, 50, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 3, 8, 15, 290, 15, 20, 40],
    [3, 0, 2, 1, 13369344, 10053171, 50, 2, 1, 1, 4294967091, 1, 16, 16, 8, 8, 0, 0, 10, 10, 0, 100, 0, 0, 0, 0, 3, 5, 1, 1, 50, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 10, 9, 60, 60, 40, 21, 70],
    [4, 0, 3, 1, 255, 10053171, 40, 4, 0, 2, 4286611584, 1, 16, 16, 8, 8, 0, 0, 100, 10, 5, 100, 0, 0, 0, 0, 4, 5, 1, 100, 50, 20, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 15, 10, 15, 77, 15, 22, 40],
    [5, 0, 2, 2, 8421504, 10053171, 500, 3, 0, 2, 4286611584, 1, 8, 8, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, 1, 3, 10, 10, 10, 15, 120, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 100, 9, 3, 7, 5, 48, 10],
//Grassland 1
    [5, 1, 4, 1, 3394611, 3381555, 50, 3, 1, 4, 4294967295, 1, 16, 16, 8, 8, 0, 0, 20, 40, 0, 100, 0, 0, 0, 0, 3, 4, 1, 5, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 10, 13, 40, 0, 0, 23, 80],
    [6, 1, 2, 1, 8421504, 10053171, 80, 3, 1, 4, 4294967295, 1, 16, 16, 8, 8, 0, 0, 20, 40, 0, 100, 0, 0, 0, 0, 4, 6, 1, 5, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 20, 14, 20, 0, 0, 24, 60],
    [7, 1, 4, 1, 13382451, 10027008, 90, 3, 1, 4, 4294967295, 1, 16, 16, 8, 8, 0, 0, 20, 40, 0, 100, 0, 0, 0, 0, 6, 8, 3, 20, 50, 20, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 30, 12, 15, 78, 15, 25, 30],
    [8, 1, 4, 2, 3394611, 3381555, 200, 3, 1, 4, 4294967295, 1, 24, 24, 12, 12, 0, 0, 20, 40, 0, 100, 0, 0, 0, 0, 8, 12, 1, 5, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 30, 11, 15, 0, 0, 39, 50],
//Grassland 2
    [8, 2, 4, 1, 16764057, 13408563, 60, 3, 1, 9, 4294967295, 1, 16, 16, 8, 8, 0, 0, 50, 30, 0, 100, 0, 0, 0, 0, 3, 4, 1, 10, 50, 20, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 30, 15, 30, 0, 0, 26, 70],
    [9, 0, 2, 1, 13395456, 10053171, 120, 2, 1, 1, 4294967091, 1, 16, 16, 8, 8, 0, 0, 10, 10, 0, 100, 0, 0, 0, 0, 8, 12, 1, 1, 50, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 30, 17, 30, 79, 40, 28, 80],
    [10, 0, 3, 1, 6684825, 13408563, 110, 4, 0, 2, 4286611584, 1, 16, 16, 8, 8, 0, 0, 150, 10, 4, 100, 0, 0, 0, 0, 6, 8, 1, 120, 50, 20, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 40, 18, 20, 0, 0, 19, 40],
    [11, 2, 4, 1, 16737792, 13408563, 110, 3, 1, 9, 4294967295, 1, 16, 16, 8, 8, 0, 0, 50, 30, 0, 100, 0, 0, 0, 0, 6, 8, 3, 10, 50, 20, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 50, 16, 20, 0, 0, 23, 40],
    [12, 2, 4, 2, 8421504, 10053171, 500, 3, 1, 9, 4286611584, 1, 16, 16, 8, 8, 0, 0, 150, 30, 0, 100, 0, 0, 0, 0, 5, 6, 12, 20, 50, 15, 100, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 200, 16, 5, 0, 0, 40, 10],
//Grassland 3
    [10, 3, 4, 1, 10079232, 6710886, 90, 1, 1, 2, 4288269312, 1, 8, 8, 8, 8, 0, 0, 100, 20, 5, 100, 0, 0, 0, 0, 1, 4, 1, 0, 20, 50, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 40, 61, 20, 0, 0, 31, 80],
    [10, 1, 2, 1, 6723840, 6710784, 200, 3, 1, 4, 4294967295, 1, 16, 16, 8, 8, 0, 0, 20, 40, 0, 100, 0, 0, 0, 0, 8, 12, 1, 5, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 40, 0, 0, 0, 0, 33, 80],
    [11, 2, 4, 1, 6723840, 6710784, 140, 3, 1, 9, 4294967295, 1, 16, 16, 8, 8, 0, 0, 50, 30, 0, 100, 0, 0, 0, 0, 6, 8, 2, 10, 50, 20, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 50, 291, 20, 0, 0, 35, 80],
    [12, 3, 4, 2, 10027008, 3342336, 160, 1, 1, 2, 4288217088, 1, 8, 8, 8, 8, 0, 0, 100, 20, 5, 100, 0, 0, 0, 0, 1, 8, 1, 0, 20, 100, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 60, 190, 10, 0, 0, 36, 30],
    [14, 3, 4, 3, 13395456, 10027008, 800, 3, 1, 2, 4291585536, 1, 16, 16, 8, 8, 0, 0, 150, 30, 3, 100, 0, 0, 0, 0, 4, 8, 1, 20, 20, 200, 150, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 300, 41, 10, 0, 0, 459, 10],
//Grassland 4
    [10, 1, 5, 1, 3381759, 3368652, 180, 3, 1, 11, 4288269567, 1, 16, 16, 8, 8, 0, 0, 20, 40, 0, 100, 0, 0, 0, 0, 4, 5, 1, 5, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 40, 0, 0, 0, 0, 37, 100],
    [10, 0, 3, 1, 8421504, 10053171, 140, 4, 0, 12, 4294967295, 1, 8, 8, 8, 8, 0, 0, 150, 10, 5, 100, 0, 0, 0, 0, 3, 6, 2, 100, 50, 20, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 50, 62, 10, 191, 10, 34, 40],
    [12, 1, 5, 1, 13382451, 10027008, 220, 3, 1, 11, 4294927974, 1, 16, 16, 8, 8, 0, 0, 200, 40, 0, 100, 0, 0, 0, 0, 3, 4, 1, 5, 20, 100, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 60, 0, 0, 0, 0, 32, 30],
    [14, 1, 5, 2, 3381759, 3368652, 330, 3, 1, 11, 4288269567, 1, 32, 32, 16, 16, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 9, 15, 1, 10, 50, 20, 80, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 200, 0, 0, 0, 0, 42, 50],
//Grassland 5
    [11, 5, 2, 1, 3385907, 10053171, 200, 4, 0, 13, 4281571635, 1, 16, 16, 8, 8, 0, 0, 150, 10, 5, 100, 0, 0, 0, 0, 1, 2, 2, 100, 50, 20, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 50, 54, 40, 80, 40, 0, 0],
    [11, 1, 4, 1, 13369548, 10053171, 180, 3, 1, 4, 4294954239, 1, 16, 16, 8, 8, 0, 0, 20, 40, 0, 100, 0, 0, 0, 0, 8, 12, 1, 5, 20, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 50, 55, 30, 0, 0, 27, 50],
    [13, 5, 2, 1, 15636787, 10053171, 250, 3, 1, 5, 4294926352, 1, 16, 32, 16, 16, 0, 0, 40, 20, -1, 99, 0, 0, 0, 0, 1, 2, 1, 15, 20, 200, 80, 1, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 70, 56, 15, 0, 0, 0, 0],
    [15, 5, 2, 2, 10027008, 10053171, 1E3, 4, 0, 13, 4288230195, 1, 16, 16, 8, 8, 0, 0, 200, 10, 5, 100, 0, 0, 0, 0, 2, 4, 9, 150, 50, 20, 150, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 300, 57, 15, 0, 0, 43, 30],
//Grassland 6
    [12, 5, 2, 1, 8421504, 10053171, 220, 4, 0, 12, 4288243251, 1, 16, 16, 8, 8, 0, 0, 150, 10, 5, 100, 0, 0, 0, 0, 2, 5, 1, 100, 50, 20, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 50, 293, 30, 0, 0, 0, 0],
    [12, 2, 5, 1, 3385907, 10053171, 160, 3, 1, 9, 4294967295, 1, 16, 16, 8, 8, 0, 0, 50, 30, 0, 100, 0, 0, 0, 0, 6, 8, 3, 10, 50, 20, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 50, 192, 20, 0, 0, 0, 0],
    [14, 2, 5, 1, 15636787, 10053171, 210, 3, 1, 5, 4294926352, 1, 16, 32, 16, 16, 0, 0, 40, 20, -1, 99, 0, 0, 0, 0, 1, 2, 1, 15, 20, 200, 60, 1, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 80, 63, 20, 0, 0, 0, 0],
    [16, 5, 2, 3, 6684825, 10053171, 1600, 4, 0, 12, 4284874905, 1, 16, 16, 8, 8, 0, 0, 200, 10, 5, 100, 0, 0, 0, 0, 10, 12, 3, 100, 50, 20, 150, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 300, 0, 0, 0, 0, 44, 10],
//Grassland 7
    [13, 5, 2, 1, 8421504, 10053171, 240, 4, 0, 13, 4288243251, 1, 16, 16, 8, 8, 0, 0, 150, 10, 5, 100, 0, 0, 0, 0, 1, 2, 3, 100, 50, 20, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 50, 64, 20, 0, 0, 0, 0],
    [12, 6, 1, 1, 3385907, 10053171, 120, 2, 1, 1, 4294967295, 1, 16, 16, 8, 8, 0, 0, 10, 20, 0, 100, 0, 0, 0, 0, 8, 12, 1, 1, 100, 200, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 50, 65, 20, 0, 0, 0, 0],
    [14, 6, 1, 1, 13421619, 10053171, 180, 1, 0, 14, 4294967142, 1, 32, 32, 32, 32, 0, 0, 10, 10, 0, 100, 0, 0, 0, 1, 8, 12, 1, 0, 100, 200, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 80, 66, 20, 67, 20, 0, 0],
    [16, 6, 2, 2, 15636787, 10053171, 1200, 1, 0, 5, 4294926352, 2, 32, 32, 32, 16, 0, 0, 200, 20, 50, 100, 0, 1, 0, 1, 1, 2, 1, 0, 20, 200, 150, 1, 50, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 400, 81, 5, 0, 0, 45, 10],
//Castle Gate
    [14, 4, 4, 1, 13421772, 10053171, 200, 2, 1, 1, 4294918208, 1, 16, 16, 8, 8, 0, 0, 10, 10, 0, 100, 0, 0, 0, 0, 6, 8, 1, 1, 50, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 60, 68, 50, 0, 0, 38, 100],
    [15, 4, 4, 1, 13369344, 10053171, 240, 4, 0, 2, 4286611584, 1, 8, 8, 8, 8, 0, 0, 300, 10, 3, 100, 0, 0, 0, 0, 1, 3, 4, 150, 50, 15, 150, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 2164219920, 1, 16, 48, 12, 36, 50, 20, 0, 100, 0, 0, 0, 1, 2, 1, 0, 200, 90, 70, 20, 82, 20, 0, 0],
    [14, 6, 1, 1, 15636787, 10053171, 160, 1, 0, 5, 4294926352, 2, 32, 32, 32, 16, 0, 0, 100, 20, 50, 100, 0, 1, 0, 1, 1, 2, 1, 0, 100, 200, 150, 1, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 60, 69, 20, 0, 0, 0, 0],
    [16, 4, 4, 2, 13421772, 10053171, 2E3, 5, 1, 1, 4294918208, 1, 40, 16, 40, 8, 0, 0, 100, 20, 5, 99, 0, 0, 0, 0, 10, 20, 1, 0, 50, 300, 40, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 500, 71, 3, 0, 0, 47, 10],
//Castle
    [20, 4, 4, 3, 13421772, 10053171, 5E3, 5, 1, 1, 4294918208, 1, 48, 16, 48, 8, 0, 0, 100, 20, 5, 99, 0, 0, 0, 0, 20, 40, 1, 0, 50, 300, 40, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1E3, 1E3, 29, 3, 0, 0, 30, 20],
    [0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 4286611584, 1, 8, 8, 8, 8, 0, 0, 300, 10, 3, 100, 0, 0, 0, 0, 3, 4, 12, 200, 50, 15, 200, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 2164219920, 1, 16, 48, 12, 36, 50, 20, 0, 100, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//Hill Country 1
    [10, 0, 1, 2, 6723840, 10053171, 900, 2, 1, 1, 4294918208, 1, 32, 48, 48, 32, 0, 0, 10, 10, 0, 100, 0, 0, 0, 0, 10, 20, 1, 1, 50, 30, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 30, 0, 0, 2, 1, 244, 20],
    [10, 0, 1, 1, 3368448, 6697728, 90, 2, 1, 1, 4294967091, 1, 16, 16, 8, 8, 0, 0, 10, 10, 0, 100, 0, 0, 0, 0, 3, 4, 1, 1, 50, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 30, 0, 0, 0, 0, 0, 0],
    [11, 0, 3, 1, 10053120, 6697728, 120, 4, 0, 2, 4284900966, 1, 16, 16, 8, 8, 0, 0, 150, 10, 5, 100, 0, 0, 0, 0, 6, 8, 1, 100, 50, 20, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 40, 292, 20, 0, 0, 0, 0],
    [13, 0, 3, 2, 13421772, 6710886, 900, 4, 0, 2, 4288256409, 1, 32, 32, 16, 16, 0, 0, 150, 20, 5, 100, 0, 0, 0, 1, 10, 20, 1, 120, 10, 15, 150, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 200, 285, 10, 0, 0, 341, 10],
//Hill Country 2
    [11, 2, 4, 2, 6710988, 13408563, 600, 3, 1, 11, 4281545625, 1, 32, 32, 16, 16, 0, 0, 100, 40, 0, 100, 0, 0, 0, 0, 8, 16, 1, 10, 50, 30, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 40, 0, 0, 2, 1, 243, 30],
    [11, 2, 4, 1, 6710988, 13408563, 90, 3, 1, 11, 4281545625, 1, 16, 16, 8, 8, 0, 0, 60, 40, 0, 100, 0, 0, 0, 0, 3, 4, 1, 10, 50, 20, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 40, 294, 20, 0, 0, 0, 0],
    [12, 5, 4, 1, 6723891, 10053171, 230, 3, 1, 9, 4291624908, 1, 16, 16, 8, 8, 0, 0, 60, 30, 0, 100, 0, 0, 0, 0, 3, 4, 2, 10, 50, 20, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 40, 295, 20, 0, 0, 0, 0],
    [14, 2, 4, 2, 16737792, 13408563, 900, 3, 1, 11, 4291585536, 1, 16, 16, 8, 8, 0, 0, 150, 40, 0, 100, 0, 0, 0, 0, 6, 8, 12, 10, 50, 15, 80, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 200, 277, 10, 0, 0, 389, 10],
//Hill Country 3
    [12, 1, 1, 2, 3394611, 10053171, 900, 3, 1, 1, 4294918208, 1, 16, 32, 16, 16, 0, 0, 40, 40, 0, 100, 0, 0, 0, 0, 15, 25, 1, 10, 50, 30, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 50, 115, 10, 2, 1, 0, 0],
    [12, 1, 5, 2, 3381555, 6697728, 900, 3, 1, 11, 4281584691, 1, 16, 16, 8, 8, 0, 0, 80, 40, 0, 100, 0, 0, 0, 0, 5, 9, 3, 10, 50, 30, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 50, 0, 0, 2, 1, 245, 15],
    [13, 5, 4, 1, 10027110, 10053171, 240, 4, 0, 13, 4288217190, 1, 16, 16, 8, 8, 0, 0, 120, 10, 5, 100, 0, 0, 0, 0, 3, 4, 2, 100, 50, 20, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 40, 193, 20, 0, 0, 0, 0],
    [15, 1, 2, 2, 13421772, 10053171, 1100, 3, 1, 4, 4294967295, 1, 32, 32, 16, 16, 0, 0, 150, 40, 0, 100, 0, 0, 0, 0, 5, 15, 1, 30, 10, 15, 150, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 200, 0, 0, 0, 0, 46, 10],
//Lake
    [15, 7, 4, 1, 13408563, 4465152, 150, 3, 1, 11, 4294967295, 1, 16, 16, 8, 8, 0, 0, 40, 10, 0, 100, 0, 0, 0, 0, 6, 8, 1, 10, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 60, 0, 0, 0, 0, 53, 200],
    [16, 5, 4, 1, 10027110, 10053171, 300, 3, 0, 12, 4291572633, 1, 16, 16, 8, 8, 0, 0, 120, 10, 0, 100, 0, 0, 0, 0, 5, 7, 1, 10, 50, 20, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 60, 0, 0, 0, 0, 52, 100],
    [17, 7, 2, 1, 3381555, 13056, 300, 3, 1, 11, 4281597747, 1, 16, 16, 8, 8, 0, 0, 80, 10, 0, 100, 0, 0, 0, 0, 8, 12, 1, 10, 50, 20, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 80, 0, 0, 0, 0, 51, 100],
    [18, 7, 2, 2, 13421772, 13421772, 3E3, 3, 1, 4, 4294967295, 1, 16, 16, 8, 8, 0, 0, 150, 40, 0, 100, 0, 0, 50, 0, 3, 5, 5, 20, 80, 100, 150, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 700, 49, 10, 0, 0, 406, 10],
//Forest 1
    [15, 1, 4, 1, 13408563, 4465152, 240, 3, 1, 4, 4291598643, 1, 16, 16, 8, 8, 0, 0, 40, 60, 0, 100, 0, 0, 0, 0, 8, 9, 1, 10, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 50, 72, 20, 0, 0, 84, 60],
    [16, 8, 6, 1, 3368448, 10066329, 260, 3, 0, 6, 4281558528, 1, 16, 16, 8, 8, 0, 0, 50, 20, 0, 95, 0, 0, 0, 0, 1, 1, 1, 5, 10, 1E3, 500, 4, 10, 0, 0, 0, 0, 100, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 80, 75, 40, 0, 0, 86, 80],
    [17, 1, 4, 1, 13382451, 4465152, 120, 3, 1, 4, 4291572531, 1, 16, 16, 8, 8, 0, 0, 80, 60, 0, 100, 0, 0, 0, 0, 12, 15, 1, 10, 50, 20, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 50, 73, 20, 0, 0, 85, 60],
    [18, 8, 6, 2, 6723840, 10066329, 1E3, 4, 0, 12, 4284913920, 1, 16, 16, 8, 8, 0, 0, 150, 20, 5, 100, 0, 0, 0, 0, 3, 5, 3, 100, 10, 1E3, 500, 0, 0, 0, 0, 0, 0, 100, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 300, 74, 15, 83, 15, 104, 30],
//Forest 2
    [16, 2, 4, 1, 13408563, 4465152, 180, 3, 1, 9, 4291598643, 1, 16, 16, 8, 8, 0, 0, 30, 30, 0, 100, 0, 0, 0, 0, 4, 5, 2, 10, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 50, 195, 20, 0, 0, 88, 60],
    [17, 8, 6, 1, 6684825, 10066329, 280, 3, 0, 6, 4284874905, 1, 16, 16, 8, 8, 0, 0, 50, 20, 0, 95, 0, 0, 0, 0, 1, 1, 1, 5, 10, 1E3, 500, 4, 15, 0, 0, 0, 0, 100, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 80, 141, 20, 0, 0, 87, 60],
    [18, 2, 4, 1, 13382451, 4465152, 220, 3, 1, 9, 4291572531, 1, 16, 16, 8, 8, 0, 0, 50, 30, 0, 100, 0, 0, 0, 0, 3, 4, 4, 15, 50, 20, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 50, 126, 20, 296, 20, 0, 0],
    [19, 8, 6, 3, 10053324, 10066329, 3500, 4, 0, 12, 4278216192, 1, 16, 16, 8, 8, 0, 0, 150, 20, 5, 100, 0, 0, 0, 0, 1, 1, 1, 120, 25, 1E3, 500, 4, 100, 0, 0, 0, 0, 100, 80, 3, 0, 6, 4278216192, 1, 16, 16, 8, 8, 50, 20, 0, 96, 1, 1, 0, 1, 1, 5, 0, 1E3, 800, 128, 5, 105, 10, 460, 10],
//Cavern 1
    [17, 0, 2, 1, 13395456, 10066329, 300, 2, 1, 1, 4291585536, 1, 16, 16, 8, 8, 0, 0, 10, 10, 0, 100, 0, 0, 0, 0, 10, 15, 1, 1, 50, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 40, 119, 20, 0, 0, 93, 60],
    [18, 1, 6, 1, 10092339, 10066329, 240, 3, 1, 4, 4288282419, 1, 16, 16, 8, 8, 0, 0, 40, 40, 0, 100, 0, 0, 0, 0, 9, 10, 1, 10, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 40, 118, 20, 0, 0, 102, 60],
    [19, 1, 6, 1, 16711680, 10066329, 300, 3, 1, 9, 4294901760, 1, 16, 16, 8, 8, 0, 0, 80, 40, 0, 100, 0, 0, 0, 0, 4, 5, 1, 15, 50, 30, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 90, 120, 15, 0, 0, 89, 50],
    [20, 0, 2, 2, 16777215, 10066329, 4400, 3, 0, 13, 4294967295, 1, 16, 16, 8, 8, 0, 0, 150, 10, 0, 100, 0, 1, 0, 0, 4, 5, 10, 10, 15, 15, 150, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 700, 0, 0, 103, 10, 106, 10],
    [20, 7, 4, 1, 16776960, 13421568, 77, 1, 0, 14, 4294967040, 1, 32, 32, 32, 32, 0, 0, 10, 10, 0, 100, 0, 0, 0, 1, 1, 9, 1, 0, 100, 200, 20, 0, 0, 1E3, 100, 100, 100, 100, 90, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 777, 0, 0, 100, 10, 112, 10],
//Cavern 2
    [18, 2, 4, 1, 6684927, 6710937, 240, 3, 1, 4, 4284875007, 1, 16, 16, 8, 8, 0, 0, 20, 40, 0, 100, 0, 0, 0, 0, 8, 10, 1, 5, 50, 30, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 50, 117, 20, 0, 0, 92, 60],
    [19, 2, 4, 1, 13369599, 10053273, 240, 3, 1, 9, 4291559679, 1, 16, 16, 8, 8, 0, 0, 40, 10, 0, 100, 0, 0, 0, 0, 4, 5, 2, 10, 50, 30, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 50, 116, 20, 0, 0, 98, 60],
    [20, 2, 5, 1, 16711833, 13408665, 280, 3, 1, 11, 4294901913, 1, 16, 16, 8, 8, 0, 0, 80, 10, 0, 100, 0, 0, 0, 0, 2, 4, 1, 15, 50, 30, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 100, 0, 0, 90, 60, 99, 60],
    [21, 2, 4, 2, 16777215, 10066329, 4E3, 3, 1, 9, 4294967295, 1, 16, 16, 8, 8, 20, 0, 150, 10, 0, 100, 0, 0, 0, 0, 4, 5, 10, 10, 15, 15, 90, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 700, 287, 10, 0, 0, 107, 10],
    [20, 7, 2, 1, 16776960, 13421568, 77, 1, 0, 14, 4294967040, 1, 32, 32, 32, 32, 0, 0, 10, 10, 0, 100, 0, 0, 0, 1, 1, 9, 1, 0, 100, 200, 20, 0, 0, 1E3, 100, 100, 100, 100, 90, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 777, 0, 0, 100, 10, 113, 10],
//Cavern 3
    [19, 4, 4, 1, 13408512, 13421721, 300, 2, 1, 1, 4294918208, 1, 16, 16, 8, 8, 0, 0, 10, 10, 0, 100, 0, 0, 0, 0, 10, 15, 1, 1, 50, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 60, 127, 20, 0, 0, 91, 60],
    [19, 2, 4, 1, 13395456, 13408614, 240, 3, 1, 9, 4291585536, 1, 16, 16, 8, 8, 0, 0, 40, 10, 0, 100, 0, 0, 0, 0, 3, 4, 3, 10, 50, 30, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 60, 194, 20, 0, 0, 97, 60],
    [21, 4, 4, 1, 13382400, 13408665, 300, 3, 1, 5, 4294926352, 1, 16, 32, 16, 16, 0, 0, 25, 20, -1, 99, 0, 1, 0, 0, 2, 3, 1, 10, 20, 200, 40, 1, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 100, 196, 20, 0, 0, 96, 60],
    [22, 4, 4, 2, 13382400, 13408665, 1E3, 3, 1, 5, 4294926352, 1, 16, 32, 16, 16, 0, 0, 40, 20, -1, 99, 0, 1, 0, 0, 4, 5, 1, 15, 20, 200, 80, 1, 80, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 150, 297, 20, 279, 40, 108, 40],
    [20, 7, 5, 1, 16776960, 13421568, 77, 1, 0, 14, 4294967040, 1, 32, 32, 32, 32, 0, 0, 10, 10, 0, 100, 0, 0, 0, 1, 1, 9, 1, 0, 100, 200, 20, 0, 0, 1E3, 100, 100, 100, 100, 90, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 777, 0, 0, 100, 10, 114, 10],
//Seaside 1
    [21, 0, 7, 1, 3394611, 10053171, 300, 2, 1, 11, 4281584691, 1, 16, 16, 8, 8, 0, 0, 40, 10, 0, 100, 0, 0, 0, 0, 10, 15, 1, 1, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 80, 0, 0, 0, 0, 101, 60],
    [22, 0, 7, 1, 3394815, 10053171, 300, 2, 1, 11, 4281584895, 1, 16, 16, 8, 8, 0, 0, 40, 10, 0, 100, 0, 0, 0, 0, 10, 20, 1, 1, 50, 20, 40, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 80, 125, 20, 0, 0, 0, 0],
    [23, 0, 7, 1, 13369344, 10053171, 600, 4, 1, 12, 4294926352, 1, 16, 16, 8, 8, 0, 0, 150, 10, 5, 100, 0, 0, 0, 0, 5, 15, 1, 80, 50, 30, 120, 1, 0, 0, 50, 0, 0, 0, 0, 1, 0, 6, 2164219920, 1, 32, 32, 16, 16, 10, 20, 0, 100, 0, 0, 1, 5, 15, 1, 0, 400, 120, 197, 10, 0, 0, 0, 0],
    [22, 5, 7, 1, 255, 10053171, 400, 3, 1, 13, 4284887808, 1, 16, 16, 8, 8, 0, 0, 80, 10, 0, 100, 0, 0, 0, 0, 8, 12, 1, 10, 50, 30, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 90, 129, 20, 0, 0, 0, 0],
    [24, 0, 7, 3, 8421504, 10053171, 4800, 3, 1, 3, 4286611584, 1, 16, 32, 16, 16, 0, 0, 150, 20, 5, 100, 0, 0, 0, 0, 8, 15, 3, 100, 30, 200, 150, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 900, 111, 10, 0, 0, 342, 10],
//Seaside 2
    [22, 1, 7, 1, 13421823, 10053171, 330, 3, 1, 4, 4294967295, 1, 16, 16, 8, 8, 0, 0, 20, 20, 0, 100, 0, 0, 0, 0, 10, 15, 1, 5, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 80, 121, 20, 0, 0, 0, 0],
    [23, 1, 7, 1, 10027008, 10053171, 660, 3, 1, 4, 4288217088, 1, 16, 32, 16, 16, 0, 0, 20, 20, 0, 100, 0, 0, 0, 0, 20, 30, 1, 5, 50, 30, 40, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 120, 122, 10, 0, 0, 0, 0],
    [22, 2, 7, 1, 13421823, 10053171, 280, 3, 0, 12, 4294967295, 1, 16, 16, 8, 8, 0, 0, 60, 20, 0, 100, 0, 0, 0, 0, 8, 12, 1, 10, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 70, 123, 20, 0, 0, 0, 0],
    [23, 2, 7, 1, 10027008, 10053171, 440, 3, 0, 12, 4288217088, 1, 16, 16, 8, 8, 0, 0, 60, 20, 0, 100, 0, 0, 0, 0, 4, 8, 5, 10, 50, 30, 40, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 110, 124, 10, 0, 0, 0, 0],
    [25, 1, 7, 3, 8421504, 10053171, 5200, 3, 1, 4, 4286611584, 1, 16, 32, 16, 16, 0, 0, 150, 20, 10, 100, 0, 0, 0, 0, 8, 12, 5, 50, 30, 200, 150, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 900, 110, 10, 0, 0, 390, 10],
//Seaside 3
    [23, 1, 8, 1, 65535, 26214, 340, 3, 1, 4, 4278255615, 1, 16, 16, 8, 8, 0, 0, 20, 20, 0, 100, 0, 0, 0, 0, 10, 15, 1, 5, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 80, 298, 20, 0, 0, 0, 0],
    [23, 3, 8, 1, 65535, 16777215, 220, 5, 0, 13, 4278255615, 1, 16, 16, 8, 8, 50, 0, 150, 10, 5, 100, 0, 0, 0, 0, 1, 5, 6, 0, 50, 30, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 80, 198, 20, 0, 0, 0, 0],
    [25, 5, 8, 1, 16711935, 13421772, 800, 3, 1, 5, 4294926352, 2, 16, 32, 16, 16, 0, 0, 150, 40, 0, 100, 1, 0, 0, 1, 4, 6, 3, 10, 50, 30, 150, 1, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 150, 131, 10, 132, 10, 133, 10],
    [26, 3, 8, 3, 65535, 16777215, 4800, 5, 0, 12, 4278255615, 1, 16, 16, 8, 8, 50, 0, 150, 10, 5, 100, 0, 0, 0, 0, 1, 9, 12, 0, 30, 200, 80, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 900, 246, 10, 0, 0, 109, 10],
//Seaside 4
    [24, 0, 8, 1, 13434726, 6723840, 300, 4, 0, 13, 4291624806, 1, 16, 16, 8, 8, 0, 0, 150, 10, 5, 100, 0, 0, 0, 0, 1, 3, 1, 100, 50, 50, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 40, 26, 30, 134, 50, 0, 0],
    [24, 2, 7, 1, 13434726, 6723840, 200, 3, 1, 9, 4291624806, 1, 16, 16, 8, 8, 0, 0, 80, 10, 0, 100, 0, 0, 0, 0, 1, 3, 2, 10, 50, 25, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 40, 26, 30, 135, 50, 0, 0],
    [25, 4, 9, 1, 16764006, 16777164, 400, 5, 1, 10, 3439316019, 2, 16, 16, 8, 8, 50, 0, 100, 10, 5, 100, 0, 0, 0, 0, 2, 3, 9, 0, 50, 30, 60, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 80, 91, 20, 136, 30, 0, 0],
    [27, 4, 9, 2, 16764006, 16777164, 6E3, 5, 1, 10, 4294954035, 2, 32, 32, 16, 16, 0, 0, 100, 10, 30, 100, 0, 0, 0, 0, 30, 50, 1, 0, 20, 200, 40, 3, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 900, 130, 10, 0, 0, 407, 10],
//Submarine 1
    [26, 7, 7, 1, 13421823, 10066380, 400, 3, 1, 4, 4291611903, 1, 16, 16, 8, 8, 0, 0, 40, 10, 0, 100, 0, 0, 0, 0, 10, 18, 1, 5, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 90, 199, 30, 0, 0, 146, 90],
    [26, 9, 7, 1, 16764159, 10053273, 300, 3, 0, 12, 4294954239, 1, 16, 16, 8, 8, 0, 0, 80, 10, 0, 100, 0, 0, 0, 0, 10, 15, 1, 10, 50, 20, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 90, 137, 30, 0, 0, 143, 80],
    [28, 9, 8, 1, 16711884, 3342387, 450, 3, 0, 15, 4294901964, 1, 16, 16, 8, 8, 0, 0, 200, 10, 0, 98, 0, 1, 0, 0, 10, 15, 1, 5, 50, 50, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 130, 140, 10, 0, 0, 0, 0],
    [29, 9, 7, 2, 16764006, 16777164, 7E3, 3, 0, 15, 4278190080, 1, 32, 32, 16, 16, 0, 10, 500, 10, 0, 90, 0, 1, 0, 0, 20, 40, 1, 100, 20, 50, 150, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 900, 138, 5, 0, 0, 172, 10],
//Submarine 2
    [27, 5, 8, 1, 3368448, 13056, 400, 3, 1, 11, 4288269312, 1, 16, 16, 4, 4, 0, 0, 300, 10, 0, 100, 0, 0, 0, 0, 6, 8, 1, 2, 100, 15, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 90, 139, 50, 0, 0, 145, 200],
    [27, 7, 7, 1, 16764159, 10053273, 420, 3, 1, 4, 4294954239, 1, 16, 16, 8, 8, 0, 0, 40, 10, 0, 100, 0, 0, 0, 0, 12, 18, 1, 5, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 100, 299, 10, 0, 0, 144, 50],
    [29, 0, 8, 1, 16711884, 3342387, 480, 3, 1, 17, 4294901964, 1, 16, 16, 8, 8, 0, 0, 200, 10, 0, 100, 0, 0, 0, 0, 10, 15, 1, 15, 50, 50, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 130, 142, 10, 0, 0, 147, 50],
    [30, 5, 8, 3, 10027008, 3342336, 8E3, 3, 1, 11, 4291585638, 1, 16, 16, 4, 4, 0, 10, 500, 10, 0, 100, 0, 0, 0, 0, 10, 22, 15, 3, 50, 15, 180, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 900, 174, 10, 0, 0, 461, 10],
//Submarine 3
    [28, 7, 7, 1, 21916, 21916, 400, 3, 1, 13, 1610612736, 1, 16, 16, 4, 4, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, 3, 4, 1, 3, 50, 20, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 90, 301, 30, 0, 0, 151, 80],
    [28, 7, 2, 1, 8421504, 6697728, 500, 3, 1, 3, 4278190080, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, 12, 18, 1, 15, 50, 20, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 100, 0, 0, 150, 40, 152, 40],
    [30, 9, 10, 1, 13382400, 0, 500, 3, 1, 5, 4294926352, 2, 16, 32, 16, 16, 0, 0, 150, 40, 0, 100, 1, 0, 0, 1, 6, 9, 1, 10, 50, 30, 150, 1, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 150, 0, 0, 148, 30, 149, 30],
    [31, 9, 7, 2, 21916, 21916, 2E3, 3, 1, 17, 1073741824, 1, 16, 16, 4, 4, 0, 0, 300, 10, 0, 100, 0, 0, 0, 0, 10, 22, 2, 10, 50, 20, 180, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 300, 248, 20, 0, 0, 171, 50],
//Submarine 4
    [32, 7, 7, 1, 15658496, 13421568, 500, 1, 0, 14, 4293848576, 1, 16, 16, 16, 16, 0, 0, 50, 20, 0, 100, 0, 0, 0, 0, 1, 9, 1, 0, 25, 100, 20, 3, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 150, 182, 20, 0, 0, 186, 60],
    [32, 7, 10, 1, 8421504, 2105376, 600, 3, 1, 17, 4278190233, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, 5, 10, 1, 15, 50, 20, 80, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 120, 178, 30, 201, 30, 184, 80],
    [33, 7, 10, 2, 8421504, 2105376, 800, 3, 1, 17, 4278229248, 1, 32, 32, 16, 16, 0, 0, 150, 10, 0, 100, 1, 0, 0, 0, 10, 20, 1, 10, 50, 20, 150, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 200, 179, 10, 0, 0, 185, 30],
    [36, 7, 10, 4, 8421504, 2105376, 12E3, 3, 1, 17, 4288217088, 1, 48, 48, 24, 24, 0, 0, 300, 10, 0, 100, 0, 0, 0, 0, 20, 40, 1, 15, 50, 20, 180, 0, 0, 0, 0, 0, -100, 0, 80, 3, 0, 6, 2151677952, 1, 16, 16, 8, 8, 100, 10, 0, 99, 0, 0, 0, 10, 20, 9, 0, 3E3, 999, 308, 10, 0, 0, 175, 10],
//Submarine Shrine
    [40, 9, 7, 4, 13421772, 8388608, 4E4, 3, 0, 7, 4291611903, 1, 32, 32, 24, 24, 0, 20, 400, 10, 0, 95, 0, 1, 40, 0, 5, 5, 1, 40, 50, 300, 200, 5, 2500, 0, 0, 0, 0, 0, 90, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4E3, 4E3, 94, 5, 0, 0, 95, 20],
    [0, 0, 0, 0, 0, 0, 0, 3, 1, 5, 4294926352, 2, 24, 48, 24, 24, 0, 0, 300, 40, 0, 100, 1, 0, 0, 1, 3, 5, 3, 10, 50, 300, 300, 1, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//Mist Grove 1
    [29, 8, 7, 1, 16777164, 16764057, 800, 6, 0, 13, 4294954137, 1, 16, 16, 4, 4, 0, 10, 200, 10, 3, 99, 0, 0, 0, 0, 6, 8, 6, 25, 200, 1E3, 500, 0, 0, 10, -100, 0, 0, 100, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 120, 155, 20, 0, 0, 168, 80],
    [29, 5, 7, 1, 16777164, 10053171, 800, 4, 1, 3, 4288243251, 1, 16, 16, 8, 8, 50, 0, 200, 10, 4, 100, 0, 0, 0, 0, 14, 18, 1, 160, 100, 20, 80, 0, 0, 0, -100, 50, 50, 50, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 120, 157, 30, 300, 30, 164, 80],
    [31, 2, 8, 1, 3394560, 3381504, 300, 3, 0, 6, 4281571584, 1, 16, 16, 8, 8, 0, 0, 250, 20, 0, 100, 0, 0, 0, 0, 1, 1, 1, 2, 300, 25, 80, 4, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 90, 153, 10, 0, 0, 167, 50],
    [33, 8, 7, 3, 16777164, 16764057, 11E3, 706, 0, 12, 4294954137, 1, 16, 16, 8, 8, 30, 0, 300, 10, 3, 99, 0, 0, 0, 0, 33, 33, 23, 40, 100, 1E3, 500, 0, 0, 30, -100, 50, 50, 100, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2500, 300, 170, 10, 0, 0, 343, 10],
//Mist Grove 2
    [30, 2, 7, 1, 16763955, 13382400, 400, 3, 1, 9, 4294954035, 1, 16, 16, 8, 8, 0, 0, 100, 20, 0, 100, 0, 0, 0, 0, 3, 4, 3, 10, 50, 30, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 50, 158, 30, 0, 0, 161, 100],
    [31, 3, 7, 1, 16763955, 13382400, 400, 3, 1, 9, 4291572480, 1, 16, 16, 8, 8, 0, 0, 100, 20, 0, 100, 0, 0, 0, 0, 3, 4, 5, 10, 50, 30, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 50, 154, 30, 0, 0, 162, 100],
    [31, 5, 7, 1, 13382400, 3355443, 800, 7, 0, 0, 4278190080, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, -2, 0, 1, 0, 300, 30, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 100, 156, 10, 200, 10, 0, 0],
    [34, 5, 7, 2, 13382400, 3355443, 8E3, 7, 0, 0, 4278190080, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, -2, 0, 5, 0, 100, 8, 500, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2500, 300, 281, 10, 0, 0, 177, 10],
//Mist Grove 3
    [31, 6, 8, 1, 39168, 13056, 80, 1, 0, 6, 4278216192, 1, 32, 32, 16, 16, 0, 0, 50, 20, 0, 100, 0, 0, 0, 0, 1, 1, 1, 0, 100, 200, 20, 4, 50, 0, 0, 0, 0, 100, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 130, 180, 30, 0, 0, 166, 120],
    [32, 4, 7, 1, 10066176, 3355443, 180, 4, 0, 12, 4288217088, 1, 16, 16, 8, 8, 0, 0, 1E3, 10, 4, 100, 0, 0, 0, 0, 10, 10, 1, 150, 50, 30, 60, 0, 0, -10, 0, 0, 0, 0, 0, 4, 0, 5, 4294926352, 2, 16, 32, 16, 32, 100, 10, 4, 98, 0, 1, 0, 6, 9, 5, 0, 200, 140, 181, 20, 0, 0, 163, 80],
    [32, 8, 9, 1, 10066176, 3355443, 300, 8003, 1, 9, 4288230144, 1, 16, 16, 8, 8, 0, 20, 200, 10, 0, 100, 1, 0, 20, 0, 8, 16, 2, 20, 200, 1E3, 500, 0, 0, -10, 0, 0, 0, 100, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 150, 183, 20, 0, 0, 165, 80],
    [35, 5, 9, 3, 10066176, 3355443, 9E3, 4003, 1, 9, 4288230144, 1, 16, 16, 8, 8, 0, 0, 200, 10, 0, 100, 0, 0, 0, 0, 50, 60, 7, 13, 100, 50, 200, 0, 0, -10, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2500, 400, 247, 10, 0, 0, 176, 10],
//???
    [33, 10, 8, 1, 13369548, 13421772, 1E3, 3, 1, 4, 4291559628, 1, 16, 16, 8, 8, 0, 0, 10, 10, 1, 100, 0, 0, 0, 0, 1, 1, 1, 5, 10, 100, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 10, 152, 50, 0, 0, 187, 200],
    [36, 10, 8, 2, 13369548, 13421772, 1E4, 1003, 1, 9, 4291559628, 1, 16, 16, 8, 8, 20, 0, 200, 10, 0, 100, 0, 0, 0, 0, 1, 1, 7, 20, 10, 100, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3E3, 10, 173, 10, 169, 10, 391, 10],
//Desert 1
    [38, 10, 11, 1, 15449209, 4210752, 600, 3, 1, 4, 4293639289, 1, 16, 16, 8, 8, 0, 0, 10, 10, 1, 100, 0, 0, 0, 0, 1, 3, 1, 5, 10, 100, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 150, 202, 30, 208, 30, 302, 30],
    [39, 1, 11, 1, 15449209, 13599032, 600, 4, 1, 3, 4291789112, 1, 16, 16, 8, 8, 0, 20, 200, 10, 5, 100, 0, 0, 0, 0, 1, 1, 5, 80, 50, 20, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 160, 205, 30, 206, 30, 0, 80],
    [40, 0, 12, 1, 6710886, 3355443, 1E3, 3, 1, 18, 4294967040, 1, 16, 16, 4, 4, 0, 0, 500, 10, 0, 100, 1, 0, 0, 0, 20, 40, 1, 10, 200, 30, 200, 3, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 200, 203, 10, 207, 10, 0, 50],
    [42, 0, 12, 3, 6710886, 3355443, 15E3, 3, 1, 18, 4294967040, 1, 16, 16, 16, 16, 0, 0, 300, 10, 0, 100, 0, 0, 0, 0, 1, 1, 1, 40, 5, 1E3, 250, 3, 0, 30, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3E3, 1E3, 204, 5, 0, 0, 237, 10],
//Desert 2
    [38, 2, 11, 1, 15449209, 13599032, 400, 3, 1, 4, 4293639289, 1, 16, 16, 8, 8, 0, 0, 10, 10, 0, 100, 0, 0, 0, 0, 1, 3, 1, 5, 10, 100, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 150, 218, 40, 0, 0, 0, 80],
    [41, 3, 12, 1, 13382451, 16737894, 500, 3, 1, 18, 4294901760, 1, 16, 16, 4, 4, 0, 0, 500, 10, 0, 100, 1, 0, 0, 0, 6, 9, 9, 10, 200, 20, 120, 1, 100, 0, 100, -50, 0, 0, -50, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 160, 0, 10, 0, 0, 210, 50],
    [41, 6, 12, 1, 6710886, 11184810, 1E3, 1, 0, 14, 4294967295, 1, 32, 32, 32, 32, 0, 0, 10, 10, 0, 100, 0, 0, 0, 1, 10, 10, 1, 0, 200, 20, 20, 0, 0, 30, 50, 80, -100, 50, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 200, 0, 20, 0, 0, 209, 80],
    [43, 0, 12, 3, 6710886, 3355443, 15E3, 404, 1, 3, 2162932857, 1, 16, 16, 4, 4, 0, 0, 300, 10, 8, 100, 0, 0, 0, 0, 1, 7, 30, 120, 50, 30, 250, 0, 0, 30, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3E3, 1100, 250, 10, 0, 0, 238, 10],
//Desert 3
    [39, 11, 13, 1, 10079232, 39168, 400, 3, 1, 9, 4288269312, 1, 16, 16, 4, 4, 0, 5, 200, 10, 0, 100, 0, 0, 0, 0, 1, 3, 9, 20, 50, 1E3, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 50, 303, 30, 0, 0, 211, 100],
    [39, 11, 13, 1, 13395711, 13408563, 400, 103, 1, 9, 4291585791, 1, 16, 16, 4, 4, 30, 0, 200, 10, 0, 100, 0, 0, 0, 0, 1, 3, 3, 20, 50, 1E3, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 50, 220, 30, 0, 0, 212, 100],
    [42, 11, 11, 1, 16737843, 10027008, 600, 3, 1, 18, 4294927923, 1, 16, 16, 4, 4, 0, 0, 500, 10, 0, 100, 1, 0, 0, 0, 10, 10, 1, 10, 50, 1E3, 500, 1, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 200, 0, 10, 0, 0, 213, 50],
    [44, 11, 13, 2, 15658496, 47872, 2500, 3, 1, 10, 4293848576, 2, 16, 24, 8, 8, 0, 0, 300, 10, 0, 100, 0, 0, 0, 0, 1, 9, 1, 80, 5, 1E3, 500, 3, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 800, 214, 20, 0, 0, 239, 50],
//Desert 4
    [40, 2, 11, 1, 16737843, 13599032, 500, 3, 1, 5, 4294926352, 2, 16, 32, 16, 16, 0, 0, 100, 40, 0, 100, 1, 0, 0, 0, 4, 6, 1, 10, 50, 30, 40, 1, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 180, 217, 30, 0, 0, 0, 80],
    [40, 11, 13, 1, 13421772, 13408614, 450, 103, 1, 9, 4291611852, 1, 16, 16, 4, 4, 30, 0, 200, 10, 0, 100, 0, 0, 0, 0, 1, 4, 3, 20, 50, 1E3, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 50, 216, 30, 0, 0, 0, 80],
    [43, 10, 13, 1, 16737843, 6710886, 1E3, 4, 0, 12, 4288217088, 1, 16, 16, 8, 8, 0, 0, 200, 10, 5, 100, 0, 0, 0, 0, 1, 3, 1, 100, 50, 30, 150, 1, 50, 0, 0, 0, 0, 0, 0, 1, 0, 5, 2164219920, 1, 16, 32, 12, 32, 200, 20, 0, 100, 0, 0, 0, 1, 3, 1, 0, 500, 200, 215, 30, 0, 0, 0, 80],
    [45, 10, 13, 2, 16737843, 10027008, 16E3, 4, 1, 12, 4288217088, 1, 16, 16, 8, 8, 0, 0, 300, 10, 5, 100, 0, 0, 0, 0, 4, 6, 9, 100, 50, 100, 150, 1, 50, 0, 0, 0, 0, 0, 80, 1, 0, 5, 2164219920, 1, 16, 32, 12, 32, 200, 20, 0, 100, 0, 0, 0, 1, 3, 1, 0, 3E3, 1200, 219, 5, 0, 0, 240, 10],
//Desert 5
    [44, 10, 13, 2, 16724736, 6697728, 8E3, 3, 1, 16, 4294914816, 2, 16, 16, 8, 8, 0, 0, 500, 10, 0, 100, 1, 0, 0, 0, 10, 10, 3, 10, 250, 30, 200, 1, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3E3, 1500, 0, 30, 2, 1, 221, 40],
    [44, 11, 13, 2, 13421568, 10053120, 9E3, 3, 1, 9, 4291611648, 1, 32, 32, 8, 8, 0, 0, 200, 10, 0, 100, 0, 0, 0, 0, 20, 40, 1, 20, 100, 1E3, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3E3, 500, 0, 30, 2, 1, 222, 40],
    [41, 9, 11, 1, 3394815, 26265, 1E3, 4, 0, 12, 4281584895, 1, 16, 16, 8, 8, 0, 0, 200, 10, 5, 100, 0, 0, 0, 0, 1, 9, 1, 80, 50, 30, 80, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 100, 224, 20, 252, 20, 225, 20],
    [46, 4, 11, 1, 16777164, 16764006, 1E3, 4, 0, 13, 3439329228, 2, 16, 16, 8, 8, 0, 20, 200, 10, 15, 100, 0, 0, 0, 0, 5, 5, 1, 40, 25, 100, 80, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 200, 223, 99, 304, 99, 241, 450],
//Oasis
    [42, 9, 11, 1, 13421823, 10053375, 600, 3, 0, 7, 4291611903, 1, 16, 16, 8, 8, 0, 10, 100, 10, 0, 95, 0, 1, 0, 0, 5, 5, 1, 20, 50, 30, 80, 5, 250, 0, 0, 100, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 150, 227, 30, 0, 0, 233, 80],
    [43, 9, 13, 1, 10079283, 10053120, 700, 3, 0, 6, 4288269363, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 1, 0, 0, 1, 1, 1, 5, 50, 20, 100, 4, 8, 0, 0, 0, 0, 100, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 180, 0, 30, 0, 0, 234, 80],
    [45, 9, 12, 1, 13382451, 16751001, 800, 3, 1, 6, 4294926352, 2, 16, 24, 8, 8, 0, 0, 50, 10, 0, 95, 1, 0, 0, 0, 2, 3, 1, 10, 10, 100, 50, 1, 50, 0, 100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 200, 0, 30, 0, 0, 235, 80],
    [47, 9, 12, 2, 16777062, 3355443, 18E3, 3, 0, 2, 4294967142, 2, 16, 16, 8, 8, 0, 0, 200, 10, 0, 100, 0, 0, 0, 0, 20, 50, 1, 40, 50, 100, 250, 3, 0, 0, 0, 0, 100, 0, 80, 2, 0, 15, 4294967142, 1, 16, 16, 8, 8, 50, 10, 0, 0, 0, 0, 0, 1, 9, 30, 0, 3E3, 200, 229, 3, 236, 10, 310, 10],
//Desert 6
    [44, 12, 7, 1, 16777215, 3342438, 1200, 2, 1, 15, 4294967295, 1, 16, 16, 8, 8, 0, 0, 40, 40, 0, 100, 0, 0, 0, 0, 11, 15, 1, 1, 50, 30, 20, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 66, 228, 30, 0, 0, 0, 80],
    [44, 2, 4, 1, 16777215, 3342438, 1E3, 3, 1, 9, 4294967295, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, 9, 11, 1, 10, 50, 30, 40, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 66, 230, 30, 0, 0, 0, 80],
    [46, 12, 8, 1, 10027008, 13056, 666, 1, 0, 6, 4284874803, 1, 16, 16, 4, 4, 0, 0, 200, 20, 0, 100, 0, 0, 0, 0, 1, 1, 1, 0, 10, 100, 500, 4, 66, 0, -100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 666, 231, 10, 305, 10, 251, 20],
    [48, 12, 4, 2, 16777215, 16777215, 18E3, 4, 1, 6, 4284874803, 1, 16, 20, 8, 8, 50, 0, 1E3, 20, 0, 100, 0, 0, 0, 0, 6, 6, 6, 1E3, 350, 1E3, 500, 4, 66, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3E3, 666, 226, 5, 232, 5, 242, 10],
//Desert 7
    [44, 12, 11, 1, 16777215, 3342438, 1200, 3, 1, 18, 4294967295, 1, 8, 12, 8, 8, 0, 0, 40, 40, 0, 100, 0, 0, 0, 0, 11, 15, 1, 10, 50, 30, 40, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 66, 255, 40, 0, 0, 0, 80],
    [45, 2, 13, 1, 10066431, 153, 800, 3, 1, 9, 4284901119, 1, 16, 16, 8, 8, 10, 0, 100, 10, 0, 100, 0, 0, 0, 0, 1, 1, 3, 10, 50, 30, 40, 5, 250, 0, 0, 100, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 200, 254, 30, 0, 0, 0, 80],
    [47, 1, 13, 1, 16736272, 13369344, 1200, 1, 0, 5, 4294926352, 2, 12, 32, 8, 16, 0, 0, 200, 20, 8, 100, 0, 1, 0, 0, 3, 4, 1, 0, 10, 100, 500, 1, 50, 0, 100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 300, 256, 20, 257, 20, 0, 20],
    [49, 1, 13, 2, 16760848, 13395456, 19E3, 1, 0, 6, 4294938640, 2, 28, 28, 16, 16, 0, 0, 500, 20, 0, 100, 1, 0, 0, 0, 3, 4, 1, 0, 10, 100, 500, 1, 50, 0, 100, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3E3, 666, 283, 10, 0, 0, 249, 10],
//Pyramid
    [50, 12, 11, 3, 4340274, 4469538, 8E4, 104, 1, 6, 2164219920, 2, 16, 20, 12, 12, 50, 0, 100, 10, -1, 99, 0, 1, 0, 0, 6, 6, 50, 40, 300, 100, 60, 1, 50, 0, 0, 0, 0, 0, 90, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 6E3, 3E3, 159, 5, 0, 0, 160, 20],
    [0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 4284874803, 1, 16, 16, 8, 8, 0, 0, 1E3, 10, 8, 100, 0, 0, 0, 0, 1, 1, 1, 80, 150, 50, 500, 4, 66, 0, 0, 0, 0, 0, 0, 2, 0, 6, 4284874854, 2, 16, 16, 8, 8, 66, 20, 0, 86, 0, 0, 0, 1, 1, 30, 0, 0, 0, 0, 20, 0, 0, 0, 100],
//Desert 8
    [45, 10, 7, 1, 16763955, 13382400, 1E3, 3, 1, 4, 4294954035, 1, 16, 16, 8, 8, 0, 0, 10, 10, 1, 100, 0, 0, 0, 0, 2, 3, 1, 5, 10, 100, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 150, 253, 30, 0, 0, 0, 100],
    [48, 10, 7, 2, 13382400, 3355443, 5E3, 7, 0, 0, 4278190080, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, -1, 0, 1, 0, 50, 30, 500, 0, 0, 50, 50, 50, 50, 50, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 300, 258, 20, 306, 20, 2, 1],
    [47, 5, 12, 1, 6710886, 13408614, 1200, 4, 0, 2, 4284900966, 1, 16, 16, 8, 8, 0, 0, 200, 10, 8, 100, 0, 0, 0, 0, 40, 50, 1, 100, 50, 20, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 300, 259, 10, 0, 0, 0, 20],
    [50, 5, 12, 2, 6684672, 13408614, 18E3, 4, 0, 2, 4284900966, 1, 16, 16, 8, 8, 0, 0, 200, 10, 8, 100, 0, 0, 0, 0, 40, 50, 1, 100, 50, 30, 500, 1, 0, 0, 0, 0, 0, 0, 80, 3, 0, 6, 2164219920, 2, 16, 16, 8, 8, 200, 40, 0, 90, 0, 2, 1, 8, 12, 10, 0, 3E3, 1500, 268, 10, 0, 0, 392, 10],
//Beach 1
    [47, 10, 4, 1, 13382400, 4467234, 800, 3, 1, 9, 4291572480, 1, 16, 16, 8, 8, 0, 0, 60, 10, 0, 100, 0, 0, 0, 0, 5, 10, 1, 10, 50, 30, 60, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350, 200, 0, 30, 0, 0, 260, 150],
    [48, 3, 8, 1, 12303155, 13421772, 800, 1, 1, 17, 4290493235, 1, 16, 16, 8, 8, 0, 0, 100, 10, 5, 100, 0, 0, 0, 0, 5, 10, 1, 0, 50, 30, 200, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350, 300, 0, 20, 0, 0, 264, 80],
    [49, 7, 14, 2, 13421772, 2237064, 3E3, 1, 0, 14, 4291611852, 1, 32, 32, 24, 24, 0, 50, 60, 10, 0, 100, 1, 0, 0, 0, 80, 90, 1, 0, 50, 20, 40, 0, 0, 0, 0, 50, 0, 0, 50, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 550, 500, 0, 10, 0, 0, 262, 20],
    [51, 7, 14, 3, 13421772, 2237064, 2E4, 4, 0, 14, 4291572531, 1, 64, 64, 56, 56, 0, 100, 110, 10, 0, 95, 1, 0, 0, 1, 150, 200, 1, 20, 50, 30, 300, 0, 0, 0, 0, 50, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4E3, 1500, 269, 10, 0, 0, 462, 10],
//Beach 2
    [48, 2, 5, 1, 6737100, 13107, 900, 3, 1, 17, 4278242355, 1, 16, 16, 8, 8, 0, 0, 300, 10, 0, 100, 0, 0, 0, 0, 10, 20, 1, 4, 50, 30, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350, 250, 0, 20, 0, 0, 265, 80],
    [49, 3, 5, 1, 10066431, 13421772, 900, 1, 1, 17, 4281545727, 1, 16, 16, 8, 8, 0, 0, 200, 10, 3, 100, 0, 0, 0, 0, 10, 20, 1, 0, 50, 30, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350, 250, 0, 20, 0, 0, 263, 80],
    [50, 13, 14, 1, 13421772, 3355443, 1E3, 3, 1, 17, 4294967295, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, 1, 5, 1, 15, 20, 50, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 550, 500, 0, 20, 0, 0, 267, 80],
    [52, 13, 14, 1, 13395456, 6697728, 3E3, 3, 1, 18, 4294914816, 1, 16, 16, 8, 8, 0, 0, 500, 10, 0, 100, 0, 0, 0, 0, 1, 5, 1, 6, 20, 50, 150, 1, 100, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1500, 1E3, 261, 40, 0, 0, 266, 40],
//Beach 3
    [51, 1, 12, 9, 15449209, 13599032, 2E3, 0, 0, 0, 4278190080, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 200, 0, 0, 100, 100, 100, 100, 100, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 550, 2E3, 0, 10, 0, 0, 322, 20],
    [49, 7, 11, 1, 7914239, 35839, 1100, 3, 1, 16, 4294967295, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, 10, 20, 1, 15, 50, 30, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350, 250, 0, 20, 0, 0, 0, 80],
    [50, 5, 14, 1, 39168, 3355443, 1400, 3, 1, 16, 4281584691, 1, 16, 16, 8, 8, 0, 0, 200, 10, 0, 100, 0, 0, 0, 0, 1, 1, 1, 15, 50, 20, 200, 4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350, 250, 0, 20, 0, 0, 0, 80],
    [53, 13, 14, 1, 16763904, 13408512, 5E3, 3, 1, 10, 4294967142, 1, 16, 16, 8, 8, 0, 0, 500, 10, 0, 100, 0, 0, 0, 0, 1, 99, 1, 30, 50, 30, 300, 3, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4E3, 1500, 344, 10, 0, 0, 408, 10],
//Cavern 4
    [51, 2, 15, 1, 6710886, 3355443, 1200, 3, 1, 11, 4288256409, 1, 8, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, 5, 10, 1, 10, 50, 30, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 300, 312, 90, 0, 0, 0, 100],
    [53, 2, 15, 1, 13382451, 6684672, 1400, 3, 1, 18, 4291572531, 1, 8, 16, 8, 8, 0, 0, 500, 10, 0, 100, 0, 2, 0, 0, 10, 20, 1, 10, 100, 100, 80, 1, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 300, 313, 10, 0, 0, 0, 30],
    [53, 3, 15, 1, 6723891, 3355443, 1400, 3, 1, 11, 4284913971, 1, 8, 16, 8, 8, 0, 0, 500, 10, 0, 100, 0, 0, 0, 0, 1, 1, 1, 2, 300, 100, 200, 4, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 300, 314, 10, 0, 0, 0, 30],
    [55, 2, 15, 2, 13369344, 6710886, 22E3, 3, 1, 18, 4291559424, 1, 8, 16, 8, 8, 0, 0, 1500, 10, 0, 100, 0, 2, 0, 0, 10, 20, 3, 10, 100, 50, 80, 1, 50, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5E3, 1500, 315, 3, 0, 0, 358, 10],
    [52, 9, 15, 1, 6724044, 3368601, 1E3, 7203, 0, 15, 4281545523, 1, 16, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 2, 0, 0, 1, 9, 4, 15, 50, 30, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 300, 0, 10, 0, 0, 320, 20],
//Cavern 5
    [52, 2, 15, 1, 13421772, 6710886, 1400, 3, 1, 11, 4288256409, 1, 8, 16, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, 5, 10, 1, 10, 50, 30, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 300, 316, 90, 0, 0, 0, 100],
    [53, 12, 15, 1, 13408767, 3342438, 3600, 2, 1, 15, 4291598847, 1, 16, 16, 8, 8, 0, 0, 40, 40, 0, 100, 0, 0, 0, 0, 10, 40, 1, 1, 50, 20, 20, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 66, 317, 30, 0, 0, 0, 50],
    [54, 12, 15, 1, 6723840, 13056, 3666, 3, 0, 6, 4284913920, 1, 16, 16, 4, 4, 0, 0, 1E3, 20, 0, 100, 0, 2, 0, 0, 1, 1, 1, 1, 10, 100, 500, 4, 6, 0, -100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 666, 318, 10, 0, 0, 0, 30],
    [56, 12, 15, 2, 10027008, 6697779, 26E3, 3, 1, 18, 4291559424, 1, 8, 16, 8, 8, 0, 0, 1500, 10, 0, 100, 0, 2, 0, 0, 10, 20, 5, 10, 100, 50, 300, 1, 50, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5E3, 1500, 319, 5, 0, 0, 356, 10],
    [56, 9, 15, 3, 6724044, 3368601, 55E3, 7203, 0, 15, 4281545523, 1, 24, 24, 16, 16, 0, 0, 200, 10, 0, 100, 0, 2, 0, 0, 15, 45, 4, 15, 50, 50, 60, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5500, 5500, 321, 1, 0, 0, 0, 10],
//Cavern 6
    [54, 2, 15, 1, 6723840, 13056, 1600, 3, 0, 6, 4278216192, 1, 16, 16, 4, 4, 0, 0, 200, 20, 0, 100, 0, 0, 0, 0, 1, 1, 1, 2, 50, 30, 80, 4, 10, 0, 0, 0, 0, 100, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 300, 0, 50, 0, 0, 325, 150],
    [54, 2, 15, 1, 16737792, 10040064, 1600, 3, 0, 13, 4294927872, 1, 16, 16, 4, 4, 0, 0, 200, 10, 0, 100, 0, 0, 0, 0, 1, 1, 1, 15, 50, 20, 80, 1, 50, 0, 100, 0, 0, 0, 0, 1, 0, 5, 2164219920, 1, 16, 32, 12, 24, 100, 20, 5, 100, 0, 1, 0, 3, 4, 1, 0, 400, 300, 0, 50, 0, 0, 324, 150],
    [54, 2, 15, 1, 16777062, 6710784, 1600, 3, 1, 10, 4294967193, 1, 16, 16, 4, 4, 0, 0, 200, 10, 0, 100, 0, 0, 0, 0, 1, 9, 1, 20, 50, 20, 40, 3, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 300, 0, 50, 0, 0, 326, 150],
    [57, 5, 15, 2, 10027008, 6697779, 28E3, 3, 1, 18, 4291559424, 1, 8, 16, 8, 8, 0, 0, 1500, 10, 0, 100, 0, 2, 0, 0, 10, 20, 7, 10, 100, 50, 300, 1, 50, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5E3, 1500, 0, 5, 0, 0, 357, 10],
    [53, 9, 15, 1, 16777062, 3355443, 1E3, 0, 0, 15, 4278190080, 1, 16, 16, 16, 16, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, 0, 0, 0, 10, 50, 50, 80, 0, 0, 1E4, 100, 100, 100, 100, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 9999, 0, 5, 0, 0, 0, 10],
//Snowfield 1
    [55, 1, 7, 1, 16777215, 11059400, 2E3, 3, 1, 4, 4294967295, 1, 16, 16, 8, 8, 0, 0, 20, 40, 0, 100, 0, 0, 0, 0, 5, 5, 1, 5, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 300, 328, 90, 0, 0, 0, 100],
    [56, 0, 3, 1, 6710886, 3355443, 1600, 4, 0, 2, 4281545523, 1, 16, 16, 12, 12, 0, 10, 1E3, 10, 8, 100, 0, 0, 0, 0, 10, 50, 1, 80, 50, 20, 150, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500, 330, 15, 0, 0, 327, 30],
    [57, 0, 3, 1, 11059400, 4931105, 1600, 4, 1, 16, 4289249480, 1, 16, 16, 8, 8, 0, 10, 1E3, 10, 5, 100, 0, 0, 0, 0, 5, 5, 1, 100, 50, 20, 150, 2, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 400, 332, 20, 0, 0, 323, 40],
    [59, 0, 3, 2, 16777215, 3355443, 3E4, 4, 0, 2, 4294967295, 1, 32, 32, 24, 24, 0, 10, 300, 10, 5, 100, 0, 1, 0, 1, 100, 500, 1, 120, 250, 50, 300, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6E3, 2E3, 329, 3, 0, 0, 354, 10],
//Snowfield 2
    [56, 4, 16, 1, 16777215, 16777215, 1100, 4, 0, 13, 4294967295, 1, 16, 16, 8, 8, 0, 0, 1E3, 10, 5, 100, 0, 0, 0, 0, 5, 5, 1, 40, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 100, 333, 90, 0, 0, 0, 100],
    [57, 4, 16, 2, 10066329, 16777215, 2200, 4, 0, 2, 4288256409, 1, 16, 16, 12, 12, 0, 0, 1E3, 10, 2, 100, 0, 0, 0, 0, 15, 15, 1, 160, 50, 20, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 200, 334, 30, 0, 0, 0, 60],
    [58, 4, 16, 3, 14527231, 16777215, 3300, 4, 0, 2, 4292717311, 1, 16, 16, 12, 12, 0, 0, 500, 40, 2, 100, 0, 2, 0, 0, 30, 30, 1, 160, 150, 20, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 300, 335, 20, 0, 0, 0, 40],
    [60, 4, 16, 4, 16777215, 16777215, 33E3, 4, 0, 2, 4294967295, 1, 32, 32, 24, 24, 0, 0, 1200, 10, 1, 100, 0, 2, 0, 1, 300, 300, 1, 320, 250, 50, 320, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6E3, 500, 331, 5, 0, 0, 355, 10],
//Mountain 1
    [57, 5, 13, 1, 10035746, 3355443, 2E3, 4, 0, 12, 4288256409, 1, 16, 16, 8, 8, 0, 0, 1E3, 10, 2, 100, 0, 0, 0, 0, 1, 3, 1, 200, 10, 50, 80, 0, 0, 1E4, 0, 100, 100, 100, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 300, 0, 50, 0, 0, 336, 150],
    [57, 5, 13, 1, 10066176, 3355443, 2E3, 6, 0, 13, 4284900966, 1, 16, 16, 8, 8, 0, 0, 1E3, 10, 1, 100, 0, 0, 0, 0, 1, 3, 5, 15, 50, 50, 80, 0, 0, 1E4, 100, 100, 0, 100, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 300, 0, 50, 0, 0, 337, 150],
    [59, 6, 13, 1, 3355545, 3355443, 1E3, 1, 0, 6, 2164219920, 1, 16, 16, 12, 12, 0, 0, 20, 20, 0, 100, 0, 0, 0, 0, 2, 3, 1, 0, 5, 500, 200, 1, 50, 1E4, 100, 0, 100, 100, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 1E3, 0, 20, 0, 0, 339, 10],
    [61, 6, 16, 2, 10066329, 10066329, 35E3, 6, 0, 15, 4288256409, 1, 16, 16, 16, 16, 0, 90, 100, 10, 5, 95, 0, 1, 0, 0, 50, 100, 10, 20, 250, 20, 80, 0, 0, 0, 100, 100, 100, 100, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6E3, 500, 338, 10, 0, 0, 340, 10],
//Mountain 2
    [61, 14, 7, 1, 10035746, 6710886, 1500, 1, 0, 12, 4288256409, 1, 16, 16, 8, 8, 0, 0, 1E3, 10, 5, 100, 0, 0, 0, 0, 1, 1, 1, 0, 10, 50, 60, 1, 50, 0, 100, 100, 100, 100, 100, 1, 0, 5, 2164219920, 2, 16, 32, 16, 32, 300, 20, 0, 0, 0, 0, 0, 1, 1, 1, 0, 500, 500, 0, 50, 0, 0, 373, 200],
    [61, 4, 16, 1, 6710886, 10035746, 2500, 1, 0, 5, 2164219920, 2, 16, 32, 16, 32, 0, 0, 200, 20, 10, 100, 0, 1, 0, 0, 1, 1, 1, 0, 10, 200, 80, 1, 50, 0, 100, 100, 100, 100, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 500, 0, 50, 0, 0, 370, 200],
    [63, 0, 3, 2, 6710886, 10035746, 35E3, 4, 0, 2, 4288256409, 1, 16, 16, 16, 16, 0, 0, 1E3, 10, 5, 100, 0, 0, 0, 0, 33, 33, 1, 120, 200, 20, 200, 1, 50, 0, 100, 100, 100, 100, 100, 6, 0, 5, 2164219920, 2, 16, 32, 16, 32, 50, 20, 20, 95, 0, 1, 0, 3, 6, 30, 0, 5E3, 5E3, 0, 20, 2, 1, 369, 20],
    [65, 14, 7, 2, 10035746, 6710886, 3E4, 1, 0, 2, 4288256409, 1, 16, 16, 16, 16, 0, 0, 1E3, 10, 5, 100, 0, 0, 0, 0, 66, 66, 1, 0, 50, 20, 80, 1, 50, 0, 100, 100, 100, 100, 100, 6, 0, 5, 2164219920, 2, 16, 32, 16, 32, 500, 20, 20, 95, 0, 1, 0, 3, 6, 30, 0, 6500, 5E3, 0, 5, 0, 0, 375, 5],
//Mountaintop
    [70, 13, 2, 2, 10040115, 3355443, 2E4, 104, 1, 6, 2164219920, 2, 16, 20, 12, 12, 30, 0, 100, 10, -1, 99, 0, 1, 0, 0, 3, 4, 30, 40, 300, 100, 60, 1, 50, 0, 100, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8E3, 9999, 403, 4, 0, 0, 0, 5],
    [70, 13, 5, 2, 3355545, 3355443, 2E4, 3, 0, 7, 4291611903, 1, 32, 32, 24, 24, 0, 20, 200, 10, 0, 95, 0, 1, 40, 0, 5, 5, 1, 40, 50, 100, 200, 5, 500, 0, 0, 100, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8E3, 9999, 383, 4, 0, 0, 0, 5],
    [70, 13, 9, 2, 10066227, 3355443, 2E4, 3, 0, 2, 4294967142, 2, 16, 16, 8, 8, 0, 0, 200, 10, 0, 100, 0, 0, 0, 0, 1, 50, 1, 40, 100, 100, 250, 3, 0, 0, 0, 0, 100, 0, 100, 2, 0, 15, 4294967142, 1, 16, 16, 8, 8, 50, 10, 0, 0, 0, 0, 0, 1, 9, 30, 0, 8E3, 9999, 402, 4, 0, 0, 0, 5],
    [70, 13, 6, 2, 3381555, 3355443, 2E4, 4, 1, 3, 4284874803, 1, 16, 16, 8, 8, 0, 0, 1E3, 10, 8, 100, 0, 0, 0, 0, 1, 1, 1, 80, 200, 50, 500, 4, 66, 0, 0, 0, 0, 100, 100, 2, 0, 6, 4284874854, 2, 16, 16, 8, 8, 66, 20, 0, 86, 0, 0, 0, 1, 1, 30, 0, 8E3, 9999, 404, 4, 0, 0, 0, 5],
//Snowfield 3
    [58, 2, 15, 1, 10066278, 16777164, 800, 3, 1, 9, 4294967244, 1, 16, 16, 8, 8, 0, 0, 50, 10, 0, 100, 0, 0, 0, 0, 5, 15, 1, 10, 50, 20, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 100, 0, 50, 0, 0, 0, 100],
    [58, 10, 15, 1, 6723993, 13434879, 800, 3, 1, 4, 4291624959, 1, 16, 16, 8, 8, 0, 0, 10, 10, 0, 100, 0, 0, 0, 0, 5, 15, 1, 5, 50, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 100, 0, 50, 0, 0, 0, 100],
    [60, 5, 8, 1, 13369599, 10066380, 2400, 3, 1, 4, 4284901119, 1, 16, 16, 8, 8, 0, 0, 300, 40, 0, 100, 0, 0, 0, 0, 10, 30, 3, 10, 50, 30, 180, 2, 50, 0, 0, 100, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 1E3, 346, 10, 0, 0, 352, 10],
    [62, 3, 16, 2, 16777215, 10027008, 38E3, 4, 0, 2, 4286611584, 1, 16, 16, 16, 16, 0, 0, 300, 10, 3, 100, 0, 0, 0, 0, 10, 10, 1, 200, 50, 15, 350, 1, 50, 0, 50, 0, 0, 0, 90, 1, 0, 5, 3439288336, 1, 16, 48, 16, 48, 1E3, 20, 0, 100, 0, 0, 0, 6, 9, 1, 0, 6E3, 1E3, 359, 10, 0, 0, 463, 10],
//Snowfield 4
    [59, 5, 13, 2, 16777011, 3355392, 25E3, 5, 1, 10, 4294967091, 2, 16, 32, 8, 32, 0, 0, 500, 10, 2, 100, 0, 0, 0, 0, 1, 29, 1, 0, 5, 100, 180, 3, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5E3, 999, 348, 20, 2, 1, 349, 20],
    [60, 8, 14, 2, 17408, 14548957, 25E3, 3, 0, 13, 4278255360, 1, 16, 16, 4, 4, 0, 0, 500, 10, 0, 100, 0, 2, 0, 0, 1, 1, 32, 5, 50, 1E3, 500, 4, 3, 0, 0, 0, 0, 100, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5E3, 2500, 345, 20, 2, 1, 0, 40],
    [61, 10, 11, 2, 6710886, 13421772, 25E3, 104, 1, 6, 2164219920, 2, 16, 20, 12, 12, 50, 0, 100, 10, -1, 99, 0, 1, 0, 0, 2, 3, 50, 40, 250, 1, 60, 1, 50, 0, 100, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5E3, 5E3, 351, 20, 2, 1, 0, 40],
    [63, 4, 16, 1, 16777215, 10027008, 38E3, 3, 1, 1, 4288217088, 1, 8, 8, 8, 8, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, 5, 5, 1, 10, 5, 1E3, 150, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6500, 2E3, 347, 3, 350, 3, 353, 10],
//Snowfield 5
    [60, 3, 7, 1, 16764108, 10053222, 900, 3, 0, 12, 4294954188, 1, 16, 16, 8, 8, 0, 0, 1E3, 10, 0, 100, 0, 0, 0, 0, 5, 15, 1, 2, 50, 20, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 150, 361, 50, 0, 0, 0, 100],
    [61, 3, 13, 1, 16711782, 6684723, 900, 1, 1, 17, 4294901862, 1, 16, 16, 8, 8, 0, 0, 1E3, 10, 5, 100, 0, 0, 0, 0, 10, 10, 1, 0, 30, 200, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 400, 365, 50, 0, 0, 0, 100],
    [62, 0, 3, 2, 13421823, 6710886, 25E3, 4, 0, 7, 4291611903, 2, 16, 16, 12, 12, 0, 0, 1E3, 10, 5, 100, 0, 0, 0, 0, 5, 5, 9, 150, 250, 20, 300, 5, 1500, 0, 100, 0, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5E3, 5E3, 360, 20, 2, 1, 363, 20],
    [64, 5, 14, 2, 13421823, 16711782, 3E4, 3, 0, 2, 4291611903, 2, 16, 16, 8, 8, 0, 300, 300, 10, 0, 100, 0, 2, 0, 0, 0, 0, 1, 10, 50, 50, 300, 2, 20, 0, 0, 0, 0, 0, 90, 2, 1, 4, 4291611903, 2, 8, 16, 8, 8, 80, 10, 0, 100, 0, 0, 0, 5, 10, 30, 0, 6500, 3E3, 0, 5, 0, 0, 368, 10],
//Snowfield 6
    [63, 0, 3, 1, 16751001, 6697779, 2500, 4, 0, 12, 4294914867, 1, 16, 16, 8, 8, 0, 10, 1E3, 10, 3, 100, 0, 0, 0, 0, 10, 30, 1, 200, 200, 1E3, 1E3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 150, 362, 90, 0, 0, 0, 100],
    [63, 0, 3, 1, 13395507, 6697728, 2500, 4, 0, 13, 4288243251, 1, 16, 16, 8, 8, 0, 10, 1E3, 10, 3, 100, 0, 0, 0, 0, 1, 5, 7, 200, 200, 1E3, 1E3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 150, 367, 60, 0, 0, 0, 100],
    [63, 5, 10, 1, 16763904, 10053120, 2500, 3, 1, 17, 4294953984, 1, 16, 16, 8, 8, 0, 0, 1E3, 10, 0, 100, 0, 0, 0, 0, 5, 15, 1, 5, 400, 1E3, 1E3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 150, 366, 40, 0, 0, 0, 80],
    [66, 4, 16, 1, 13395507, 16763904, 6E3, 2, 1, 17, 4294914867, 1, 16, 16, 8, 8, 0, 0, 1E3, 10, 0, 100, 0, 0, 0, 0, 5, 15, 1, 15, 300, 1E3, 1E3, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 650, 1E3, 364, 30, 0, 0, 393, 100],
//Snowfield 7
    [64, 8, 13, 1, 3355647, 10066380, 1E3, 3, 1, 16, 4291611903, 1, 16, 16, 8, 8, 0, 0, 1E3, 10, 0, 100, 0, 0, 0, 0, 5, 5, 1, 5, 200, 1E3, 500, 5, 1E3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 550, 100, 0, 50, 0, 0, 371, 100],
    [65, 1, 14, 9, 16777215, 3355494, 4E4, 4, 1, 17, 4288221457, 1, 32, 48, 32, 32, 0, 50, 500, 10, 3, 100, 0, 0, 0, 0, 10, 50, 1, 200, 150, 20, 300, 1, 50, 0, 0, 0, 0, 0, 0, 3, 0, 6, 3439288336, 2, 16, 16, 16, 16, 80, 20, 0, 90, 0, 2, 0, 6, 9, 50, 0, 5500, 550, 0, 20, 2, 1, 372, 20],
    [63, 1, 16, 1, 16750848, 10053120, 3E3, 3, 1, 4, 4281584691, 1, 16, 16, 8, 8, 0, 0, 20, 20, 0, 100, 0, 0, 0, 0, 5, 20, 1, 5, 50, 50, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 550, 200, 0, 50, 0, 0, 374, 200],
    [67, 1, 16, 9, 16777164, 13408512, 6E4, 4, 1, 17, 4284901017, 1, 32, 48, 32, 32, 0, 50, 1E3, 10, 3, 100, 0, 0, 0, 0, 10, 50, 1, 200, 150, 20, 300, 5, 1800, 0, 0, 0, 0, 0, 90, 3, 1, 9, 4291624959, 2, 16, 16, 16, 16, 50, 20, 0, 90, 0, 2, 0, 5, 15, 50, 0, 7E3, 1E3, 0, 5, 0, 0, 376, 10],
//Snowfield 8
    [65, 1, 15, 1, 16777215, 10066380, 2E3, 2, 0, 13, 4284900966, 1, 16, 16, 8, 8, 0, 0, 500, 10, 0, 100, 0, 0, 0, 0, 2, 3, 1, 5, 50, 30, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 550, 150, 394, 90, 0, 0, 400, 90],
    [66, 1, 15, 1, 16777079, 7829367, 2E3, 5, 1, 10, 4294967091, 2, 16, 16, 8, 16, 0, 0, 500, 10, 1, 98, 0, 0, 0, 0, 1, 29, 1, 0, 50, 20, 200, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 550, 150, 395, 90, 0, 0, 401, 90],
    [67, 5, 8, 2, 16750848, 10040064, 15E3, 203, 0, 2, 3439288336, 2, 16, 16, 8, 8, 0, 0, 1E3, 10, 0, 100, 0, 0, 0, 0, 5, 10, 30, 5, 150, 30, 500, 1, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 3E3, 396, 15, 397, 15, 399, 15],
    [69, 5, 8, 3, 16763955, 16750848, 3E4, 3, 1, 16, 4294926352, 2, 32, 32, 24, 24, 0, 0, 1E3, 10, 0, 99, 1, 0, 200, 0, 5, 20, 1, 5, 300, 20, 500, 1, 50, 0, 0, 0, 0, 0, 95, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3E3, 3E3, 398, 10, 0, 0, 409, 20],
//Frozen Lake
    [64, 14, 15, 1, 26316, 10066380, 3E3, 1, 1, 9, 4291611903, 1, 16, 20, 4, 20, 0, 0, 200, 10, 5, 100, 0, 1, 0, 0, 5, 5, 1, 0, 50, 50, 500, 2, 25, 0, 0, 50, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 550, 500, 0, 30, 0, 0, 385, 50],
    [65, 1, 5, 2, 16777215, 3355494, 15E3, 104, 0, 12, 4294967295, 1, 16, 16, 8, 8, 30, 50, 300, 10, 3, 100, 0, 0, 0, 0, 10, 30, 5, 200, 150, 20, 500, 0, 0, 0, 0, 50, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 550, 1500, 0, 20, 0, 0, 386, 30],
    [66, 5, 8, 2, 16776960, 6710886, 15E3, 1, 1, 18, 4294967057, 2, 7, 32, 8, 32, 0, 0, 40, 10, 50, 100, 0, 1, 0, 0, 1, 99, 1, 0, 5, 250, 80, 3, 0, 0, 0, 50, 0, 0, 80, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 550, 2E3, 0, 20, 2, 1, 387, 50],
    [68, 8, 14, 3, 16777215, 26316, 65E3, 104, 1, 9, 4278216396, 1, 16, 20, 8, 8, 200, 0, 500, 10, 3, 100, 0, 0, 0, 0, 25, 50, 30, 200, 150, 1E3, 500, 0, 0, 0, 0, 50, 0, 0, 100, 1, 1, 9, 4278216396, 2, 16, 20, 4, 20, 500, 10, 5, 100, 0, 1, 0, 25, 50, 1, 0, 7E3, 3E3, 0, 5, 0, 0, 388, 10],
//Ice Castle
    [70, 10, 13, 4, 2368552, 4931105, 25E4, 4, 1, 17, 4291607446, 1, 32, 32, 8, 8, 0, 25, 200, 10, 8, 100, 0, 0, 0, 0, 100, 200, 1, 80, 50, 100, 100, 0, 0, 0, 0, 100, 0, 0, 100, 3, 1, 6, 4283121185, 1, 16, 16, 8, 8, 50, 40, 0, 94, 0, 2, 0, 8, 8, 15, 1, 8E3, 8E3, 377, 10, 379, 10, 381, 10],
    [0, 0, 0, 0, 0, 0, 0, 6406, 1, 3, 4291611903, 2, 16, 16, 8, 8, 0, 25, 2E3, 10, 0, 100, 0, 2, 0, 0, 25, 50, 2, 10, 100, 100, 500, 5, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 100],
//Snowfield 9
    [66, 5, 17, 1, 6710886, 3355443, 9E3, 0, 0, 1, 4294967295, 1, 16, 16, 8, 8, 0, 0, 10, 10, 0, 100, 0, 0, 0, 0, 1, 1, 1, 0, 50, 20, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 300, 413, 60, 0, 0, 0, 80],
    [68, 14, 17, 1, 13421772, 6710886, 2E3, 1, 1, 17, 4291598592, 1, 16, 16, 4, 4, 0, 0, 500, 10, 2, 100, 0, 0, 0, 0, 20, 30, 1, 0, 50, 30, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 200, 412, 50, 0, 0, 0, 80],
    [68, 0, 17, 1, 13421772, 6710886, 3E3, 2, 1, 17, 4291572480, 1, 16, 16, 4, 4, 0, 0, 1E3, 10, 0, 100, 0, 0, 0, 0, 10, 20, 1, 5, 50, 30, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 200, 415, 60, 0, 0, 0, 80],
    [71, 5, 17, 2, 16724991, 10027212, 7E4, 4, 0, 12, 4294915071, 1, 16, 16, 8, 8, 0, 0, 1E3, 10, 2, 100, 0, 2, 0, 0, 50, 60, 1, 150, 10, 50, 500, 0, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6E3, 3E3, 414, 3, 0, 0, 0, 20],
//Beach 4
    [67, 7, 19, 1, 16751103, 13434726, 3E3, 3, 1, 4, 4278190182, 1, 16, 16, 8, 8, 0, 0, 40, 20, 0, 100, 0, 0, 0, 0, 20, 30, 1, 5, 50, 30, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 300, 416, 90, 0, 0, 0, 80],
    [68, 10, 18, 1, 13395558, 6697779, 5E3, 3, 0, 13, 4281545523, 1, 16, 16, 4, 4, 0, 0, 80, 20, 0, 100, 0, 0, 0, 0, 7, 13, 1, 10, 20, 200, 80, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 450, 300, 411, 60, 0, 0, 0, 80],
    [69, 9, 19, 1, 13421619, 6723840, 6E3, 4, 1, 14, 4294967142, 1, 16, 16, 8, 8, 20, 60, 120, 10, 2, 100, 0, 0, 0, 0, 1, 45, 10, 50, 50, 30, 250, 3, 0, 0, 100, 100, 0, 0, 95, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 300, 410, 20, 0, 0, 0, 40],
    [72, 9, 19, 2, 16777164, 13408767, 75E3, 1, 0, 15, 4280427042, 1, 24, 24, 16, 16, 0, 80, 1E3, 20, 1, 92, 0, 0, 0, 0, 1, 90, 1, 0, 10, 200, 500, 0, 0, 0, 100, 100, 0, 0, 95, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6E3, 3E3, 417, 3, 0, 0, 0, 20],
//Forest 3
    [69, 5, 17, 1, 16737843, 6710784, 9E3, 104, 0, 13, 4294941030, 1, 16, 16, 4, 4, 40, 0, 200, 10, 3, 100, 0, 0, 0, 0, 10, 20, 10, 150, 200, 30, 80, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 400, 0, 50, 0, 0, 419, 100],
    [69, 8, 7, 1, 16751001, 16777164, 9E3, 6, 0, 13, 4294967244, 1, 16, 16, 4, 4, 0, 10, 200, 10, 3, 99, 0, 0, 0, 0, 20, 30, 6, 25, 200, 1E3, 500, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 400, 0, 50, 0, 0, 418, 100],
    [70, 14, 18, 1, 13382604, 6697728, 9E3, 1, 0, 12, 4284874905, 1, 16, 16, 8, 8, 0, 0, 500, 40, 1, 98, 0, 0, 0, 0, 8, 8, 1, 0, 15, 200, 500, 4, 50, 0, 0, 0, 0, 100, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 800, 0, 10, 0, 0, 421, 20],
    [73, 6, 18, 2, 13421619, 10053120, 12E4, 104, 0, 13, 4284913920, 1, 16, 16, 4, 4, 50, 0, 300, 10, 3, 100, 0, 0, 0, 0, 8, 8, 10, 200, 150, 30, 500, 4, 50, 0, 0, 0, 0, 100, 95, 3, 1, 6, 4291611648, 1, 16, 16, 8, 8, 1E3, 40, 0, 99, 0, 2, 0, 8, 8, 3, 0, 6E3, 4E3, 0, 5, 0, 0, 464, 10],
//Forest 4
    [70, 15, 8, 1, 6750003, 3368448, 1E4, 3, 0, 13, 4284887808, 1, 16, 16, 4, 4, 0, 0, 100, 10, 0, 100, 0, 0, 0, 0, 8, 9, 1, 5, 50, 20, 60, 0, 0, 0, -50, 0, 0, 100, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 100, 0, 80, 0, 0, 420, 100],
    [70, 15, 8, 2, 6750003, 3368448, 3E4, 4, 0, 12, 4284926976, 1, 16, 16, 8, 8, 0, 0, 300, 10, 3, 100, 0, 0, 0, 0, 1, 1, 1, 150, 100, 20, 180, 4, 40, 0, -50, 0, 0, 100, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 500, 0, 50, 0, 0, 422, 80],
    [74, 15, 8, 3, 6750003, 3368448, 15E4, 4, 0, 2, 4288217292, 1, 16, 16, 8, 8, 0, 0, 500, 10, 3, 100, 0, 0, 0, 0, 8, 8, 1, 200, 150, 30, 500, 4, 50, 0, 0, 0, 0, 100, 95, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6E3, 5E3, 0, 5, 0, 0, 423, 10],
//Forest 5
    [71, 4, 17, 1, 16737792, 16750899, 9E3, 4, 0, 12, 4294926352, 2, 16, 16, 4, 4, 0, 20, 100, 10, 20, 100, 0, 0, 0, 0, 6, 8, 1, 40, 50, 50, 80, 1, 50, 1E4, -600, 100, 100, 100, 100, 1, 0, 5, 2164219920, 2, 16, 32, 16, 32, 100, 20, 0, 0, 0, 0, 0, 6, 8, 1, 0, 600, 500, 0, 50, 0, 0, 424, 100],
    [71, 4, 17, 1, 13421568, 16777164, 9E3, 4, 1, 10, 4294967091, 2, 16, 16, 4, 4, 0, 20, 100, 10, 20, 100, 0, 0, 0, 0, 1, 15, 1, 40, 50, 50, 80, 3, 0, 1E4, 100, 100, -600, 100, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 500, 0, 50, 0, 0, 425, 100],
    [71, 4, 17, 1, 6724095, 13209, 9E3, 4, 1, 9, 4284914175, 2, 16, 16, 4, 4, 0, 20, 100, 10, 20, 100, 0, 0, 0, 0, 4, 5, 1, 40, 50, 50, 80, 2, 50, 1E4, 100, -600, 100, 100, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 500, 0, 50, 0, 0, 427, 80],
    [75, 4, 19, 2, 6710886, 16777215, 12E4, 806, 1, 17, 4284900966, 1, 16, 16, 4, 4, 40, 20, 300, 10, 10, 99, 0, 0, 0, 0, 20, 30, 16, 50, 50, 100, 500, 0, 0, -100, 100, 100, 100, 100, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6E3, 5E3, 426, 5, 0, 0, 428, 5],
//Forest 6
    [73, 1, 12, 9, 4210752, 13421568, 8E3, 4, 1, 18, 4294967056, 2, 16, 16, 8, 8, 0, 500, 500, 10, 3, 100, 0, 0, 0, 0, 0, 0, 1, 150, 150, 50, 500, 3, 0, 99999, 100, 100, 100, 100, 100, 1, 0, 18, 4294967057, 2, 64, 500, 40, 500, 10, 10, 0, 0, 1, 0, 1, 1, 9999, 1, 0, 1200, 7E3, 430, 10, 432, 10, 434, 10],
    [72, 2, 12, 1, 16764006, 16777164, 5E3, 3, 1, 9, 4288243200, 1, 16, 16, 4, 4, 0, 0, 500, 10, 0, 100, 0, 0, 0, 0, 6, 9, 1, 2, 50, 50, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 500, 431, 80, 0, 0, 0, 80],
    [72, 15, 12, 1, 6736947, 16777164, 1E4, 1, 0, 9, 4288243200, 1, 16, 16, 4, 16, 0, 0, 200, 10, 5, 100, 0, 1, 0, 0, 6, 9, 1, 0, 50, 50, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 500, 429, 80, 0, 0, 0, 80],
    [76, 1, 12, 9, 4210752, 10027008, 12E3, 2, 1, 18, 4294910480, 2, 32, 64, 64, 4, 0, 0, 1E3, 10, 0, 100, 1, 0, 0, 1, 10, 10, 1, 5, 250, 50, 500, 1, 50, 99999, 100, 100, 100, 100, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6E3, 7E3, 433, 6, 435, 6, 436, 6],
//!!!
    [74, 16, 18, 1, 10027212, 13421823, 1E4, 3, 0, 13, 4284874905, 1, 16, 16, 4, 4, 0, 0, 250, 10, 0, 100, 0, 0, 0, 0, 1, 1, 1, 5, 10, 100, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 700, 70, 0, 50, 437, 99, 438, 100],
    [77, 16, 18, 2, 13369548, 13421823, 15E4, 4803, 0, 12, 4288217241, 1, 16, 16, 4, 4, 0, 0, 500, 10, 0, 100, 0, 2, 0, 0, 1, 1, 3, 10, 5, 1E3, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7E3, 77, 0, 10, 439, 10, 440, 10],
//Hell 1
    [74, 4, 20, 1, 13421772, 6710886, 15E3, 2, 1, 19, 4294967295, 1, 8, 16, 16, 16, 0, 0, 10, 10, 0, 100, 0, 0, 0, 0, 10, 15, 1, 1, 50, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 100, 0, 80, 0, 0, 445, 300],
    [75, 4, 20, 1, 13382400, 4473924, 1E4, 104, 1, 6, 4294926352, 2, 8, 8, 8, 8, 6, 0, 50, 10, -1, 99, 0, 1, 0, 0, 5, 8, 3, 40, 10, 500, 40, 1, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 200, 0, 10, 0, 0, 443, 20],
    [75, 0, 20, 1, 3355443, 8921600, 25E3, 4, 1, 17, 4294926352, 1, 24, 16, 8, 8, 0, 500, 500, 10, 3, 100, 0, 0, 0, 0, 0, 0, 1, 150, 250, 50, 500, 1, 50, 0, 0, 0, 0, 0, 0, 6, 0, 5, 2164219920, 2, 16, 32, 16, 32, 100, 20, 5, 99, 0, 1, 0, 3, 5, 9, 0, 800, 200, 0, 10, 0, 0, 444, 20],
    [78, 0, 20, 3, 3355443, 8921600, 15E4, 1604, 1, 17, 4294926352, 1, 24, 16, 8, 8, 0, 0, 500, 10, 3, 100, 0, 0, 0, 0, 10, 15, 3, 150, 50, 10, 500, 1, 50, 0, 0, 0, 0, 0, 100, 6, 0, 5, 2164219920, 2, 16, 32, 16, 32, 100, 20, 5, 99, 0, 1, 0, 3, 5, 9, 0, 8E3, 500, 441, 5, 0, 0, 442, 10],
//Hell 2
    [75, 16, 20, 1, 13421772, 6710886, 1E4, 3, 1, 19, 4294967295, 1, 6, 6, 8, 8, 0, 0, 80, 10, 0, 100, 0, 0, 0, 0, 1, 9, 1, 5, 50, 20, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 300, 2, 2, 446, 300, 447, 300],
    [77, 1, 18, 2, 16776960, 6697728, 9E4, 6, 1, 19, 3439329041, 2, 16, 16, 16, 16, 0, 20, 200, 10, 0, 96, 0, 0, 500, 0, 1, 33, 9, 50, 50, 50, 40, 3, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 5E3, 451, 5, 0, 0, 448, 20],
    [77, 5, 13, 2, 13434624, 3355392, 9E4, 3, 1, 18, 4291624755, 2, 8, 8, 8, 8, 0, 0, 200, 10, 0, 100, 0, 0, 0, 0, 1, 33, 1, 30, 9, 250, 300, 3, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 5E3, 449, 20, 0, 0, 450, 20],
    [79, 5, 20, 3, 3355443, 16772608, 18E4, 3, 1, 19, 4294962688, 2, 8, 8, 8, 8, 0, 0, 300, 10, 0, 100, 0, 0, 500, 0, 1, 33, 1, 30, 4, 250, 500, 3, 0, 0, 0, 0, 100, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8E3, 5E3, 0, 5, 0, 0, 465, 10],
//Hell 3
    [76, 11, 20, 1, 13421772, 6714227, 15E3, 4, 1, 19, 4288256409, 1, 8, 8, 4, 4, 0, 0, 200, 10, 5, 100, 0, 0, 0, 0, 9, 12, 1, 120, 50, 1E3, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 300, 453, 80, 0, 0, 0, 100],
    [78, 11, 20, 3, 10079487, 6714227, 9E4, 4503, 1, 19, 3432631551, 2, 12, 12, 8, 8, 0, 0, 200, 10, 0, 100, 0, 2, 0, 0, 1, 1, 5, 20, 5, 1E3, 500, 5, 500, 0, 0, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4E3, 4E3, 452, 10, 0, 0, 0, 20],
    [76, 1, 17, 1, 13382400, 6714227, 15E3, 3, 1, 6, 4294926352, 2, 16, 16, 8, 8, 0, 0, 50, 10, -1, 99, 1, 0, 0, 0, 3, 6, 1, 5, 20, 40, 40, 1, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 300, 454, 80, 0, 0, 0, 100],
    [80, 0, 17, 3, 13382400, 6714227, 18E4, 1, 0, 2, 4294926368, 2, 32, 32, 24, 24, 0, 0, 2E3, 10, 0, 100, 1, 0, 500, 0, 3, 6, 1, 0, 500, 1E3, 500, 1, 100, 0, 0, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8E3, 6E3, 0, 5, 0, 0, 467, 10],
//Hell 4
    [77, 17, 17, 1, 43520, 4469538, 15E3, 3, 1, 12, 4278233600, 2, 16, 16, 8, 8, 0, 0, 200, 10, 0, 100, 1, 0, 0, 0, 6, 9, 1, 10, 50, 20, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 500, 455, 60, 0, 0, 0, 100],
    [77, 17, 20, 1, 39355, 2245700, 15E3, 4, 1, 19, 4278229435, 2, 8, 8, 8, 8, 0, 0, 200, 10, 5, 100, 1, 0, 0, 0, 9, 12, 1, 120, 50, 20, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 500, 457, 60, 0, 0, 0, 100],
    [79, 17, 11, 1, 13382400, 3355443, 15E3, 3, 0, 6, 4294926352, 2, 16, 16, 8, 8, 0, 0, 200, 10, 0, 98, 1, 0, 0, 0, 2, 3, 1, 20, 10, 200, 120, 1, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 1500, 458, 40, 0, 0, 0, 20],
    [81, 5, 13, 3, 13408563, 4469538, 2E5, 4, 1, 17, 4291598643, 2, 16, 16, 8, 8, 10, 0, 1E3, 10, 1, 100, 0, 0, 0, 0, 9, 12, 30, 200, 100, 50, 500, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8E3, 7E3, 456, 5, 0, 0, 468, 10],
//Hell 5
    [79, 4, 12, 2, 4473924, 5592405, 9E4, 4, 1, 17, 4284900966, 1, 80, 64, 16, 16, 0, 0, 200, 10, 4, 100, 0, 0, 0, 0, 100, 200, 1, 100, 200, 20, 100, 0, 0, 0, 100, 100, 100, 100, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 9999, 2, 2, 471, 20, 0, 100],
    [79, 4, 12, 2, 4473924, 4473924, 9E4, 6, 1, 3, 4288243251, 1, 16, 16, 8, 8, 0, 0, 200, 10, 4, 100, 0, 0, 0, 0, 60, 90, 10, 30, 200, 20, 200, 0, 0, 0, 100, 100, 100, 100, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 9999, 2, 2, 472, 20, 0, 100],
    [79, 4, 12, 2, 4473924, 3355443, 9E4, 1, 1, 1, 4291559526, 2, 24, 24, 12, 12, 0, 170, 200, 20, 0, 100, 1, 0, 200, 0, 100, 200, 1, 0, 200, 20, 200, 0, 0, 0, 100, 100, 100, 100, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 9999, 2, 2, 477, 20, 0, 20],
    [82, 4, 11, 1, 10066329, 10066329, 5E4, 1604, 1, 17, 4288269567, 2, 16, 16, 8, 8, 10, 100, 1E3, 10, 1, 100, 0, 0, 0, 0, 10, 20, 6, 250, 200, 20, 100, 5, 250, 0, 0, 100, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 9999, 476, 10, 0, 0, 466, 25],
//Hell 6
    [80, 2, 20, 1, 16777011, 10053171, 12E3, 6403, 1, 20, 4294967091, 2, 16, 16, 8, 8, 0, 0, 200, 10, 0, 100, 0, 0, 0, 0, 1, 9, 2, 30, 50, 50, 80, 3, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 500, 478, 100, 0, 0, 0, 100],
    [80, 16, 18, 1, 39168, 10053171, 12E3, 5603, 0, 13, 4278229248, 1, 16, 16, 4, 4, 0, 0, 500, 10, 0, 100, 0, 0, 0, 0, 1, 1, 9, 5, 300, 1, 300, 4, 66, 0, 0, 0, 0, 75, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 500, 475, 90, 0, 0, 0, 100],
    [81, 3, 19, 1, 16736272, 10053171, 15E3, 3, 1, 22, 4294926352, 2, 16, 16, 12, 12, 0, 0, 200, 20, 0, 98, 1, 0, 0, 0, 8, 8, 1, 20, 10, 50, 200, 1, 50, 0, 75, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 1500, 473, 20, 0, 0, 0, 20],
    [83, 8, 8, 2, 26316, 26316, 2E5, 403, 1, 22, 4281571839, 2, 16, 16, 8, 8, 25, 0, 1E3, 10, 0, 100, 0, 0, 0, 0, 2, 4, 8, 10, 25, 1E3, 1E3, 5, 500, 0, 0, 100, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9E3, 3E3, 474, 2, 0, 0, 469, 10],
//Inferno 1
    [81, 4, 19, 1, 16764108, 10040166, 2E4, 2, 1, 1, 4288230246, 1, 16, 16, 8, 8, 0, 0, 10, 20, 0, 100, 0, 0, 0, 0, 15, 30, 1, 20, 50, 50, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 400, 483, 100, 0, 0, 0, 100],
    [81, 4, 19, 1, 13421823, 6697881, 2E4, 3, 1, 9, 4284887961, 1, 16, 16, 8, 8, 0, 0, 150, 10, 0, 100, 0, 0, 0, 0, 4, 6, 1, 8, 50, 50, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 400, 486, 100, 0, 0, 0, 100],
    [82, 0, 20, 3, 16764108, 10040166, 1E5, 104, 1, 3, 4294927974, 1, 16, 16, 8, 8, 100, 10, 1E3, 10, 5, 100, 0, 0, 50, 0, 10, 20, 50, 150, 300, 50, 300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 4E3, 481, 5, 0, 0, 0, 20],
    [84, 0, 20, 5, 13421823, 6697881, 2E5, 104, 1, 3, 4291585791, 1, 16, 16, 8, 8, 100, 10, 160, 10, 5, 100, 0, 2, 100, 0, 10, 20, 50, 150, 300, 50, 1E3, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9E3, 4E3, 484, 3, 0, 0, 470, 10],
//Inferno 2
    [82, 5, 20, 1, 13408563, 10053171, 2E4, 4, 1, 20, 4291598643, 1, 16, 16, 8, 8, 0, 10, 1E3, 10, 3, 100, 0, 0, 0, 0, 10, 30, 1, 200, 150, 1E3, 1E3, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 900, 480, 100, 0, 0, 0, 100],
    [82, 5, 20, 1, 3394764, 10053171, 2E4, 4, 1, 19, 4281584844, 1, 8, 8, 8, 8, 0, 10, 1E3, 10, 3, 100, 0, 0, 0, 0, 10, 30, 1, 200, 150, 50, 1E3, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 900, 479, 100, 0, 0, 0, 100],
    [82, 11, 20, 1, 13395660, 6710886, 2E4, 4, 1, 9, 4291585740, 1, 16, 16, 8, 8, 0, 10, 1E3, 10, 3, 100, 0, 0, 0, 0, 10, 30, 1, 200, 50, 1E3, 1E3, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 900, 482, 100, 0, 0, 0, 100],
    [85, 0, 18, 2, 16763904, 13408563, 2E5, 2, 1, 18, 4294914833, 2, 16, 16, 8, 8, 0, 0, 500, 10, 0, 100, 1, 0, 0, 0, 20, 30, 1, 10, 10, 20, 300, 1, 50, 0, 0, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9E3, 9E3, 485, 3, 541, 10, 543, 10],
//Inferno 3
    [83, 10, 18, 1, 13382400, 3355443, 2E4, 2, 1, 20, 4294926352, 2, 16, 16, 8, 8, 0, 0, 200, 20, 0, 99, 0, 0, 20, 0, 2, 3, 1, 1, 10, 100, 500, 1, 50, 0, 100, 0, 0, -200, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 1500, 0, 100, 0, 0, 492, 160],
    [83, 10, 18, 1, 13408512, 3355443, 2E4, 2, 1, 20, 4294967091, 2, 16, 16, 8, 8, 0, 0, 200, 20, 0, 100, 0, 0, 0, 0, 1, 30, 1, 1, 10, 100, 500, 3, 0, 0, 0, 0, 100, -200, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 1500, 0, 100, 0, 0, 491, 160],
    [83, 10, 18, 1, 26316, 3355443, 2E4, 2, 1, 20, 4281558732, 2, 16, 16, 8, 8, 0, 0, 200, 20, 0, 100, 0, 0, 0, 0, 5, 5, 1, 1, 10, 100, 500, 5, 50, 0, 0, 100, 0, -200, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 1500, 0, 100, 0, 0, 494, 160],
    [86, 10, 18, 2, 52224, 3355443, 2E5, 603, 1, 20, 4281584691, 2, 16, 16, 8, 8, 20, 0, 250, 10, 0, 100, 0, 0, 0, 0, 1, 1, 40, 10, 300, 20, 200, 4, 666, 0, 0, 0, 0, 100, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9E3, 9999, 493, 3, 495, 6, 544, 10],
//Blood Lake
    [84, 7, 21, 1, 13382400, 13395507, 22E3, 3, 1, 9, 4294941030, 1, 16, 16, 8, 8, 0, 0, 200, 10, 0, 100, 0, 0, 0, 0, 5, 15, 1, 10, 50, 50, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 3333, 487, 50, 0, 0, 0, 100],
    [84, 5, 21, 1, 2254370, 4491332, 22E3, 6406, 0, 13, 4286028151, 1, 16, 16, 8, 8, 0, 0, 200, 10, 0, 100, 0, 0, 0, 0, 5, 5, 5, 5, 50, 50, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 3333, 488, 25, 0, 0, 0, 100],
    [84, 14, 21, 1, 3368652, 10066380, 22E3, 1, 1, 17, 4291611903, 1, 16, 16, 8, 8, 0, 0, 200, 10, 3, 100, 0, 0, 0, 0, 5, 5, 1, 0, 50, 50, 200, 5, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 3333, 490, 200, 0, 0, 0, 100],
    [87, 16, 21, 3, 10053120, 16763904, 25E4, 6403, 0, 13, 4294953984, 1, 16, 16, 8, 8, 0, 0, 250, 10, 0, 100, 0, 0, 0, 0, 5, 15, 7, 10, 10, 1E3, 400, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 9999, 489, 3, 547, 10, 548, 10],
//Cavern 7
    [85, 5, 8, 1, 3394815, 13158, 24E3, 3, 0, 12, 4281584895, 2, 16, 16, 8, 8, 0, 0, 200, 10, 0, 100, 0, 0, 0, 0, 6, 8, 1, 6, 50, 50, 200, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 300, 497, 80, 0, 0, 0, 100],
    [85, 18, 8, 1, 13382655, 3342438, 24E3, 4, 0, 12, 4291572735, 2, 16, 16, 8, 8, 0, 0, 200, 10, 2, 100, 0, 0, 0, 0, 6, 8, 1, 100, 50, 50, 200, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 300, 503, 80, 0, 0, 0, 100],
    [86, 2, 13, 1, 13382400, 10053171, 3E4, 104, 1, 22, 2164219920, 2, 12, 12, 6, 6, 30, 0, 100, 10, -1, 99, 1, 0, 0, 0, 4, 6, 30, 80, 200, 100, 30, 1, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 900, 498, 10, 0, 0, 528, 30],
    [88, 5, 6, 3, 13434675, 10066227, 24E4, 104, 0, 12, 4294967091, 2, 16, 16, 8, 8, 90, 0, 300, 10, 3, 100, 0, 2, 0, 0, 8, 9, 30, 150, 100, 50, 500, 3, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9E3, 5E3, 499, 3, 502, 3, 529, 5],
    [86, 16, 21, 1, 15658496, 3355443, 15E4, 6403, 1, 20, 4294967091, 2, 12, 12, 6, 6, 0, 0, 150, 10, 0, 100, 0, 2, 0, 0, 3, 3, 3, 10, 10, 250, 200, 3, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 5E3, 496, 10, 500, 10, 501, 10],
//Cavern 8
    [86, 5, 6, 1, 13408512, 10053120, 24E3, 4, 0, 12, 4294954035, 2, 16, 16, 8, 8, 0, 0, 200, 10, 3, 100, 0, 0, 0, 0, 6, 8, 1, 100, 50, 50, 200, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 400, 505, 100, 0, 0, 0, 100],
    [86, 18, 6, 1, 10066380, 6710937, 24E3, 1, 0, 7, 4288269567, 2, 12, 12, 8, 8, 0, 0, 200, 10, 2, 100, 0, 0, 0, 0, 1, 5, 1, 0, 100, 50, 200, 5, 500, 0, -100, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 400, 504, 100, 507, 100, 510, 100],
    [87, 1, 13, 1, 16724736, 16750848, 3E4, 3, 1, 18, 4294926352, 2, 16, 16, 8, 8, 0, 0, 1E3, 10, 0, 100, 1, 0, 0, 0, 10, 20, 1, 5, 50, 50, 500, 1, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 1E3, 509, 10, 0, 0, 530, 20],
    [89, 5, 8, 3, 16724736, 16750848, 24E4, 2406, 1, 20, 4294926352, 2, 16, 16, 8, 8, 0, 0, 1500, 10, 0, 100, 0, 2, 0, 0, 30, 50, 7, 5, 100, 50, 500, 1, 50, 0, 0, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9E3, 6E3, 508, 3, 511, 3, 531, 5],
    [87, 16, 21, 1, 16763904, 3355443, 15E4, 12806, 1, 20, 4294967091, 2, 12, 12, 6, 6, 0, 0, 150, 10, 0, 100, 0, 2, 0, 0, 4, 4, 4, 10, 10, 250, 200, 3, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 6E3, 506, 10, 532, 20, 545, 40],
//Hell 7
    [87, 6, 21, 1, 39168, 13395456, 2E4, 1, 0, 21, 4291624908, 1, 16, 16, 8, 8, 0, 0, 30, 30, 0, 100, 0, 0, 0, 0, 4, 6, 1, 0, 50, 50, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 300, 519, 150, 515, 150, 538, 400],
    [87, 6, 21, 2, 8930304, 13395456, 26E3, 104, 1, 3, 4284887808, 1, 16, 16, 8, 8, 20, 0, 500, 10, 3, 100, 0, 0, 0, 0, 5, 5, 2, 150, 5, 250, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 400, 512, 15, 518, 15, 539, 30],
    [88, 6, 21, 3, 13421619, 13395456, 32E3, 1, 1, 18, 4294967091, 2, 8, 32, 8, 32, 0, 0, 40, 10, 50, 100, 0, 1, 0, 0, 1, 55, 1, 0, 5, 250, 250, 3, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 500, 513, 15, 514, 15, 537, 30],
    [90, 6, 21, 4, 16724736, 16750848, 25E4, 104, 1, 21, 4294926352, 2, 32, 32, 24, 24, 60, 0, 900, 10, 3, 99, 0, 2, 0, 0, 12, 16, 15, 100, 100, 50, 500, 1, 50, 0, 100, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E4, 600, 516, 3, 517, 3, 540, 5],
//Hell 8
    [88, 1, 20, 1, 13434879, 16764006, 5E3, 3, 1, 4, 4291624959, 1, 32, 32, 16, 16, 0, 0, 30, 30, 0, 100, 0, 0, 0, 0, 10, 20, 1, 20, 100, 50, 50, 0, 0, 1E3, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 500, 522, 200, 526, 200, 535, 500],
    [89, 16, 13, 5, 4473907, 15658496, 7E4, 3, 1, 20, 4294967091, 2, 32, 16, 4, 4, 0, 0, 200, 10, 0, 100, 0, 0, 0, 0, 1, 30, 1, 30, 5, 1E3, 300, 3, 0, 0, 0, 0, 100, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 700, 520, 5, 533, 10, 534, 10],
    [89, 13, 10, 3, 4469555, 16728080, 8E4, 3, 1, 6, 4294926352, 2, 32, 40, 32, 32, 0, 0, 100, 10, -1, 98, 0, 1, 0, 0, 12, 15, 2, 20, 5, 250, 300, 1, 50, 0, 100, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 600, 521, 5, 523, 5, 524, 5],
    [91, 1, 20, 1, 16737996, 16764006, 25E4, 2, 1, 19, 3439290060, 2, 32, 32, 32, 32, 0, 0, 1E3, 10, 0, 100, 1, 0, 0, 0, 500, 600, 1, 5, 600, 50, 500, 0, 0, 1E3, 0, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E4, 1E3, 525, 3, 527, 3, 536, 5],
//Hell Gate
    [89, 4, 4, 1, 13421772, 3355494, 3E4, 2, 1, 1, 4294914867, 1, 16, 16, 8, 8, 0, 0, 10, 10, 0, 100, 0, 0, 0, 0, 60, 80, 1, 1, 50, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 1E3, 549, 200, 0, 0, 550, 200],
    [90, 4, 4, 1, 13369344, 3355494, 5E4, 4, 0, 2, 4284900966, 1, 8, 8, 8, 8, 0, 0, 300, 10, 3, 100, 0, 0, 0, 0, 10, 30, 4, 150, 50, 15, 150, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 24, 4294926352, 1, 16, 48, 12, 36, 100, 20, 0, 100, 0, 0, 0, 10, 20, 1, 0, 1E3, 3E3, 553, 40, 555, 40, 556, 40],
    [90, 0, 3, 1, 13369344, 13421772, 5E4, 104, 1, 17, 4284901068, 1, 16, 16, 8, 8, 50, 20, 300, 10, 5, 100, 0, 0, 50, 0, 5, 5, 10, 100, 50, 15, 300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 3E3, 551, 25, 552, 25, 554, 25],
    [92, 4, 4, 2, 13421772, 3355494, 3E5, 5, 1, 1, 4294914867, 1, 32, 16, 32, 8, 0, 0, 200, 20, 5, 99, 0, 0, 0, 0, 300, 500, 5, 0, 150, 100, 250, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E4, 9999, 542, 10, 0, 0, 546, 10],
//Hell Castle
    [99, 4, 4, 3, 12303291, 8934690, 999999, 3, 0, 2, 4294926352, 2, 16, 16, 16, 16, 0, 0, 100, 20, 0, 98, 1, 0, 0, 0, 6, 7, 24, 15, 60, 300, 100, 1, 100, 0, 0, 100, 0, 0, 100, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 99999, 9999, 557, 2, 0, 0, 0, 10],
    [0, 0, 0, 0, 0, 0, 0, 5, 1, 20, 4284914175, 2, 8, 8, 4, 4, 0, 0, 300, 10, 3, 100, 0, 0, 0, 0, 5, 5, 10, 0, 60, 300, 300, 2, 20, 0, 0, 0, 0, 0, 0, 2, 0, 15, 4288269567, 2, 8, 8, 4, 4, 50, 20, 0, 98, 0, 0, 0, 5, 5, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 9, 1, 18, 4294967091, 2, 8, 16, 16, 16, 30, 0, 100, 10, 0, 100, 0, 0, 0, 0, 1, 33, 6, 50, 60, 300, 500, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 4284887808, 1, 16, 16, 16, 16, 50, 50, 400, 10, 2, 100, 0, 0, 0, 0, 1, 1, 20, 300, 60, 300, 500, 4, 66, 0, 0, 0, 0, 0, 0, 1, 0, 6, 4284913920, 1, 32, 32, 24, 24, 50, 50, 0, 100, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 3, 1, 17, 4288269567, 2, 16, 16, 4, 4, 0, 0, 100, 10, 0, 100, 0, 2, 0, 0, 8, 8, 1, 75, 60, 300, 500, 5, 1800, 0, 0, 0, 0, 0, 0, 1, 0, 7, 4288269567, 2, 48, 48, 16, 16, 10, 6, 0, 100, 0, 0, 0, 5, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 8, 0, 25, 4288217088, 1, 64, 64, 40, 48, 0, 90, 100, 20, 0, 100, 0, 0, 0, 1, 9999, 9999, 1, 0, 60, 300, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
//Volcano
    [95, 13, 21, 1, 16766720, 10040064, 99999, 1, 1, 17, 4294914816, 2, 8, 8, 4, 4, 0, 0, 300, 10, 3, 99, 0, 0, 0, 0, 10, 20, 1, 0, 60, 50, 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4278190080, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E4, 9999, 561, 100, 0, 0, 0, 5],

    []
];

var ENEMY_HITBOX_VAR_1 = [20, 20, 20, 20, 18, 8, 20, 20, 8, 20, 16, 16, 20, 20, 16, 16, 16, 14, 8];
var ENEMY_HITBOX_VAR_2 = [20, 20, 20, 20, 24, 40, 20, 20, 20, 20, 16, 24, 20, 20, 16, 16, 16, 14, 40];
var ENEMY_KNOCKBACK_VAR = [1, .2, 1, .2, 2, .5, 1, .1, 1, .1, 1, 1, .1, .1, 1, 1, .2, 1, .5];
var SR_ENEMY = new SrEnemy;

/*
敵
*/
function SrEnemy() {
    var a, b;
    this.en_spawn_count = this.en_last_index = 0
    this.en_current_joint = Array(300);
    for (a = 0; 300 > a; a++) {
        this.en_current_joint[a] = Array(21);
        for (b = 0; 21 > b; b++) {
            this.en_current_joint[a][b] = new SrVec2;
        }
    }
    this.en_last_joint = Array(300);
    for (a = 0; 300 > a; a++) {
        this.en_last_joint[a] = Array(21);
        for (b = 0; 21 > b; b++) {
            this.en_last_joint[a][b] = new SrVec2
        }
    }
    this.en_id = new Int32Array(300);
    this.en_type = new Int32Array(300);
    this.en_state = new Int32Array(300);
    this.en_death_time = new Int32Array(300);
    this.en_on_ground = new Int32Array(300);
    this.en_hp = new Int32Array(300);
    this.en_attack_interval = new Int32Array(300);
    this.en_is_found = new Int32Array(300);
    this.en_got_attack = new Int32Array(300);
    this.en_slow_time = new Int32Array(300);
    this.en_slow_rate = new Int32Array(300);
    this.en_poison_time = new Int32Array(300);
    this.en_poison_damage = new Int32Array(300);
    this.en_freeze_time = new Int32Array(300);


}

/*
敵のリセット
*/
SrEnemy.prototype.enReset = function () {
    this.en_spawn_count = this.en_last_index = 0
};

/*
敵の召喚
*/
SrEnemy.prototype.enAdd = function (a, b, c) {
    var d;
    d = srFloor(100 * EnemySpawnScale / 100);
    if (this.en_last_index != d && this.en_spawn_count != d) {
        a *= 8;
        b *= 8;
        for (d = 0; 21 > d; d++) {
            setVec2(this.en_current_joint[this.en_last_index][d], a + srRandom(1), b + srRandom(1));
            this.en_last_joint[this.en_last_index][d].vecSet(this.en_current_joint[this.en_last_index][d]);
        }
        this.en_id[this.en_last_index] = c;
        this.en_type[this.en_last_index] = ENEMY_DATA[c][ENEMY_TYPE];
        this.en_state[this.en_last_index] = 0;
        this.en_death_time[this.en_last_index] = 0;
        this.en_on_ground[this.en_last_index] = 0;
        this.en_hp[this.en_last_index] = ENEMY_DATA[c][ENEMY_LP];
        this.en_attack_interval[this.en_last_index] = 0;
        this.en_is_found[this.en_last_index] = 0;
        this.en_got_attack[this.en_last_index] = 0;
        this.en_slow_time[this.en_last_index] = 0;
        this.en_slow_rate[this.en_last_index] = 0;
        this.en_poison_time[this.en_last_index] = 0;
        this.en_poison_damage[this.en_last_index] = 0;
        this.en_freeze_time[this.en_last_index] = 0;
        this.en_last_index++;
        this.en_spawn_count++
    }
};

/*
敵の削除
*/
SrEnemy.prototype.enDelete = function (a) {
    for (var b = 0; 21 > b; b++) {
        this.en_current_joint[a][b].vecSet(this.en_current_joint[this.en_last_index - 1][b]);
        this.en_last_joint[a][b].vecSet(this.en_last_joint[this.en_last_index - 1][b]);
    }
    this.en_id[a] = this.en_id[this.en_last_index - 1];
    this.en_type[a] = this.en_type[this.en_last_index - 1];
    this.en_state[a] = this.en_state[this.en_last_index - 1];
    this.en_death_time[a] = this.en_death_time[this.en_last_index - 1];
    this.en_on_ground[a] = this.en_on_ground[this.en_last_index - 1];
    this.en_hp[a] = this.en_hp[this.en_last_index - 1];
    this.en_attack_interval[a] = this.en_attack_interval[this.en_last_index - 1];
    this.en_is_found[a] = this.en_is_found[this.en_last_index - 1];
    this.en_got_attack[a] = this.en_got_attack[this.en_last_index - 1];
    this.en_slow_time[a] = this.en_slow_time[this.en_last_index - 1];
    this.en_slow_rate[a] = this.en_slow_rate[this.en_last_index - 1];
    this.en_poison_time[a] = this.en_poison_time[this.en_last_index - 1];
    this.en_poison_damage[a] = this.en_poison_damage[this.en_last_index - 1];
    this.en_freeze_time[a] = this.en_freeze_time[this.en_last_index - 1];
    this.en_last_index--
};

/*
ぶつかる
a:SrEnemy
*/
function enGroundCollision(a, b, c, d) {
    var e = new SrVec2;
    setDistance(e, a.en_current_joint[b][c], a.en_last_joint[b][c]);
    a.en_current_joint[b][c].vecSet(a.en_last_joint[b][c]);
    var g = (magnitudeOf(e) >> 2) + 1;
    scaleVec2(e, 1 / g);
    for (var h, q, m, l = 0; l < g; l++) {
        h = a.en_current_joint[b][c].y + e.y;
        q = srClampA(a.en_current_joint[b][c].x, 0, 511) >> 3;
        m = srClampA(h, 0, 255) >> 3;
        q = SR_TERRAIN.tr_data[m][q];
        if (0 <= h && 256 > h) {
            if (0 <= q && 8 >= q) {
                if (0 < e.y) {
                    a.en_on_ground[b] |= 2;
                }
                e.x *= d;
                e.y = -e.y;
            } else {
                a.en_current_joint[b][c].y = h;
            }
        }
        h = a.en_current_joint[b][c].x + e.x;
        q = srClampA(h, 0, 511) >> 3;
        m = srClampA(a.en_current_joint[b][c].y, 0, 255) >> 3;
        q = SR_TERRAIN.tr_data[m][q];
        if (0 <= h && 512 > h) {
            if (0 <= q && 8 >= q) {
                e.y *= d;
                e.x = -e.x;
                a.en_on_ground[b] |= 1
            } else {
                a.en_current_joint[b][c].x = h
            }
        }
    }
}

/*
敵を見つける
*/
function findEnemy(a, b, c, d) {
    //for (var e = SR_ENEMY, g = .5 * (a + c), h = 1E3, q = -1, m, l, A, z = 0; z < e.i; z++) {
    var e = SR_ENEMY;
    var g = .5 * (a + c);
    var h = 1E3;
    var q = -1;
    var m;
    var l;
    var A;
    for (var z = 0; z < e.en_last_index; z++) {
        m = ENEMY_DATA[e.en_id[z]][ENEMY_SIZE];
        l = ENEMY_DATA[e.en_id[z]][ENEMY_TYPE];
        A = (ENEMY_HITBOX_VAR_1[l] >> 1) * ((m >> 1) + 1);
        m = (ENEMY_HITBOX_VAR_2[l] >> 1) * m;
        e.en_is_found[z] = 0;
        l = e.en_current_joint[z][20];
        if (e.en_hp[z] && l.x - A <= c && l.x + A >= a && l.y - m <= d && l.y + m >= b) {
            e.en_is_found[z] = 1;
            if (srAbs(l.x - g) < h) {
                h = srAbs(l.x - g);
                q = z;
            }
        }
    }
    return q
}

/*
敵がダメージをうける
*/
function enGetDamage(a, b, c, d, e, g, h, q, m) {
    var l = SR_ENEMY;
    var A = -1;
    var z;
    var Z;
    var B;
    SR_PLAYER.pl_damage_dealt = 0;
    q *= .5;
    m *= .5;
    //for (var S = 0; S < l.i && (z = ENEMY_DATA[l.f[S]][ENEMY_SIZE], Z = ENEMY_DATA[l.f[S]][ENEMY_TYPE], B = srFloor(ENEMY_HITBOX_VAR_1[Z] / 2) * srFloor(z / 2 + 1), z = srFloor(ENEMY_HITBOX_VAR_2[Z] / 2) * z, !l.j[S] || l.a[S][20].x - B > g + q || l.a[S][20].x + B < g - q || l.a[S][20].y - z > h + m || l.a[S][20].y + z < h - m || (B = d + srFloor(srRandom(e - d + 1)), 4 == b ? (l.B[S] = c - srFloor(c * ENEMY_DATA[l.f[S]][ENEMY_POISON_RESISTANCE] / 100), l.C[S] = B, 0 > ENEMY_DATA[l.f[S]][ENEMY_POISON_RESISTANCE] && (l.C[S] = srMax(1, B - srFloor(B * ENEMY_DATA[l.f[S]][ENEMY_POISON_RESISTANCE] / 100)))) : (0 == b ? B = srMax(1, B - ENEMY_DATA[l.f[S]][ENEMY_PHYSICAL_RESISTANCE]) : 1 == b ? B = srMax(1, B - srFloor(B * ENEMY_DATA[l.f[S]][ENEMY_FIRE_RESISTANCE] / 100)) : 2 == b ? B = srMax(1, B - srFloor(B * ENEMY_DATA[l.f[S]][ENEMY_ICE_RESISTANCE] / 100)) : 3 == b && (B = srMax(1, B - srFloor(B * ENEMY_DATA[l.f[S]][ENEMY_THUNDER_RESISTANCE] / 100))), l.j[S] = srMax(l.j[S] - B, 0), PartyDamageEffect & 1 || SR_INDICATOR.add(l.a[S][20].x, l.a[S][20].y - z, 1, B, 12632256), l.u[S] = B), 2 == b ? (l.A[S] = 500 - srFloor(500 * ENEMY_DATA[l.f[S]][ENEMY_ICE_RESISTANCE] / 100), l.F[S] = c) : 5 == b && (l.w[S] = c - srFloor(c * ENEMY_DATA[l.f[S]][ENEMY_FREEZE_RESISTANCE] / 100)), A = S, SR_PLAYER.j += B, TargetEnemyCurrentLp = l.j[S], TargetEnemyMaxLp = ENEMY_DATA[l.f[S]][ENEMY_LP], TargetEnemyTime = 100, TargetEnemyIndex = l.f[S], 0 != a)); S++) ;

    for (var S = 0; S < l.en_last_index; S++) {
        z = ENEMY_DATA[l.en_id[S]][ENEMY_SIZE];
        Z = ENEMY_DATA[l.en_id[S]][ENEMY_TYPE];
        B = srFloor(ENEMY_HITBOX_VAR_1[Z] / 2) * srFloor(z / 2 + 1);
        z = srFloor(ENEMY_HITBOX_VAR_2[Z] / 2) * z;
        //当たり判定
        if (!l.en_hp[S] || l.en_current_joint[S][20].x - B > g + q || l.en_current_joint[S][20].x + B < g - q || l.en_current_joint[S][20].y - z > h + m || l.en_current_joint[S][20].y + z < h - m) {
            continue;
        }
        B = d + srFloor(srRandom(e - d + 1));
        if (4 == b) {//poison
            l.en_poison_time[S] = c - srFloor(c * ENEMY_DATA[l.en_id[S]][ENEMY_POISON_RESISTANCE] / 100);
            l.en_poison_damage[S] = B;
            if (0 > ENEMY_DATA[l.en_id[S]][ENEMY_POISON_RESISTANCE]) {
                l.en_poison_damage[S] = srMax(1, B - srFloor(B * ENEMY_DATA[l.en_id[S]][ENEMY_POISON_RESISTANCE] / 100));
            }
        } else {
            if (0 == b) {//physical
                B = srMax(1, B - ENEMY_DATA[l.en_id[S]][ENEMY_PHYSICAL_RESISTANCE]);
            } else if (1 == b) {//fire
                B = srMax(1, B - srFloor(B * ENEMY_DATA[l.en_id[S]][ENEMY_FIRE_RESISTANCE] / 100));
            } else if (2 == b) {//ice
                B = srMax(1, B - srFloor(B * ENEMY_DATA[l.en_id[S]][ENEMY_ICE_RESISTANCE] / 100));
            } else if (3 == b) {//thunder
                B = srMax(1, B - srFloor(B * ENEMY_DATA[l.en_id[S]][ENEMY_THUNDER_RESISTANCE] / 100));
            }
            l.en_hp[S] = srMax(l.en_hp[S] - B, 0);
            if (!(PartyDamageEffect & 1)) {
                SR_INDICATOR.inAdd(l.en_current_joint[S][20].x, l.en_current_joint[S][20].y - z, 1, B, 12632256);
            }
            l.en_got_attack[S] = B;
        }
        if (2 == b) {//ice
            l.en_slow_time[S] = 500 - srFloor(500 * ENEMY_DATA[l.en_id[S]][ENEMY_ICE_RESISTANCE] / 100);
            l.en_slow_rate[S] = c;
        } else if (5 == b) {//freeze
            l.en_freeze_time[S] = c - srFloor(c * ENEMY_DATA[l.en_id[S]][ENEMY_FREEZE_RESISTANCE] / 100);
        }
        A = S;
        SR_PLAYER.pl_damage_dealt += B;
        TargetEnemyCurrentLp = l.en_hp[S];
        TargetEnemyMaxLp = ENEMY_DATA[l.en_id[S]][ENEMY_LP];
        TargetEnemyTime = 100;
        TargetEnemyIndex = l.en_id[S];
        if (0 == a) {
            break;
        }
    }
    return A
}

/*
敵が攻撃する
a:SrEnemy
*/
function enAttack(a, b, c) {

    var d = new SrVec2;
    var e = a.en_id[b] + c;
    var g = ENEMY_DATA[e];
    var h = g[7] % 100;
    var q = srFloor(g[7] / 100);
    c = g[8];
    var m = g[9];
    var l = g[10];
    var A = g[11];
    var z = g[12];
    var Z = g[13];
    var B = g[14];
    var S = g[15];
    var ia = g[16];
    var za = g[17];
    var ta = g[18];
    var X = g[19];
    var T = g[20];
    var Y = g[21];
    var Ua = g[22];
    var eb = g[23];
    var Va = g[24];
    var ua = g[25];
    var pa = g[26];
    var Ha = g[27];
    var rb = g[28];
    var Aa = g[29];
    var ka = g[30];
    var ab = g[31];
    var Pa = g[32];
    var Wa = g[33];
    var Ca = g[34];
    var yb = g[41];
    var Hb = g[42];
    var Ib = g[43];
    var Jb = g[44];
    var Kb = g[45];
    var Lb = g[46];
    var Mb = g[47];
    var Nb = g[48];
    var Ob = g[49];
    var Pb = g[50];
    var Qb = g[51];
    var sb = g[52];
    var Rb = g[53];
    var Sb = g[54];
    var Tb = g[55];
    var Ub = g[56];
    var Vb = g[57];
    var $b = g[58];
    var g = g[59];
    if (0 < a.en_attack_interval[b]) {
        a.en_attack_interval[b]--;
    } else if (srRandom(1E3) <= ab) {
        ab = plFindPlayer(a.en_current_joint[b][0].x - Pa, a.en_current_joint[b][0].y - Pa, a.en_current_joint[b][0].x + Pa, a.en_current_joint[b][0].y + Pa, 0);
        if (-1 != ab) {
            a.en_attack_interval[b] = ka;
            if (!h) {
                //none
            } else if (1 == h) {
                var h = a.en_current_joint[b][0].x + 10 * d.x;
                var ca = a.en_current_joint[b][0].y + 10 * d.y;
                SR_PROJECTILE.pjAdd(1, h, ca, 0, 0, c, m, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, 0, ua, pa, Ha, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, 0, 0, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, g, Wa, Ca)
            } else if (2 == h) {
                d = SR_PLAYER.pl_current_joint[ab][2].x - a.en_current_joint[b][0].x;
                d /= srAbs(d);
                h = a.en_current_joint[b][0].x + 10 * d;
                ca = a.en_current_joint[b][0].y;
                SR_PROJECTILE.pjAdd(1, h, ca, d * Aa * .1, 0, c, m, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, 0, ua, pa, Ha, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, 0, 0, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, g, Wa, Ca);
            } else if (3 == h || 6 == h) {
                //for (3 == h ? setVec2(d, SR_PLAYER.a[ab][2].x - a.a[b][0].x, SR_PLAYER.a[ab][2].y - a.a[b][0].y) : 6 == h && setVec2(d, 0, -1), e = 0 < q ? q : 16, q = srFloor(512 * angleToXAxis(d) / TWOPI), q -= srFloor((rb - 1) * e / 2), ka = 0; ka < rb; ka++) {
                if (3 == h) {
                    setVec2(d, SR_PLAYER.pl_current_joint[ab][2].x - a.en_current_joint[b][0].x, SR_PLAYER.pl_current_joint[ab][2].y - a.en_current_joint[b][0].y);
                } else if (6 == h) {
                    setVec2(d, 0, -1);
                }
                if (0 < q) {
                    e = q;
                } else {
                    e = 16;
                }
                q = srFloor(512 * angleToXAxis(d) / TWOPI);
                q -= srFloor((rb - 1) * e / 2);
                for (ka = 0; ka < rb; ka++) {
                    d.x = AngleArray[q & 511][0];
                    d.y = -AngleArray[q & 511][1];
                    var h = a.en_current_joint[b][0].x + 10 * d.x;
                    var ca = a.en_current_joint[b][0].y + 10 * d.y;
                    var Pa = d.x * Aa * .1;
                    var Ba = d.y * Aa * .1;
                    SR_PROJECTILE.pjAdd(1, h, ca, Pa, Ba, c, m, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, 0, ua, pa, Ha, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, 0, 0, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, g, Wa, Ca);
                    q += e
                }
            } else if (4 == h) {
                for (ka = 0; ka < rb; ka++) {
                    setVec2(d, SR_PLAYER.pl_current_joint[ab][2].x - a.en_current_joint[b][0].x, SR_PLAYER.pl_current_joint[ab][2].y - a.en_current_joint[b][0].y);
                    if (0 < q) {
                        e = q;
                    } else {
                        e = rb;
                    }
                    if (0 < rb) {
                        ca = srFloor(srRandom(512));
                        h = srRandom(10) * e;
                        d.x += AngleArray[ca][0] * h;
                        d.y += AngleArray[ca][1] * h;
                    }
                    h = a.en_current_joint[b][0].x;
                    ca = a.en_current_joint[b][0].y;
                    Pa = d.x / Aa;
                    Ba = (d.y - .5 * Aa * Aa * T * .01) / Aa;
                    SR_PROJECTILE.pjAdd(1, h, ca, Pa, Ba, c, m, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, 0, ua, pa, Ha, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, 0, 0, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, g, Wa, Ca);
                }
            } else if (5 == h) {
                for (ka = 0; ka < rb; ka++) {
                    h = a.en_current_joint[b][0].x + srRandomRange(-Pa, Pa);
                    ca = a.en_current_joint[b][0].y + srRandomRange(-Pa, 0);
                    SR_PROJECTILE.pjAdd(1, h, ca, 0, 0, c, m, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, 0, ua, pa, Ha, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, 0, 0, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, g, Wa, Ca);
                }
            } else if (7 == h) {
                for (ka = 0; ka < rb; ka++) {
                    h = srFloor(a.en_current_joint[b][0].x / 8);
                    ca = srFloor(a.en_current_joint[b][0].y / 8);
                    //enAdd
                    a.enAdd(h, ca, e + pa);
                }
            } else if (8 == h) {
                for (ka = 0; ka < rb; ka++) {
                    ca = srRandomInt(4);
                    h = SR_PLAYER.pl_current_joint[ca][2].x;
                    ca = SR_PLAYER.pl_current_joint[ca][2].y;
                    SR_PROJECTILE.pjAdd(1, h, ca, 0, 0, c, m, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, 0, ua, pa, Ha, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, 0, 0, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, g, Wa, Ca);
                }
            } else if (9 == h) {
                for (ka = 0; ka < rb; ka++) {
                    ca = srRandomInt(4);
                    setVec2(d, SR_PLAYER.pl_current_joint[ca][0].x - a.en_current_joint[b][0].x, SR_PLAYER.pl_current_joint[ca][0].y - a.en_current_joint[b][0].y);
                    normalize(d);
                    h = a.en_current_joint[b][0].x + 10 * d.x;
                    ca = a.en_current_joint[b][0].y + 10 * d.y;
                    Pa = d.x * Aa * .1;
                    Ba = d.y * Aa * .1;
                    SR_PROJECTILE.pjAdd(1, h, ca, Pa, Ba, c, m, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, 0, ua, pa, Ha, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, 0, 0, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb, $b, g, Wa, Ca)
                }
            }
        }
    }
}

/*
敵が死ぬ
a:SrEnemy
*/
function enDeath(a, b, c) {
    //for (var d, e = 0, g = 0; g < StageCount; g++) {
    var d;
    var e = 0;
    for (var g = 0; g < StageCount; g++) {
        if (StageOpenData[g] & STAGE_UNLOCKED) {
            var h = STAGE_INDEX_DATA[g + 1] - STAGE_INDEX_DATA[g];
            for (d = 0; d < h; d++) {
                if (e < ENEMY_DATA[STAGE_INDEX_DATA[g] + d][ENEMY_LEVEL]) {
                    e = ENEMY_DATA[STAGE_INDEX_DATA[g] + d][ENEMY_LEVEL];
                }
                d += ENEMY_DATA[STAGE_INDEX_DATA[g] + d][ENEMY_SECOND_ATTACK]
            }
        }
    }
    if (1 == c) {
        d = b;
    } else {
        d = a.en_id[b];
    }
    h = srAbs(PartyLv[0] - ENEMY_DATA[d][ENEMY_LEVEL]);
    g = 0;
    if (10 > h) {
        g = srFloor(ENEMY_DATA[d][ENEMY_EXP] * (10 - h) / 10);
    } else if (e + 10 <= PartyLv[0]) {
        g = 0;
    } else {
        g = 1;
    }
    e = 100;
    for (d = 0; 4 > d; d++) {
        if (checkInventoryCompo(4 + d, 36)) {
            e += getInventoryCompo(4 + d, 8);
        }
    }
    g = srFloor(g * e / 100);
    if (1 == c) {
        return g;
    }
    antiCheatCheck();
    PartyExp = srClampA(PartyExp + g, 0, 9999999);
    d = 9999999;
    if (98 > PartyLv[0]) {
        c = 0;
        for (d = 1; d < PartyLv[0]; d++) {
            c += 1E3 * d;
        }
        d = c + 1E3 * d
    }
    if (d <= PartyExp && 99 > PartyLv[0]) {
        PartyLv[0]++;
        for (d = 0; 4 > d; d++) {
            PlayerSp[d] += 2;
        }
        c = 0;
        for (d = 4; 40 > d; d++) {
            if (49 == getItemData(InventoryItem[d], 7)) {
                c = 1;
            }
            if (49 == getItemData(InventoryCompo1[d], 7)) {
                c = 1;
            }
            if (49 == getItemData(InventoryCompo2[d], 7)) {
                c = 1;
            }
        }
        if (1 == c) {
            for (AngerCrownLightningTime = 480, b = 0; 4 > b; b++) {
                plProjectileAttack(SR_PLAYER, 562, SR_PLAYER.pl_current_joint[b][0].x, SR_PLAYER.pl_current_joint[b][0].y, 0);
                if (PlayerCurrentLp[b] != PlayerMaxLp[b]) {
                    SR_INDICATOR.inAdd(SR_PLAYER.pl_current_joint[b][0].x, SR_PLAYER.pl_current_joint[b][0].y, 0, PlayerMaxLp[b] - PlayerCurrentLp[b], 65280);
                }
                PlayerCurrentLp[b] = PlayerMaxLp[b]
            }
        }
    }
    antiCheatSet();
    c = ENEMY_DATA[a.en_id[b]][ENEMY_GOLD];
    h = g = e = 100;
    for (d = 0; 4 > d; d++) {
        if (checkInventoryCompo(4 + d, 33)) {
            e += getInventoryCompo(4 + d, 8);
        }
        if (checkInventoryCompo(4 + d, 34)) {
            g += getInventoryCompo(4 + d, 8);
        }
        if (checkInventoryCompo(4 + d, 35)) {
            h += getInventoryCompo(4 + d, 8);
        }
    }
    for (d = 0; 4 > d; d++) {
        if (checkInventoryCompo(4 + d, 41) && srRandom(100) < getInventoryCompo(4 + d, 8)) {
            var q = findEnemy(a.en_current_joint[b][0].x - 600, a.en_current_joint[b][0].y - 300, a.en_current_joint[b][0].x + 600, a.en_current_joint[b][0].y + 300);
            if (-1 != q) {
                plProjectileAttack(SR_PLAYER, getInventoryCompo(4 + d, 9), a.en_current_joint[b][0].x, a.en_current_joint[b][0].y, q)
            }
        }
    }
    q = 0;
    //地面に埋まる敵
    if (17 == a.en_type[b]) {
        q = a.en_state[b] - 1;
    }
    for (d = ENEMY_DROP_FIRST; d < ENEMY_DROP_FIRST + 6; d += 2) {
        if (0 != ENEMY_DATA[a.en_id[b]][d] && Math.random() * ENEMY_DATA[a.en_id[b]][d + 1] * 100 < e) {
            SR_DROP.dpAdd(a.en_current_joint[b][q].x, a.en_current_joint[b][q].y, ENEMY_DATA[a.en_id[b]][d], 0, 0);
        }
    }
    if (1 > 3 * Math.random()) {
        SR_DROP.dpAdd(a.en_current_joint[b][q].x, a.en_current_joint[b][q].y, 1, srFloor(c * h / 100), 0);
    }
    if (500 * Math.random() < g) {
        SR_DROP.dpAdd(a.en_current_joint[b][q].x, a.en_current_joint[b][q].y, 2, 0, 0);
    }
    return 0
}

//WINDOW.fff = SrEnemy.prototype.enMain;
/*
敵が動く
*/
SrEnemy.prototype.enMain = function () {
    var a;
    for (a = 0; a < this.en_last_index; a++) {
        var b = this.en_type[a];
        if (0 < this.en_poison_time[a] && 0 < this.en_hp[a]) {
            this.en_poison_time[a]--;
            this.en_hp[a] = srMax(this.en_hp[a] - this.en_poison_damage[a], 0);
            TargetEnemyCurrentLp = this.en_hp[a];
            TargetEnemyMaxLp = ENEMY_DATA[this.en_id[a]][ENEMY_LP];
            TargetEnemyTime = 100;
            TargetEnemyIndex = this.en_id[a];
        }
        if (0 < this.en_freeze_time[a] && 0 < this.en_hp[a]) {
            this.en_freeze_time[a]--;
        } else {
            if (0 < this.en_slow_time[a] && 0 < this.en_hp[a]) {
                this.en_slow_time[a]--
                if (srRandom(100) < this.en_slow_rate[a]) {
                    continue;
                }
            }
            if (!b) {// Walker
                a = this.enWalker(a)
            } else if (1 == b) {// Snake
                a = this.enSnake(a)
            } else if (2 == b) {// Bat
                a = this.enBat(a)
            } else if (3 == b) {// Dragon
                a = this.enDragon(a)
            } else if (4 == b) {// StickMan
                a = this.enStickMan(a, b)
            } else if (5 == b) {// Tree
                a = this.enTree(a, b)
            } else if (6 == b) {// Wheel
                a = this.enWheel(a)
            } else if (7 == b) {// Fish
                a = this.enFish(a)
            } else if (8 == b) {// Mushroom
                a = this.enMushroom(a)
            } else if (9 == b) {// Eel (swimming)
                a = this.enEel(a, b)
            } else if (10 == b) {// Spider
                a = this.enSpider(a)
            } else if (11 == b) {// Cactus
                a = this.enCactus(a)
            } else if (12 == b) {// Zombie
                a = this.enStickMan(a, b)
            } else if (13 == b) {// Eel (flying)
                a = this.enEel(a, b)
            } else if (14 == b) {// Copter
                a = this.enCopter(a)
            } else if (15 == b) {// Bouncer
                a = this.enBouncer(a)
            } else if (16 == b) {// Germ
                a = this.enGerm(a)
            } else if (17 == b) {// Digger
                a = this.enDigger(a)
            } else if (18 == b) {// Tree (hanging)
                a = this.enTree(a, b)
            }
        }
    }
};

//WINDOW.fff = SrEnemy.prototype.enWalker;
/*
敵0
*/
SrEnemy.prototype.enWalker = function (a) {
    var b;
    b = ENEMY_DATA[this.en_id[a]][ENEMY_SIZE];
    if (this.en_state[a]) {
        if (1 == this.en_state[a] || 2 == this.en_state[a]) {
            moveJoint(this.en_current_joint[a][0], this.en_last_joint[a][0], -.05, .99);
            moveJoint(this.en_current_joint[a][1], this.en_last_joint[a][1], .05, .99);
            moveJoint(this.en_current_joint[a][2], this.en_last_joint[a][2], .05, .99);
            if (0 < (this.en_on_ground[a] & 3)) {
                var c = -.1;
                if (2 == this.en_state[a]) {
                    c *= -1;
                }
                this.en_current_joint[a][1].x += srRandom(c);
                this.en_current_joint[a][2].x += srRandom(c);
                if (1 > srRandom(100)) {
                    this.en_state[a] = srClampSwap(this.en_state[a] + 1, 1, 2)
                }
            }
            pullJoints(this.en_current_joint[a][0], this.en_current_joint[a][1], 9 * b, .2, .2);
            pullJoints(this.en_current_joint[a][0], this.en_current_joint[a][2], 9 * b, .2, .2);
            pullJoints(this.en_current_joint[a][1], this.en_current_joint[a][2], 11 * b, .2, .2);
            enAttack(this, a, 0);
            for (b = this.en_on_ground[a] = 0; 3 > b; b++) {
                enGroundCollision(this, a, b, .5);
            }
            this.en_current_joint[a][20].vecSet(this.en_current_joint[a][0]);
            if (0 >= this.en_hp[a]) {
                this.en_state[a] = 3;
                for (b = 0; 3 > b; b++) {
                    this.en_current_joint[a][b].x += srRandomRange(-.5, .5);
                    this.en_current_joint[a][b].y -= srRandomRange(2, 3);
                }
                enDeath(this, a, 0)
            }
        } else {
            for (b = 0; 3 > b; b++) {
                moveJoint(this.en_current_joint[a][b], this.en_last_joint[a][b], .05, .99);
            }
            for (b = this.en_on_ground[a] = 0; 3 > b; b++) {
                enGroundCollision(this, a, b, .5);
            }
            //150 < this.h[a]++ && this.sub(a--)
            if (150 < this.en_death_time[a]++) {
                this.enDelete(a--)
            }
        }
    } else {
        this.en_current_joint[a][0].x += 1;
        this.en_current_joint[a][0].y += 0 - 4 * (b - 1);
        this.en_current_joint[a][1].x += 0;
        this.en_current_joint[a][1].y += 2 - 4 * (b - 1);
        this.en_current_joint[a][2].x += 2;
        this.en_current_joint[a][2].y += 2 - 4 * (b - 1);
        for (b = 0; 3 > b; b++) {
            this.en_last_joint[a][b].vecSet(this.en_current_joint[a][b]);
        }
        this.en_state[a] = 1
    }
    return a
};

//WINDOW.fff = SrEnemy.prototype.enSnake;
/*
敵1
*/
SrEnemy.prototype.enSnake = function (a) {
    var b;
    if (this.en_state[a]) {
        if (1 == this.en_state[a] || 2 == this.en_state[a]) {
            moveJoint(this.en_current_joint[a][0], this.en_last_joint[a][0], .05, .99);
            moveJoint(this.en_current_joint[a][1], this.en_last_joint[a][1], .05, .9);
            moveJoint(this.en_current_joint[a][2], this.en_last_joint[a][2], .05, .9);
            b = plFindPlayer(this.en_current_joint[a][0].x - 200, this.en_current_joint[a][0].y - 50, this.en_current_joint[a][0].x + 200, this.en_current_joint[a][0].y + 50, 0);
            if (-1 != b) {
                if (SR_PLAYER.pl_current_joint[b][2].x < this.en_current_joint[a][0].x) {
                    this.en_current_joint[a][0].x += -.001;
                } else {
                    this.en_current_joint[a][0].x += .001;
                }
            }
            if (0 < (this.en_on_ground[a] & 2)) {
                var c;
                if (-1 == b) {
                    c = fiftyFifty(-1, 1);
                } else if (SR_PLAYER.pl_current_joint[b][2].x < this.en_current_joint[a][0].x) {
                    c = -1;
                } else {
                    c = 1;
                }
                if (10 > srRandom(100)) {
                    this.en_current_joint[a][0].x += srRandomRange(.4, .6) * c;
                    this.en_current_joint[a][0].y += srRandomRange(-1.5, -2)
                }
            }
            pullJoints(this.en_current_joint[a][0], this.en_current_joint[a][1], 0, 0, .01);
            pullJoints(this.en_current_joint[a][1], this.en_current_joint[a][2], 0, 0, .01);
            enAttack(this, a, 0);
            this.en_on_ground[a] = 0;
            enGroundCollision(this, a, 0, .5);
            b = this.en_on_ground[a];
            enGroundCollision(this, a, 1, .5);
            enGroundCollision(this, a, 2, .5);
            this.en_on_ground[a] = b;
            this.en_current_joint[a][20].vecSet(this.en_current_joint[a][0]);
            if (0 >= this.en_hp[a]) {
                this.en_state[a] = 3;
                for (b = 0; 3 > b; b++) {
                    this.en_current_joint[a][b].x += srRandomRange(-.5, .5);
                    this.en_current_joint[a][b].y -= srRandomRange(2, 3);
                }
                enDeath(this, a, 0)
            }
        } else {
            for (b = 0; 3 > b; b++) {
                moveJoint(this.en_current_joint[a][b], this.en_last_joint[a][b], .05, .99);
            }
            for (b = this.en_on_ground[a] = 0; 3 > b; b++) {
                enGroundCollision(this, a, b, .5);
            }
            if (150 < this.en_death_time[a]++) {
                this.enDelete(a--)
            }
        }
    } else {
        this.en_current_joint[a][0].x += 0;
        this.en_current_joint[a][1].x += 1;
        this.en_current_joint[a][2].x += 2;
        for (b = 0; 3 > b; b++) {
            this.en_last_joint[a][b].vecSet(this.en_current_joint[a][b]);
        }
        this.en_state[a] = 1
    }
    return a
};

//WINDOW.fff = SrEnemy.prototype.enBat;
/*
敵2
*/
SrEnemy.prototype.enBat = function (a) {
    var b;
    var c = new SrVec2;
    b = ENEMY_DATA[this.en_id[a]][ENEMY_SIZE];
    if (this.en_state[a]) {
        if (1 == this.en_state[a] || 2 == this.en_state[a]) {
            moveJoint(this.en_current_joint[a][0], this.en_last_joint[a][0], 0, .99);
            moveJoint(this.en_current_joint[a][1], this.en_last_joint[a][1], 0, .99);
            moveJoint(this.en_current_joint[a][2], this.en_last_joint[a][2], 0, .99);
            moveJoint(this.en_current_joint[a][3], this.en_last_joint[a][3], 0, .99);
            moveJoint(this.en_current_joint[a][4], this.en_last_joint[a][4], 0, .99);
            moveJoint(this.en_current_joint[a][5], this.en_last_joint[a][5], 0, .99);
            moveJoint(this.en_current_joint[a][6], this.en_last_joint[a][6], 0, .99);
            setVec2(c, 0, 0);
            var d = plFindPlayer(this.en_current_joint[a][0].x - 150, this.en_current_joint[a][0].y - 150, this.en_current_joint[a][0].x + 150, this.en_current_joint[a][0].y + 150, 0);
            if (-1 != d) {
                setDistance(c, SR_PLAYER.pl_current_joint[d][2], this.en_current_joint[a][0]);
                d = normalize(c);
                d -= ENEMY_DATA[this.en_id[a]][32] - 10;
                if (0 > d) {
                    scaleVec2(c, -.05);
                } else {
                    scaleVec2(c, .05);
                }
            }
            //vecAdd
            this.en_current_joint[a][0].vecAdd(c);
            if (10 > srRandom(100)) {
                this.en_current_joint[a][0].x += srRandomRange(-1, 1);
                this.en_current_joint[a][0].y += srRandomRange(-1, 1);
            }
            this.en_current_joint[a][2].x += srRandomRange(0, -.1);
            this.en_current_joint[a][3].x += srRandomRange(0, -.1);
            this.en_current_joint[a][5].x += srRandomRange(0, .1);
            this.en_current_joint[a][6].x += srRandomRange(0, .1);
            c = .5;
            d = 6 * b;
            pullJoints(this.en_current_joint[a][0], this.en_current_joint[a][1], 3 * b, c, c);
            pullJoints(this.en_current_joint[a][0], this.en_current_joint[a][4], 3 * b, c, c);
            pullJoints(this.en_current_joint[a][1], this.en_current_joint[a][2], d, c, c);
            pullJoints(this.en_current_joint[a][1], this.en_current_joint[a][3], d, c, c);
            pullJoints(this.en_current_joint[a][2], this.en_current_joint[a][3], d, c, c);
            pullJoints(this.en_current_joint[a][4], this.en_current_joint[a][5], d, c, c);
            pullJoints(this.en_current_joint[a][4], this.en_current_joint[a][6], d, c, c);
            pullJoints(this.en_current_joint[a][5], this.en_current_joint[a][6], d, c, c);
            enAttack(this, a, 0);
            for (b = this.en_on_ground[a] = 0; 7 > b; b++) {
                enGroundCollision(this, a, b, 1);
            }
            this.en_current_joint[a][20].vecSet(this.en_current_joint[a][0]);
            if (0 >= this.en_hp[a]) {
                this.en_state[a] = 3;
                for (b = 0; 7 > b; b++) {
                    this.en_current_joint[a][b].x += srRandomRange(-1, 1);
                    this.en_current_joint[a][b].y -= srRandomRange(1, 2);
                }
                enDeath(this, a, 0)
            }
        } else {
            for (b = 0; 8 > b; b++) {
                moveJoint(this.en_current_joint[a][b], this.en_last_joint[a][b], .05, .99);
            }
            c = .5;
            d = 6 * (150 - this.en_death_time[a]) / 150;
            pullJoints(this.en_current_joint[a][1], this.en_current_joint[a][2], d, c, c);
            pullJoints(this.en_current_joint[a][1], this.en_current_joint[a][3], d, c, c);
            pullJoints(this.en_current_joint[a][2], this.en_current_joint[a][3], d, c, c);
            pullJoints(this.en_current_joint[a][4], this.en_current_joint[a][5], d, c, c);
            pullJoints(this.en_current_joint[a][4], this.en_current_joint[a][6], d, c, c);
            pullJoints(this.en_current_joint[a][5], this.en_current_joint[a][6], d, c, c);
            for (b = this.en_on_ground[a] = 0; 7 > b; b++) {
                enGroundCollision(this, a, b, .5);
            }
            if (150 < this.en_death_time[a]++) {
                this.enDelete(a--)
            }
        }
    } else {
        this.en_current_joint[a][0].x += 1;
        this.en_current_joint[a][0].y += 1;
        this.en_current_joint[a][1].x += 1;
        this.en_current_joint[a][1].y += 1;
        this.en_current_joint[a][2].x += 0;
        this.en_current_joint[a][2].y += 0;
        this.en_current_joint[a][3].x += 0;
        this.en_current_joint[a][3].y += 2;
        this.en_current_joint[a][4].x += 1;
        this.en_current_joint[a][4].y += 1;
        this.en_current_joint[a][5].x += 2;
        this.en_current_joint[a][5].y += 0;
        this.en_current_joint[a][6].x += 2;
        this.en_current_joint[a][6].y += 2;
        for (b = 0; 7 > b; b++) {
            this.en_last_joint[a][b].vecSet(this.en_current_joint[a][b]);
        }
        this.en_state[a] = 1
    }
    return a
};

//WINDOW.fff = SrEnemy.prototype.enDragon;
/*
敵3
*/
SrEnemy.prototype.enDragon = function (a) {
    var b;
    var c = new SrVec2;
    var d = ENEMY_DATA[this.en_id[a]][ENEMY_SIZE];
    if (this.en_state[a]) {
        if (1 == this.en_state[a] || 2 == this.en_state[a]) {
            moveJoint(this.en_current_joint[a][0], this.en_last_joint[a][0], 0, .99);
            for (b = 1; 6 > b; b++) {
                moveJoint(this.en_current_joint[a][b], this.en_last_joint[a][b], 0, .9);
            }
            setVec2(c, 0, 0);
            b = plFindPlayer(this.en_current_joint[a][0].x - 200, this.en_current_joint[a][0].y - 200, this.en_current_joint[a][0].x + 200, this.en_current_joint[a][0].y + 200, 0);
            if (-1 != b) {
                setDistance(c, SR_PLAYER.pl_current_joint[b][2], this.en_current_joint[a][0]);
                b = normalize(c);
                b -= ENEMY_DATA[this.en_id[a]][32] / 2 - 10;
                if (0 > b) {
                    scaleVec2(c, -.01);
                } else {
                    scaleVec2(c, .01);
                }
            }
            b = SR_TERRAIN.tr_data[srFloor(srClampA(this.en_current_joint[a][0].y + 24, 0, 255) / 8)][srFloor(srClampA(this.en_current_joint[a][0].x, 0, 511) / 8)];
            if (0 <= b && 8 >= b) {
                c.y -= .02;
            }
            if (2 > srRandom(100)) {
                c.x += srRandomRange(-.5, .5);
                c.y += srRandomRange(-.5, .5);
            }
            //vecAdd
            this.en_current_joint[a][0].vecAdd(c);
            c = .02;
            d = 5 * d;
            for (b = 0; 5 > b; b++) {
                pullJoints(this.en_current_joint[a][b], this.en_current_joint[a][b + 1], d, 0, c);
            }
            enAttack(this, a, 0);
            for (b = this.en_on_ground[a] = 0; 6 > b; b++) {
                enGroundCollision(this, a, b, .5);
            }
            this.en_current_joint[a][20].vecSet(this.en_current_joint[a][0]);
            if (0 >= this.en_hp[a]) {
                this.en_state[a] = 3;
                for (b = this.en_death_time[a] = 0; 6 > b; b++) {
                    this.en_current_joint[a][b].x += srRandomRange(-1, 1);
                    this.en_current_joint[a][b].y -= srRandomRange(1, 2);
                }
                enDeath(this, a, 0)
            }
        } else {
            for (b = 0; 6 > b; b++) {
                moveJoint(this.en_current_joint[a][b], this.en_last_joint[a][b], .05, .99);
            }
            c = .5;
            d = 10 * (150 - this.en_death_time[a]) / 150;
            pullJoints(this.en_current_joint[a][1], this.en_current_joint[a][2], d, c, c);
            pullJoints(this.en_current_joint[a][2], this.en_current_joint[a][3], d, c, c);
            pullJoints(this.en_current_joint[a][3], this.en_current_joint[a][4], d, c, c);
            for (b = this.en_on_ground[a] = 0; 6 > b; b++) {
                enGroundCollision(this, a, b, .5);
            }
            if (150 < this.en_death_time[a]++) {
                this.enDelete(a--)
            }
        }
    } else {
        this.en_state[a] = 1;
    }
    return a
};

//WINDOW.fff = SrEnemy.prototype.enStickMan;
/*
敵4,12
*/
SrEnemy.prototype.enStickMan = function (a, b) {
    var c;
    c = ENEMY_DATA[this.en_id[a]][ENEMY_SIZE];
    if (this.en_state[a]) {
        if (1 == this.en_state[a] || 2 == this.en_state[a]) {
            if (4 == b) {
                moveJoint(this.en_current_joint[a][0], this.en_last_joint[a][0], -.2, .99);
                moveJoint(this.en_current_joint[a][1], this.en_last_joint[a][1], 0, .99);
                moveJoint(this.en_current_joint[a][2], this.en_last_joint[a][2], -.1, .99);
                moveJoint(this.en_current_joint[a][3], this.en_last_joint[a][3], 0, .99);
                moveJoint(this.en_current_joint[a][4], this.en_last_joint[a][4], 0, .99);
                moveJoint(this.en_current_joint[a][5], this.en_last_joint[a][5], 0, .99);
                moveJoint(this.en_current_joint[a][6], this.en_last_joint[a][6], 0, .99);
                moveJoint(this.en_current_joint[a][7], this.en_last_joint[a][7], 0, .99);
                moveJoint(this.en_current_joint[a][8], this.en_last_joint[a][8], 0, .99);
                moveJoint(this.en_current_joint[a][9], this.en_last_joint[a][9], .3, .99);
                moveJoint(this.en_current_joint[a][10], this.en_last_joint[a][10], .3, .99);
            } else if (12 == b) {
                moveJoint(this.en_current_joint[a][0], this.en_last_joint[a][0], -.02, .99);
                moveJoint(this.en_current_joint[a][1], this.en_last_joint[a][1], 0, .99);
                moveJoint(this.en_current_joint[a][2], this.en_last_joint[a][2], -.01, .99);
                moveJoint(this.en_current_joint[a][3], this.en_last_joint[a][3], 0, .99);
                moveJoint(this.en_current_joint[a][4], this.en_last_joint[a][4], 0, .99);
                moveJoint(this.en_current_joint[a][5], this.en_last_joint[a][5], 0, .99);
                moveJoint(this.en_current_joint[a][6], this.en_last_joint[a][6], 0, .99);
                moveJoint(this.en_current_joint[a][7], this.en_last_joint[a][7], 0, .99);
                moveJoint(this.en_current_joint[a][8], this.en_last_joint[a][8], 0, .99);
                moveJoint(this.en_current_joint[a][9], this.en_last_joint[a][9], .1, .99);
                moveJoint(this.en_current_joint[a][10], this.en_last_joint[a][10], .1, .99);
            }
            if (50 > srRandom(100) && 0 < (this.en_on_ground[a] & 3)) {
                var d = plFindPlayer(this.en_current_joint[a][0].x - 200, this.en_current_joint[a][0].y - 50, this.en_current_joint[a][0].x + 200, this.en_current_joint[a][0].y + 50, 0);
                if (-1 != d) {
                    if (SR_PLAYER.pl_current_joint[d][2].x < this.en_current_joint[a][0].x) {
                        this.en_state[a] = 1;
                    } else {
                        this.en_state[a] = 2;
                    }
                } else if (10 > srRandom(100)) {
                    this.en_state[a] = fiftyFifty(1, 2);
                }
                var e = d = 1;
                var g = 0;
                if (12 == b) {
                    d = .25;
                    e = .3;
                    g = .25;
                }
                if (1 == this.en_state[a]) {
                    if (this.en_current_joint[a][9].x < this.en_current_joint[a][10].x) {
                        this.en_current_joint[a][10].x += srRandom(-d);
                        this.en_current_joint[a][10].y += -e;
                    } else {
                        this.en_current_joint[a][9].x += srRandom(-d);
                        this.en_current_joint[a][9].y += -e;
                    }
                    this.en_current_joint[a][5].x += srRandom(-g);
                    this.en_current_joint[a][6].x += srRandom(-g)
                } else {
                    if (this.en_current_joint[a][9].x < this.en_current_joint[a][10].x) {
                        this.en_current_joint[a][9].x += srRandom(d);
                        this.en_current_joint[a][9].y += -e;
                    } else {
                        this.en_current_joint[a][10].x += srRandom(d);
                        this.en_current_joint[a][10].y += -e;
                    }
                    this.en_current_joint[a][5].x += srRandom(g);
                    this.en_current_joint[a][6].x += srRandom(g)
                }
            }
            d = .5;
            e = 1.2 * c;
            if (12 == b) {
                d = .02;
                e = 1 * c;
            }
            pullJoints(this.en_current_joint[a][0], this.en_current_joint[a][1], 3 * e, d, d);
            pullJoints(this.en_current_joint[a][1], this.en_current_joint[a][2], 3 * e, d, d);
            pullJoints(this.en_current_joint[a][1], this.en_current_joint[a][3], 4 * e, d, d);
            pullJoints(this.en_current_joint[a][1], this.en_current_joint[a][4], 4 * e, d, d);
            pullJoints(this.en_current_joint[a][3], this.en_current_joint[a][5], 4 * e, d, d);
            pullJoints(this.en_current_joint[a][4], this.en_current_joint[a][6], 4 * e, d, d);
            pullJoints(this.en_current_joint[a][2], this.en_current_joint[a][7], 4 * e, d, d);
            pullJoints(this.en_current_joint[a][2], this.en_current_joint[a][8], 4 * e, d, d);
            pullJoints(this.en_current_joint[a][7], this.en_current_joint[a][9], 4 * e, d, d);
            pullJoints(this.en_current_joint[a][8], this.en_current_joint[a][10], 4 * e, d, d);
            pullJoints(this.en_current_joint[a][7], this.en_current_joint[a][8], 5 * e, d, d);
            if (332 == this.en_id[a]) {
                enAttack(this, a, srRandomInt(6));
            } else {
                enAttack(this, a, 0);
                if (0 != ENEMY_DATA[this.en_id[a]][ENEMY_SECOND_ATTACK]) {
                    enAttack(this, a, 1);
                }
            }
            for (c = this.en_on_ground[a] = 0; 11 > c; c++) {
                enGroundCollision(this, a, c, .5);
            }
            this.en_current_joint[a][20].vecSet(this.en_current_joint[a][1]);
            if (0 >= this.en_hp[a]) {
                this.en_state[a] = 3;
                for (c = this.en_death_time[a] = 0; 11 > c; c++) {
                    this.en_current_joint[a][c].x += srRandomRange(-1, 1);
                    this.en_current_joint[a][c].y -= srRandomRange(1, 2);
                }
                enDeath(this, a, 0)
            }
        } else {
            for (c = 0; 11 > c; c++) {
                moveJoint(this.en_current_joint[a][c], this.en_last_joint[a][c], .05, .99);
            }
            d = .5;
            e = 1.2 * (150 - this.en_death_time[a]) / 150;
            pullJoints(this.en_current_joint[a][1], this.en_current_joint[a][2], 3 * e, d, d);
            pullJoints(this.en_current_joint[a][3], this.en_current_joint[a][5], 4 * e, d, d);
            pullJoints(this.en_current_joint[a][4], this.en_current_joint[a][6], 4 * e, d, d);
            pullJoints(this.en_current_joint[a][7], this.en_current_joint[a][9], 4 * e, d, d);
            pullJoints(this.en_current_joint[a][8], this.en_current_joint[a][10], 4 * e, d, d);
            for (c = this.en_on_ground[a] = 0; 11 > c; c++) {
                enGroundCollision(this, a, c, .5);
            }
            if (150 < this.en_death_time[a]++) {
                this.enDelete(a--)
            }
        }
    } else {
        this.en_state[a] = 1;
    }
    return a
};

//WINDOW.fff = SrEnemy.prototype.enTree;
/*
敵5,18
*/
SrEnemy.prototype.enTree = function (a, b) {
    var c;
    var d = ENEMY_DATA[this.en_id[a]][ENEMY_SIZE];
    if (this.en_state[a]) {
        if (10 > this.en_state[a]) {
            if (5 == b) {
                for (c = 0; c < this.en_state[a] - 1; c++) {
                    moveJoint(this.en_current_joint[a][c], this.en_last_joint[a][c], -.04, .99);
                }
                moveJoint(this.en_current_joint[a][c], this.en_last_joint[a][c], 1, .99)
            } else {
                for (c = 0; c < this.en_state[a] - 1; c++) {
                    moveJoint(this.en_current_joint[a][c], this.en_last_joint[a][c], .04, .99);
                }
                moveJoint(this.en_current_joint[a][c], this.en_last_joint[a][c], -1, .99)
            }
            if (10 > srRandom(100)) {
                c = srFloor(srRandom(4));
                this.en_current_joint[a][c].x += srRandomRange(-.5, .5);
            }
            pullJoints(this.en_current_joint[a][0], this.en_current_joint[a][1], 8 * d, .2, .2);
            for (c = 1; c < this.en_state[a] - 2; c++) {
                pullJoints(this.en_current_joint[a][c], this.en_current_joint[a][c + 1], 6 * d, .2, .2);
            }
            pullJoints(this.en_current_joint[a][c], this.en_current_joint[a][c + 1], 6 * d, .2, 0);
            enAttack(this, a, 0);
            for (c = this.en_on_ground[a] = 0; c < this.en_state[a]; c++) {
                enGroundCollision(this, a, c, .5);
            }
            this.en_current_joint[a][20].x = .5 * (this.en_current_joint[a][0].x + this.en_current_joint[a][this.en_state[a] - 1].x);
            this.en_current_joint[a][20].y = .5 * (this.en_current_joint[a][0].y + this.en_current_joint[a][this.en_state[a] - 1].y);
            if (0 >= this.en_hp[a]) {
                for (c = 0; c < this.en_state[a]; c++) {
                    this.en_current_joint[a][c].x += srRandomRange(-.5, .5);
                    this.en_current_joint[a][c].y -= srRandomRange(2, 3);
                }
                this.en_state[a] += 10;
                enDeath(this, a, 0)
            }
        } else {
            for (c = 0; c < this.en_state[a] - 10; c++) {
                moveJoint(this.en_current_joint[a][c], this.en_last_joint[a][c], .05, .99);
            }
            for (c = this.en_on_ground[a] = 0; c < this.en_state[a] - 10; c++) {
                enGroundCollision(this, a, c, .5);
            }
            if (150 < this.en_death_time[a]++) {
                this.enDelete(a--)
            }
        }
    } else {
        this.en_state[a] = srFloor(srRandomRange(4, 8));
    }
    return a
};

//WINDOW.fff = SrEnemy.prototype.enWheel;
/*
敵6
*/
SrEnemy.prototype.enWheel = function (a) {
    var b;
    var c = ENEMY_DATA[this.en_id[a]][ENEMY_SIZE];
    if (this.en_state[a]) {
        if (1 == this.en_state[a] || 2 == this.en_state[a]) {
            moveJoint(this.en_current_joint[a][0], this.en_last_joint[a][0], .5, .99);
            for (b = 1; 7 > b; b++) {
                moveJoint(this.en_current_joint[a][b], this.en_last_joint[a][b], 0, .99);
            }
            b = plFindPlayer(this.en_current_joint[a][0].x - 200, this.en_current_joint[a][0].y - 50, this.en_current_joint[a][0].x + 200, this.en_current_joint[a][0].y + 50, 0);
            if (-1 != b && 40 > srRandom(100) && 0 < (this.en_on_ground[a] & 2)) {
                if (SR_PLAYER.pl_current_joint[b][2].x < this.en_current_joint[a][0].x) {
                    this.en_current_joint[a][0].x += -2;
                } else {
                    this.en_current_joint[a][0].x += 2;
                }
            }
            var d = .1;
            var c = 1.2 * c;
            for (b = 1; 4 > b; b++) {
                pullJoints(this.en_current_joint[a][b], this.en_current_joint[a][b + 3], 20 * c, d, d);
            }
            for (b = 1; 5 > b; b++) {
                pullJoints(this.en_current_joint[a][b], this.en_current_joint[a][b + 2], 17 * c, d, d);
            }
            pullJoints(this.en_current_joint[a][b + 0], this.en_current_joint[a][1], 17 * c, d, d);
            pullJoints(this.en_current_joint[a][b + 1], this.en_current_joint[a][2], 17 * c, d, d);
            for (b = 1; 6 > b; b++) {
                pullJoints(this.en_current_joint[a][b], this.en_current_joint[a][b + 1], 10 * c, d, d);
            }
            pullJoints(this.en_current_joint[a][b], this.en_current_joint[a][1], 10 * c, d, d);
            for (b = 1; 7 > b; b++) {
                pullJoints(this.en_current_joint[a][0], this.en_current_joint[a][b], 10 * c, .2, .2);
            }
            enAttack(this, a, 0);
            for (b = this.en_on_ground[a] = 0; 7 > b; b++) {
                enGroundCollision(this, a, b, .5);
            }
            this.en_current_joint[a][20].vecSet(this.en_current_joint[a][0]);
            if (0 >= this.en_hp[a]) {
                this.en_state[a] = 3;
                for (b = this.en_death_time[a] = 0; 7 > b; b++) {
                    this.en_current_joint[a][b].x += srRandomRange(-.5, .5);
                    this.en_current_joint[a][b].y -= srRandomRange(2, 3);
                }
                enDeath(this, a, 0)
            }
        } else {
            for (b = 0; 7 > b; b++) {
                moveJoint(this.en_current_joint[a][b], this.en_last_joint[a][b], .05, .99);
            }
            d = .5;
            c = 1.2 * c * (150 - this.en_death_time[a]) / 150;
            for (b = 1; 6 > b; b++) {
                pullJoints(this.en_current_joint[a][b], this.en_current_joint[a][b + 1], 10 * c, d, d);
            }
            for (b = this.en_on_ground[a] = 0; 7 > b; b++) {
                enGroundCollision(this, a, b, .5);
            }
            if (150 < this.en_death_time[a]++) {
                this.enDelete(a--)
            }
        }
    } else {
        this.en_current_joint[a][0].x += 1;
        this.en_current_joint[a][0].y += 1;
        this.en_current_joint[a][1].x += 1;
        this.en_current_joint[a][1].y += 0;
        this.en_current_joint[a][2].x += 1.85;
        this.en_current_joint[a][2].y += .5;
        this.en_current_joint[a][3].x += 1.85;
        this.en_current_joint[a][3].y += 1.5;
        this.en_current_joint[a][4].x += 1;
        this.en_current_joint[a][4].y += 2;
        this.en_current_joint[a][5].x += 1 - .85;
        this.en_current_joint[a][5].y += 1.5;
        this.en_current_joint[a][6].x += 1 - .85;
        this.en_current_joint[a][6].y += .5;
        for (b = 0; 7 > b; b++) {
            this.en_last_joint[a][b].vecSet(this.en_current_joint[a][b]);
        }
        this.en_state[a] = 1
    }
    return a
};

//WINDOW.fff = SrEnemy.prototype.enFish;
/*
敵7
*/
SrEnemy.prototype.enFish = function (a) {
    var b;
    var c = new SrVec2;
    var d = ENEMY_DATA[this.en_id[a]][ENEMY_SIZE];
    if (this.en_state[a]) {
        if (1 == this.en_state[a] || 2 == this.en_state[a]) {
            moveJoint(this.en_current_joint[a][0], this.en_last_joint[a][0], 0, .99);
            for (b = 1; 5 > b; b++) {
                moveJoint(this.en_current_joint[a][b], this.en_last_joint[a][b], 0, .9);
            }
            setVec2(c, 0, 0);
            b = plFindPlayer(this.en_current_joint[a][0].x - 150, this.en_current_joint[a][0].y - 50, this.en_current_joint[a][0].x + 150, this.en_current_joint[a][0].y + 50, 0);
            if (-1 != b) {
                setDistance(c, SR_PLAYER.pl_current_joint[b][2], this.en_current_joint[a][0]);
                b = normalize(c);
                b -= ENEMY_DATA[this.en_id[a]][32] / 2 - 10;
                if (0 > b) {
                    scaleVec2(c, -.01);
                } else {
                    scaleVec2(c, .01);
                }
            }
            if (0 > SR_TERRAIN.tr_data[srFloor(srClampA(this.en_current_joint[a][0].y - 7, 0, 255) / 8)][srFloor(srClampA(this.en_current_joint[a][0].x, 0, 511) / 8)]) {
                c.y += .03;
            }
            if (2 > srRandom(100)) {
                c.x += srRandomRange(-.5, .5);
                c.y += srRandomRange(-.5, .5);
            }
            //vecAdd
            this.en_current_joint[a][0].vecAdd(c);
            c = .1;
            pullJoints(this.en_current_joint[a][0], this.en_current_joint[a][1], 9 * d, 0, c);
            pullJoints(this.en_current_joint[a][1], this.en_current_joint[a][2], 5 * d, 0, c);
            pullJoints(this.en_current_joint[a][2], this.en_current_joint[a][3], 6 * d, 0, c);
            pullJoints(this.en_current_joint[a][2], this.en_current_joint[a][4], 6 * d, 0, c);
            pullJoints(this.en_current_joint[a][3], this.en_current_joint[a][4], 8 * d, c, c);
            enAttack(this, a, 0);
            for (b = this.en_on_ground[a] = 0; 5 > b; b++) {
                enGroundCollision(this, a, b, .5);
            }
            this.en_current_joint[a][20].vecSet(this.en_current_joint[a][1]);
            if (0 >= this.en_hp[a]) {
                this.en_state[a] = 3;
                for (b = this.en_death_time[a] = 0; 5 > b; b++) {
                    this.en_current_joint[a][b].x += srRandomRange(-2, 2);
                    this.en_current_joint[a][b].y -= srRandomRange(2, 4);
                }
                enDeath(this, a, 0)
            }
        } else {
            for (b = 0; 5 > b; b++) {
                moveJoint(this.en_current_joint[a][b], this.en_last_joint[a][b], .05, .99);
            }
            c = .5;
            d = 7 * d * (150 - this.en_death_time[a]) / 150;
            pullJoints(this.en_current_joint[a][2], this.en_current_joint[a][3], d, c, c);
            pullJoints(this.en_current_joint[a][2], this.en_current_joint[a][4], d, c, c);
            pullJoints(this.en_current_joint[a][3], this.en_current_joint[a][4], d, c, c);
            for (b = this.en_on_ground[a] = 0; 5 > b; b++) {
                enGroundCollision(this, a, b, .5);
            }
            if (150 < this.en_death_time[a]++) {
                this.enDelete(a--)
            }
        }
    } else {
        this.en_state[a] = 1;
    }
    return a
};

//WINDOW.fff = SrEnemy.prototype.enMushroom;
/*
敵8
*/
SrEnemy.prototype.enMushroom = function (a) {
    var b;
    var c = ENEMY_DATA[this.en_id[a]][ENEMY_SIZE];
    if (this.en_state[a]) {
        if (1 == this.en_state[a]) {
            for (b = 0; 2 > b; b++) {
                moveJoint(this.en_current_joint[a][b], this.en_last_joint[a][b], -.04, .99);
            }
            moveJoint(this.en_current_joint[a][b], this.en_last_joint[a][b], 1, .99);
            pullJoints(this.en_current_joint[a][0], this.en_current_joint[a][1], 7 * c, .2, .2);
            pullJoints(this.en_current_joint[a][1], this.en_current_joint[a][2], 5 * c, .2, 0);
            this.en_current_joint[a][0].x = this.en_current_joint[a][1].x = this.en_current_joint[a][2].x;
            if (0 < this.en_attack_interval[a]) {
                this.en_attack_interval[a]--;
            } else if (0 < this.en_got_attack[a]) {
                this.en_current_joint[a][0].y += srRandomRange(0, 1);
                enAttack(this, a, 0);
            }
            this.en_got_attack[a] = 0;
            for (b = this.en_on_ground[a] = 0; 3 > b; b++) {
                enGroundCollision(this, a, b, .5);
            }
            this.en_current_joint[a][20].x = this.en_current_joint[a][0].x;
            this.en_current_joint[a][20].y = .5 * (this.en_current_joint[a][0].y + this.en_current_joint[a][1].y);
            if (0 >= this.en_hp[a]) {
                this.en_state[a]++;
                for (b = 0; 3 > b; b++) {
                    this.en_current_joint[a][b].x += srRandomRange(-.5, .5);
                    this.en_current_joint[a][b].y -= srRandomRange(2, 3);
                }
                enDeath(this, a, 0)
            }
        } else {
            for (b = 0; 3 > b; b++) {
                moveJoint(this.en_current_joint[a][b], this.en_last_joint[a][b], .05, .99);
            }
            for (b = this.en_on_ground[a] = 0; 3 > b; b++) {
                enGroundCollision(this, a, b, .5);
            }
            if (150 < this.en_death_time[a]++) {
                this.enDelete(a--)
            }
        }
    } else {
        this.en_current_joint[a][0].x += 0;
        this.en_current_joint[a][0].y += 0;
        this.en_current_joint[a][1].x += 0;
        this.en_current_joint[a][1].y += 1;
        this.en_current_joint[a][2].x += 0;
        this.en_current_joint[a][2].y += 3;
        this.en_state[a]++;
    }
    return a
};

//WINDOW.fff = SrEnemy.prototype.enEel;
/*
敵9,13
*/
SrEnemy.prototype.enEel = function (a, b) {
    var c;
    var d = new SrVec2;
    var e = ENEMY_DATA[this.en_id[a]][ENEMY_SIZE];
    if (this.en_state[a]) {
        if (1 == this.en_state[a] || 2 == this.en_state[a]) {
            moveJoint(this.en_current_joint[a][0], this.en_last_joint[a][0], 0, .98);
            for (c = 1; 6 > c; c++) {
                moveJoint(this.en_current_joint[a][c], this.en_last_joint[a][c], 0, .9);
            }
            if (9 == b) {
                setVec2(d, 0, 0);
                c = plFindPlayer(this.en_current_joint[a][0].x - 150, this.en_current_joint[a][0].y - 50, this.en_current_joint[a][0].x + 150, this.en_current_joint[a][0].y + 50, 0);
                if (-1 != c) {
                    setDistance(d, SR_PLAYER.pl_current_joint[c][2], this.en_current_joint[a][0]);
                    c = normalize(d);
                    c -= ENEMY_DATA[this.en_id[a]][32] / 2 - 10;
                    if (0 > c) {
                        scaleVec2(d, -.05);
                        if (384 < this.en_current_joint[a][0].x) {
                            setPerpendicular(d);
                        }
                        if (128 > this.en_current_joint[a][0].x) {
                            setPerpendicular(d);
                            scaleVec2(d, -1);
                        }
                    } else {
                        scaleVec2(d, .01);
                    }
                }
                c = srFloor(srClampA(this.en_current_joint[a][0].x, 0, 511) / 8);
                var g = srFloor(srClampA(this.en_current_joint[a][0].y - 7, 0, 255) / 8);
                c = SR_TERRAIN.tr_data[g][c];
                if (0 > c) {
                    d.y += .05;
                }
                c = srFloor(srClampA(this.en_current_joint[a][0].x + d.x, 0, 511) / 8);
                g = srFloor(srClampA(this.en_current_joint[a][0].y + d.y, 0, 255) / 8);
                c = SR_TERRAIN.tr_data[g][c];
                if (0 <= c && 8 >= c) {
                    setPerpendicular(d)
                }
            } else {
                setVec2(d, 0, 0);
                c = plFindPlayer(this.en_current_joint[a][0].x - 500, this.en_current_joint[a][0].y - 500, this.en_current_joint[a][0].x + 500, this.en_current_joint[a][0].y + 500, 0);
                if (-1 != c) {
                    setDistance(d, SR_PLAYER.pl_current_joint[c][2], this.en_current_joint[a][0]);
                    c = normalize(d);
                    c -= ENEMY_DATA[this.en_id[a]][32] / 2 - 10;
                    if (0 > c) {
                        if (1 == this.en_state[a]) {
                            scaleVec2(d, -.05);
                        } else {
                            scaleVec2(d, .05);
                        }
                        setPerpendicular(d);
                    } else {
                        scaleVec2(d, .02);
                    }
                }
                c = srFloor(srClampA(this.en_current_joint[a][0].x + d.x, 0, 511) / 8);
                g = srFloor(srClampA(this.en_current_joint[a][0].y + d.y, 0, 255) / 8);
                c = SR_TERRAIN.tr_data[g][c];
                if (0 <= c && 8 >= c) {
                    setPerpendicular(d);
                    if (2 == this.en_state[a]) {
                        scaleVec2(d, -1);
                    }
                }
                c = srFloor(srClampA(this.en_current_joint[a][0].x + d.x, 0, 511) / 8);
                g = srFloor(srClampA(this.en_current_joint[a][0].y + d.y, 0, 255) / 8);
                c = SR_TERRAIN.tr_data[g][c];
                if (0 <= c && 8 >= c) {
                    setPerpendicular(d);
                    if (2 == this.en_state[a]) {
                        scaleVec2(d, -1);
                    }
                }
            }
            if (2 > srRandom(100)) {
                d.x += srRandomRange(-.5, .5);
                d.y += srRandomRange(-.5, .5);
            }
            //vecAdd
            this.en_current_joint[a][0].vecAdd(d);
            for (c = 0; 6 > c; c++) {
                pullJoints(this.en_current_joint[a][c], this.en_current_joint[a][c + 1], 6 * e, 0, .5);
            }
            if (0 == ENEMY_DATA[this.en_id[a]][ENEMY_SECOND_ATTACK]) {
                enAttack(this, a, 0);
            } else if (50 > srRandom(100)) {
                enAttack(this, a, 0);
            } else {
                enAttack(this, a, 1);
            }
            for (c = this.en_on_ground[a] = 0; 6 > c; c++) {
                enGroundCollision(this, a, c, .5);
            }
            this.en_current_joint[a][20].vecSet(this.en_current_joint[a][0]);
            if (0 >= this.en_hp[a]) {
                this.en_state[a] = 3;
                for (c = this.en_death_time[a] = 0; 6 > c; c++) {
                    this.en_current_joint[a][c].x += srRandomRange(-2, 2);
                    this.en_current_joint[a][c].y -= srRandomRange(2, 4);
                }
                enDeath(this, a, 0)
            }
        } else {
            for (c = 0; 6 > c; c++) {
                moveJoint(this.en_current_joint[a][c], this.en_last_joint[a][c], .05, .99);
            }
            d = 6 * (150 - this.en_death_time[a]) / 150;
            for (c = 1; 5 > c; c++) {
                pullJoints(this.en_current_joint[a][c], this.en_current_joint[a][c + 1], d * e, 0, .5);
            }
            for (c = this.en_on_ground[a] = 0; 6 > c; c++) {
                enGroundCollision(this, a, c, .5);
            }
            if (150 < this.en_death_time[a]++) {
                this.enDelete(a--)
            }
        }
    } else {
        if (50 > srRandom(100)) {
            this.en_state[a] = 1;
        } else {
            this.en_state[a] = 2;
        }
    }
    return a
};

//WINDOW.fff = SrEnemy.prototype.enSpider;
/*
敵10
*/
SrEnemy.prototype.enSpider = function (a) {
    var b;
    b = ENEMY_DATA[this.en_id[a]][ENEMY_SIZE];
    if (this.en_state[a]) {
        if (1 == this.en_state[a] || 2 == this.en_state[a]) {
            moveJoint(this.en_current_joint[a][0], this.en_last_joint[a][0], -.05, .99);
            moveJoint(this.en_current_joint[a][1], this.en_last_joint[a][1], -.1, .99);
            moveJoint(this.en_current_joint[a][2], this.en_last_joint[a][2], .8, .99);
            moveJoint(this.en_current_joint[a][3], this.en_last_joint[a][3], -.1, .99);
            moveJoint(this.en_current_joint[a][4], this.en_last_joint[a][4], .8, .99);
            moveJoint(this.en_current_joint[a][5], this.en_last_joint[a][5], -.1, .99);
            moveJoint(this.en_current_joint[a][6], this.en_last_joint[a][6], .8, .99);
            moveJoint(this.en_current_joint[a][7], this.en_last_joint[a][7], -.1, .99);
            moveJoint(this.en_current_joint[a][8], this.en_last_joint[a][8], .8, .99);
            if (50 > srRandom(100) && 0 < (this.en_on_ground[a] & 3)) {
                var c = plFindPlayer(this.en_current_joint[a][0].x - 500, this.en_current_joint[a][0].y - 25, this.en_current_joint[a][0].x + 500, this.en_current_joint[a][0].y + 25, 0);
                if (-1 != c) {
                    if (SR_PLAYER.pl_current_joint[c][2].x < this.en_current_joint[a][0].x) {
                        this.en_state[a] = 1;
                    } else {
                        this.en_state[a] = 2;
                    }
                } else {
                    if (10 > srRandom(100)) {
                        this.en_state[a] = fiftyFifty(1, 2);
                    }
                }
                if (1 == this.en_state[a]) {
                    if (this.en_current_joint[a][2].x < this.en_current_joint[a][6].x) {
                        this.en_current_joint[a][6].x += srRandom(-1);
                        this.en_current_joint[a][6].y += srRandomRange(-1, -1);
                    } else {
                        this.en_current_joint[a][2].x += srRandom(-1);
                        this.en_current_joint[a][2].y += srRandomRange(-1, -1);
                    }
                    if (this.en_current_joint[a][4].x < this.en_current_joint[a][8].x) {
                        this.en_current_joint[a][8].x += srRandom(-1);
                        this.en_current_joint[a][8].y += srRandomRange(-1, -1);
                    } else {
                        this.en_current_joint[a][4].x += srRandom(-1);
                        this.en_current_joint[a][4].y += srRandomRange(-1, -1);
                    }
                    if (1 > srRandom(100)) {
                        --this.en_current_joint[a][0].x;
                        this.en_current_joint[a][0].y -= 3
                    }
                } else {
                    if (this.en_current_joint[a][2].x < this.en_current_joint[a][6].x) {
                        this.en_current_joint[a][2].x += srRandom(1);
                        this.en_current_joint[a][2].y += srRandomRange(-1, -1);
                    } else {
                        this.en_current_joint[a][6].x += srRandom(1);
                        this.en_current_joint[a][6].y += srRandomRange(-1, -1);
                    }
                    if (this.en_current_joint[a][4].x < this.en_current_joint[a][8].x) {
                        this.en_current_joint[a][4].x += srRandom(1);
                        this.en_current_joint[a][4].y += srRandomRange(-1, -1);
                    } else {
                        this.en_current_joint[a][8].x += srRandom(1);
                        this.en_current_joint[a][8].y += srRandomRange(-1, -1);
                    }
                    if (1 > srRandom(100)) {
                        this.en_current_joint[a][0].x += 1;
                        this.en_current_joint[a][0].y -= 3
                    }
                }
            }
            c = .3;
            b = 2.2 * b;
            pullJoints(this.en_current_joint[a][0], this.en_current_joint[a][5], 3 * b, .1 * c, c);
            pullJoints(this.en_current_joint[a][0], this.en_current_joint[a][7], 3 * b, .1 * c, c);
            pullJoints(this.en_current_joint[a][0], this.en_current_joint[a][6], 3 * b, .1 * c, c);
            pullJoints(this.en_current_joint[a][5], this.en_current_joint[a][6], 2 * b, .2 * c, .2 * c);
            pullJoints(this.en_current_joint[a][0], this.en_current_joint[a][8], 3 * b, .1 * c, c);
            pullJoints(this.en_current_joint[a][7], this.en_current_joint[a][8], 2 * b, .2 * c, .2 * c);
            pullJoints(this.en_current_joint[a][0], this.en_current_joint[a][1], 4 * b, .1 * c, c);
            pullJoints(this.en_current_joint[a][0], this.en_current_joint[a][3], 4 * b, .1 * c, c);
            pullJoints(this.en_current_joint[a][0], this.en_current_joint[a][2], 4 * b, .1 * c, c);
            pullJoints(this.en_current_joint[a][1], this.en_current_joint[a][2], 3 * b, .2 * c, .2 * c);
            pullJoints(this.en_current_joint[a][0], this.en_current_joint[a][4], 4 * b, .1 * c, c);
            pullJoints(this.en_current_joint[a][3], this.en_current_joint[a][4], 3 * b, .2 * c, .2 * c);
            pullJoints(this.en_current_joint[a][2], this.en_current_joint[a][4], 8 * b, .1 * c, .1 * c);
            pullJoints(this.en_current_joint[a][5], this.en_current_joint[a][7], 7 * b, .1 * c, .1 * c);
            enAttack(this, a, 0);
            if (0 != ENEMY_DATA[this.en_id[a]][ENEMY_SECOND_ATTACK]) {
                enAttack(this, a, 1);
            }
            for (b = this.en_on_ground[a] = 0; 9 > b; b++) {
                enGroundCollision(this, a, b, .5);
            }
            this.en_current_joint[a][20].vecSet(this.en_current_joint[a][0]);
            if (0 >= this.en_hp[a]) {
                this.en_state[a] = 3;
                this.en_death_time[a] = 0;
                for (b = 1; 9 > b; b++) {
                    this.en_current_joint[a][b].x += srRandomRange(-1, 1);
                    this.en_current_joint[a][b].y -= srRandomRange(1, 2);
                }
                enDeath(this, a, 0)
            }
        } else {
            for (b = 0; 9 > b; b++) {
                moveJoint(this.en_current_joint[a][b], this.en_last_joint[a][b], .05, .99);
            }
            c = .5;
            b = 1.2 * (150 - this.en_death_time[a]) / 150;
            pullJoints(this.en_current_joint[a][1], this.en_current_joint[a][2], 4 * b, c, c);
            pullJoints(this.en_current_joint[a][3], this.en_current_joint[a][4], 4 * b, c, c);
            pullJoints(this.en_current_joint[a][5], this.en_current_joint[a][6], 3 * b, c, c);
            pullJoints(this.en_current_joint[a][7], this.en_current_joint[a][8], 3 * b, c, c);
            for (b = this.en_on_ground[a] = 0; 9 > b; b++) {
                enGroundCollision(this, a, b, .5);
            }
            if (150 < this.en_death_time[a]++) {
                this.enDelete(a--)
            }
        }
    } else {
        this.en_current_joint[a][0].x += 4;
        this.en_current_joint[a][0].y += 0;
        this.en_current_joint[a][1].x += 0;
        this.en_current_joint[a][1].y += 0;
        this.en_current_joint[a][2].x += 0;
        this.en_current_joint[a][2].y += 7.99;
        this.en_current_joint[a][3].x += 7.99;
        this.en_current_joint[a][3].y += 0;
        this.en_current_joint[a][4].x += 7.99;
        this.en_current_joint[a][4].y += 7.99;
        this.en_current_joint[a][5].x += 0;
        this.en_current_joint[a][5].y += 0;
        this.en_current_joint[a][6].x += 0;
        this.en_current_joint[a][6].y += 7.99;
        this.en_current_joint[a][7].x += 7.99;
        this.en_current_joint[a][7].y += 0;
        this.en_current_joint[a][8].x += 7.99;
        this.en_current_joint[a][8].y += 7.99;
        for (b = 0; 9 > b; b++) {
            this.en_last_joint[a][b].vecSet(this.en_current_joint[a][b]);
        }
        this.en_state[a] = 1
    }
    return a
};

//WINDOW.fff = SrEnemy.prototype.enCactus;
/*
敵11
*/
SrEnemy.prototype.enCactus = function (a) {
    var b;
    var c = ENEMY_DATA[this.en_id[a]][ENEMY_SIZE];
    if (this.en_state[a]) {
        if (1 == this.en_state[a]) {
            for (b = 0; 3 > b; b++) {
                moveJoint(this.en_current_joint[a][b], this.en_last_joint[a][b], -.04, .99);
            }
            moveJoint(this.en_current_joint[a][b], this.en_last_joint[a][b], 1, .99);
            pullJoints(this.en_current_joint[a][0], this.en_current_joint[a][3], 20 * c, .2, 0);
            pullJoints(this.en_current_joint[a][1], this.en_current_joint[a][3], 15 * c, .2, 0);
            pullJoints(this.en_current_joint[a][2], this.en_current_joint[a][3], 20 * c, .2, 0);
            this.en_current_joint[a][0].x = this.en_current_joint[a][3].x;
            this.en_current_joint[a][1].x = this.en_current_joint[a][3].x - 8 * c;
            this.en_current_joint[a][2].x = this.en_current_joint[a][3].x + 8 * c;
            if (0 < this.en_attack_interval[a]) {
                this.en_attack_interval[a]--;
            } else if (0 < this.en_got_attack[a]) {
                this.en_current_joint[a][0].y += srRandomRange(0, 1);
                this.en_current_joint[a][1].y += srRandomRange(0, 1);
                this.en_current_joint[a][2].y += srRandomRange(0, 1);
                enAttack(this, a, 0);
            }
            this.en_got_attack[a] = 0;
            for (b = this.en_on_ground[a] = 0; 4 > b; b++) {
                enGroundCollision(this, a, b, .5);
            }
            this.en_current_joint[a][20].x = this.en_current_joint[a][0].x;
            this.en_current_joint[a][20].y = .5 * (this.en_current_joint[a][0].y + this.en_current_joint[a][1].y);
            if (0 >= this.en_hp[a]) {
                this.en_state[a]++;
                for (b = 0; 4 > b; b++) {
                    this.en_current_joint[a][b].x += srRandomRange(-.5, .5);
                    this.en_current_joint[a][b].y -= srRandomRange(2, 3);
                }
                enDeath(this, a, 0)
            }
        } else {
            for (b = 0; 4 > b; b++) {
                moveJoint(this.en_current_joint[a][b], this.en_last_joint[a][b], .05, .99);
            }
            for (b = this.en_on_ground[a] = 0; 4 > b; b++) {
                enGroundCollision(this, a, b, .5);
            }
            if (150 < this.en_death_time[a]++) {
                this.enDelete(a--)
            }
        }
    } else {
        this.en_current_joint[a][0].x += 1;
        this.en_current_joint[a][0].y += 0;
        this.en_current_joint[a][1].x += 0;
        this.en_current_joint[a][1].y += 1;
        this.en_current_joint[a][2].x += 2;
        this.en_current_joint[a][2].y += 1;
        this.en_current_joint[a][3].x += 1;
        this.en_current_joint[a][3].y += 2;
        this.en_state[a]++;
    }
    return a
};

//WINDOW.fff = SrEnemy.prototype.enCopter;
/*
敵14
*/
SrEnemy.prototype.enCopter = function (a) {
    var b;
    var c = new SrVec2;
    b = ENEMY_DATA[this.en_id[a]][ENEMY_SIZE];
    if (this.en_state[a]) {
        if (1 == this.en_state[a] || 2 == this.en_state[a]) {
            moveJoint(this.en_current_joint[a][0], this.en_last_joint[a][0], .1, .99);
            moveJoint(this.en_current_joint[a][1], this.en_last_joint[a][1], .1, .99);
            moveJoint(this.en_current_joint[a][2], this.en_last_joint[a][2], -.1, .99);
            moveJoint(this.en_current_joint[a][3], this.en_last_joint[a][3], -.1, .99);
            setVec2(c, 0, 0);
            var d = plFindPlayer(this.en_current_joint[a][0].x - 150, this.en_current_joint[a][0].y - 250, this.en_current_joint[a][0].x + 150, this.en_current_joint[a][0].y + 250, 0);
            if (-1 != d) {
                c.x = SR_PLAYER.pl_current_joint[d][2].x - this.en_current_joint[a][0].x;
                c.y = SR_PLAYER.pl_current_joint[d][2].y - 10 - this.en_current_joint[a][0].y;
                if (-10 > c.x) {
                    c.x = -.02;
                } else if (10 < c.x) {
                    c.x = .02;
                } else {
                    c.x = srRandomRange(-.02, .02);
                }
                d = ENEMY_DATA[this.en_id[a]][32] / 2;
                if (c.y < -d) {
                    c.y = -.02;
                } else if (c.y > d) {
                    c.y = .02;
                } else {
                    c.y = srRandomRange(-.1, .1);
                }
            }
            //vecAdd
            this.en_current_joint[a][0].vecAdd(c);
            this.en_current_joint[a][2].x -= srRandom(.8);
            this.en_current_joint[a][3].x += srRandom(.8);
            c = .3;
            pullJoints(this.en_current_joint[a][1], this.en_current_joint[a][2], 8 * b, c, c);
            pullJoints(this.en_current_joint[a][1], this.en_current_joint[a][3], 8 * b, c, c);
            pullJoints(this.en_current_joint[a][2], this.en_current_joint[a][3], 16 * b, c, c);
            pullJoints(this.en_current_joint[a][0], this.en_current_joint[a][2], 12 * b, c, c);
            pullJoints(this.en_current_joint[a][0], this.en_current_joint[a][3], 12 * b, c, c);
            enAttack(this, a, 0);
            for (b = this.en_on_ground[a] = 0; 4 > b; b++) {
                enGroundCollision(this, a, b, 1);
            }
            this.en_current_joint[a][20].vecSet(this.en_current_joint[a][0]);
            if (0 >= this.en_hp[a]) {
                this.en_state[a] = 3;
                for (b = 0; 4 > b; b++) {
                    this.en_current_joint[a][b].x += srRandomRange(-1, 1);
                    this.en_current_joint[a][b].y -= srRandomRange(1, 2);
                }
                enDeath(this, a, 0)
            }
        } else {
            for (b = 0; 4 > b; b++) {
                moveJoint(this.en_current_joint[a][b], this.en_last_joint[a][b], .05, .99);
            }
            c = .3;
            b = (150 - this.en_death_time[a]) / 150;
            pullJoints(this.en_current_joint[a][1], this.en_current_joint[a][2], 8 * b, c, c);
            pullJoints(this.en_current_joint[a][1], this.en_current_joint[a][3], 8 * b, c, c);
            pullJoints(this.en_current_joint[a][2], this.en_current_joint[a][3], 16 * b, c, c);
            for (b = this.en_on_ground[a] = 0; 4 > b; b++) {
                enGroundCollision(this, a, b, .5);
            }
            if (150 < this.en_death_time[a]++) {
                this.enDelete(a--)
            }
        }
    } else {
        this.en_current_joint[a][0].x += 2;
        this.en_current_joint[a][0].y += 4;
        this.en_current_joint[a][1].x += 2;
        this.en_current_joint[a][1].y += 2;
        this.en_current_joint[a][2].x += 0;
        this.en_current_joint[a][2].y += 0;
        this.en_current_joint[a][3].x += 4;
        this.en_current_joint[a][3].y += 0;
        for (b = 0; 4 > b; b++) {
            this.en_last_joint[a][b].vecSet(this.en_current_joint[a][b]);
        }
        this.en_state[a] = 1
    }
    return a
};

//WINDOW.fff = SrEnemy.prototype.enBouncer;
/*
敵15
*/
SrEnemy.prototype.enBouncer = function (a) {
    var b;
    b = ENEMY_DATA[this.en_id[a]][ENEMY_SIZE];
    if (this.en_state[a]) {
        if (1 == this.en_state[a]) {
            moveJoint(this.en_current_joint[a][0], this.en_last_joint[a][0], -.15, .99);
            moveJoint(this.en_current_joint[a][1], this.en_last_joint[a][1], .1, .99);
            moveJoint(this.en_current_joint[a][2], this.en_last_joint[a][2], .1, .99);
            var c = plFindPlayer(this.en_current_joint[a][0].x - 200, this.en_current_joint[a][0].y - 50, this.en_current_joint[a][0].x + 200, this.en_current_joint[a][0].y + 50, 0);
            if (0 < (this.en_on_ground[a] & 2) && 5 > srRandom(100)) {
                var d;
                if (-1 == c) {
                    d = fiftyFifty(-1, 1);
                } else if (SR_PLAYER.pl_current_joint[c][2].x < this.en_current_joint[a][0].x) {
                    d = -1;
                } else {
                    d = 1;
                }
                this.en_current_joint[a][0].x += srRandomRange(.4, .6) * d;
                this.en_current_joint[a][0].y += srRandomRange(-1.5, -2)
            }
            c = .01;
            pullJoints(this.en_current_joint[a][0], this.en_current_joint[a][1], 5 * b, c, c);
            pullJoints(this.en_current_joint[a][0], this.en_current_joint[a][2], 5 * b, c, c);
            pullJoints(this.en_current_joint[a][1], this.en_current_joint[a][2], 6 * b, c, c);
            if (1 < b && 0 < this.en_got_attack[a] && 10 > srRandom(100)) {
                this.enAdd(srFloor(this.en_current_joint[a][0].x / 8), srFloor(this.en_current_joint[a][0].y / 8), this.en_id[a] - 1);
            }
            this.en_got_attack[a] = 0;
            enAttack(this, a, 0);
            for (b = this.en_on_ground[a] = 0; 3 > b; b++) {
                enGroundCollision(this, a, b, .9);
            }
            this.en_current_joint[a][20].vecSet(this.en_current_joint[a][0]);
            if (0 >= this.en_hp[a]) {
                this.en_state[a]++;
                this.en_current_joint[a][3].vecSet(this.en_current_joint[a][0]);
                this.en_last_joint[a][3].vecSet(this.en_current_joint[a][0]);
                for (b = 0; 4 > b; b++) {
                    this.en_current_joint[a][b].x += srRandomRange(-.5, .5);
                    this.en_current_joint[a][b].y -= srRandomRange(2, 3);
                }
                enDeath(this, a, 0)
            }
        } else {
            for (b = 0; 4 > b; b++) {
                moveJoint(this.en_current_joint[a][b], this.en_last_joint[a][b], .05, .99);
            }
            c = .01;
            b = (150 - this.en_death_time[a]) / 150;
            pullJoints(this.en_current_joint[a][0], this.en_current_joint[a][1], 5 * b, c, c);
            pullJoints(this.en_current_joint[a][0], this.en_current_joint[a][2], 5 * b, c, c);
            pullJoints(this.en_current_joint[a][1], this.en_current_joint[a][2], 6 * b, c, c);
            for (b = this.en_on_ground[a] = 0; 4 > b; b++) {
                enGroundCollision(this, a, b, .5);
            }
            if (150 < this.en_death_time[a]++) {
                this.enDelete(a--)
            }
        }
    } else {
        this.en_current_joint[a][0].x += 1;
        this.en_current_joint[a][0].y += 0;
        this.en_current_joint[a][1].x += 0;
        this.en_current_joint[a][1].y += 1;
        this.en_current_joint[a][2].x += 2;
        this.en_current_joint[a][2].y += 1;
        for (b = 0; 3 > b; b++) {
            this.en_last_joint[a][b].vecSet(this.en_current_joint[a][b]);
        }
        this.en_state[a]++
    }
    return a
};

//WINDOW.fff = SrEnemy.prototype.enGerm;
/*
敵16
*/
SrEnemy.prototype.enGerm = function (a) {
    var b;
    var c = new SrVec2;
    var d = ENEMY_DATA[this.en_id[a]][ENEMY_SIZE];
    if (this.en_state[a]) {
        if (1 == this.en_state[a]) {
            for (b = 0; 10 > b; b++) {
                moveJoint(this.en_current_joint[a][b], this.en_last_joint[a][b], 0, .98);
            }
            if (0 >= this.en_death_time[a] && 5 > srRandom(100)) {
                b = srFloor(srRandom(3));
                if (0 == b) {
                    c.x = (this.en_current_joint[a][8].x + this.en_current_joint[a][9].x) / 2 - this.en_current_joint[a][7].x;
                    c.y = (this.en_current_joint[a][8].y + this.en_current_joint[a][9].y) / 2 - this.en_current_joint[a][7].y;
                    normalize(c);
                    scaleVec2(c, d);
                    //vecAdd
                    this.en_current_joint[a][7].vecAdd(c);
                } else if (1 == b) {
                    c.x = (this.en_current_joint[a][9].x + this.en_current_joint[a][7].x) / 2 - this.en_current_joint[a][8].x;
                    c.y = (this.en_current_joint[a][9].y + this.en_current_joint[a][7].y) / 2 - this.en_current_joint[a][8].y;
                    normalize(c);
                    scaleVec2(c, d);
                    //vecAdd
                    this.en_current_joint[a][8].vecAdd(c);
                } else {
                    if (2 == b) {
                        c.x = (this.en_current_joint[a][7].x + this.en_current_joint[a][8].x) / 2 - this.en_current_joint[a][9].x;
                    }
                    c.y = (this.en_current_joint[a][7].y + this.en_current_joint[a][8].y) / 2 - this.en_current_joint[a][9].y;
                    normalize(c);
                    scaleVec2(c, d);
                    //vecAdd
                    this.en_current_joint[a][9].vecAdd(c);
                }
                this.en_death_time[a] = 25 * d;
            }
            setVec2(c, 0, 0);
            b = plFindPlayer(this.en_current_joint[a][0].x - 200, this.en_current_joint[a][0].y - 200, this.en_current_joint[a][0].x + 200, this.en_current_joint[a][0].y + 200, 0);
            if (-1 != b) {
                setDistance(c, SR_PLAYER.pl_current_joint[b][2], this.en_current_joint[a][0]);
                normalize(c);
                for (b = 4; 7 > b; b++) {
                    this.en_current_joint[a][b].x += .02 * c.x;
                    this.en_current_joint[a][b].y += .02 * c.y;
                }
            }
            c = .05;
            for (b = 1; 4 > b; b++) {
                pullJoints(this.en_current_joint[a][0], this.en_current_joint[a][b], 3 * d, c, c);
            }
            for (b = 1; 4 > b; b++) {
                pullJoints(this.en_current_joint[a][b], this.en_current_joint[a][b + 3], 3 * d, c, c);
            }
            for (b = 4; 7 > b; b++) {
                pullJoints(this.en_current_joint[a][b], this.en_current_joint[a][b + 3], 3 * d, c, .01);
            }
            if (5 > this.en_death_time[a]--) {
                c = .01 / d;
                pullJoints(this.en_current_joint[a][7], this.en_current_joint[a][8], 20 * d, c, c);
                pullJoints(this.en_current_joint[a][8], this.en_current_joint[a][9], 20 * d, c, c);
                pullJoints(this.en_current_joint[a][9], this.en_current_joint[a][7], 20 * d, c, c);
            }
            enAttack(this, a, 0);
            for (b = this.en_on_ground[a] = 0; 10 > b; b++) {
                enGroundCollision(this, a, b, .9);
            }
            this.en_current_joint[a][20].vecSet(this.en_current_joint[a][0]);
            if (0 >= this.en_hp[a]) {
                this.en_state[a]++;
                for (b = this.en_death_time[a] = 0; 4 > b; b++) {
                    this.en_current_joint[a][b].x += srRandomRange(-.5, .5);
                    this.en_current_joint[a][b].y -= srRandomRange(2, 3);
                }
                enDeath(this, a, 0)
            }
        } else {
            for (b = 0; 10 > b; b++) {
                moveJoint(this.en_current_joint[a][b], this.en_last_joint[a][b], .05, .98);
            }
            var c = .05;
            var e = (150 - this.en_death_time[a]) / 150;
            for (b = 1; 4 > b; b++) {
                pullJoints(this.en_current_joint[a][b], this.en_current_joint[a][b + 3], 3 * d * e, c, c);
            }
            for (b = 4; 7 > b; b++) {
                pullJoints(this.en_current_joint[a][b], this.en_current_joint[a][b + 3], 3 * d * e, c, c);
            }
            for (b = this.en_on_ground[a] = 0; 10 > b; b++) {
                enGroundCollision(this, a, b, .5);
            }
            if (150 < this.en_death_time[a]++) {
                this.enDelete(a--)
            }
        }
    } else {
        this.en_state[a]++;
    }
    return a
};

//WINDOW.fff = SrEnemy.prototype.enDigger;
/*
敵17
*/
SrEnemy.prototype.enDigger = function (a) {
    var b;
    var c = ENEMY_DATA[this.en_id[a]][ENEMY_SIZE];
    if (this.en_state[a]) {
        if (10 > this.en_state[a]) {
            if (500 > this.en_death_time[a]) {
                moveJoint(this.en_current_joint[a][0], this.en_last_joint[a][0], .1, .99);
            } else {
                moveJoint(this.en_current_joint[a][0], this.en_last_joint[a][0], -.1, .99);
            }
            for (b = 1; b < this.en_state[a] - 1; b++) {
                moveJoint(this.en_current_joint[a][b], this.en_last_joint[a][b], 0, .99);
            }
            moveJoint(this.en_current_joint[a][b], this.en_last_joint[a][b], 1, .99);
            if (10 > srRandom(100)) {
                b = srFloor(srRandom(4));
                this.en_current_joint[a][b].x += srRandomRange(-.5, .5);
            }
            this.en_death_time[a]++;
            if (600 < this.en_death_time[a]) {
                this.en_death_time[a] = srFloor(srRandom(400));
            }
            pullJoints(this.en_current_joint[a][0], this.en_current_joint[a][1], 8 * c, .2, .2);
            for (b = 1; b < this.en_state[a] - 2; b++) {
                pullJoints(this.en_current_joint[a][b], this.en_current_joint[a][b + 1], 6 * c, .2, .2);
            }
            pullJoints(this.en_current_joint[a][b], this.en_current_joint[a][b + 1], 6 * c, .2, 0);
            enAttack(this, a, 0);
            this.en_on_ground[a] = 0;
            for (b = this.en_state[a] - 1; b < this.en_state[a]; b++) {
                enGroundCollision(this, a, b, .5);
            }
            this.en_current_joint[a][20].vecSet(this.en_current_joint[a][0]);
            if (0 >= this.en_hp[a]) {
                for (b = 0; b < this.en_state[a]; b++) {
                    this.en_current_joint[a][b].x += srRandomRange(-.5, .5);
                    this.en_current_joint[a][b].y -= srRandomRange(2, 3);
                }
                this.en_death_time[a] = 0;
                enDeath(this, a, 0);
                this.en_state[a] += 10
            }
        } else {
            for (b = 0; b < this.en_state[a] - 10; b++) {
                moveJoint(this.en_current_joint[a][b], this.en_last_joint[a][b], .05, .99);
            }
            this.en_on_ground[a] = 0;
            if (150 < this.en_death_time[a]++) {
                this.enDelete(a--)
            }
        }
    } else {
        this.en_state[a] = srFloor(srRandomRange(4, 7));
        this.en_death_time[a] = srFloor(srRandom(400));
    }
    return a
};

//WINDOW.fff = SrEnemy.prototype.enDraw;
/*
EnDraw 描画
*/
SrEnemy.prototype.enDraw = function () {
    var a, b;
    for (a = 0; a < this.en_last_index; a++) {
        var c = ENEMY_DATA[this.en_id[a]][2];
        var d = ENEMY_DATA[this.en_id[a]][4];
        var e = ENEMY_DATA[this.en_id[a]][5];
        var g = ENEMY_DATA[this.en_id[a]][ENEMY_SIZE];
        if (0 < this.en_freeze_time[a]) {
            d = 5934817;
            e = 1989840;
        } else if (0 < this.en_slow_time[a]) {
            d = 1989840;
            e = 9840;
        } else if (0 < this.en_poison_time[a]) {
            d = 3407616;
            e = 3381504;
        }

        //drawLine(this.en_current_joint[a][0].x,this.en_current_joint[a][0].y,this.en_current_joint[a][0].x,this.en_current_joint[a][0].y-this.h[a],65535);

        var h = (150 - this.en_death_time[a]) / 150 * g;
        switch (this.en_type[a]) {
            case 0:
                frameRectCentered(srFloor(this.en_current_joint[a][1].x - .5), srFloor(this.en_current_joint[a][1].y) - 2 * g, srFloor(4 * h) + 1, srFloor(4 * h) + 1, e);
                frameRectCentered(srFloor(this.en_current_joint[a][2].x - .5), srFloor(this.en_current_joint[a][2].y) - 2 * g, srFloor(4 * h) + 1, srFloor(4 * h) + 1, e);
                drawFromImageCentered(EnemyHeadImage, srFloor(this.en_current_joint[a][0].x), srFloor(this.en_current_joint[a][0].y), srFloor(16 * h), srFloor(16 * h), 16 * c, 0, 16, 16, d);
                break;
            case 1:
                drawFromImageCentered(EnemyHeadImage, srFloor(this.en_current_joint[a][2].x), srFloor(this.en_current_joint[a][2].y - 2 * h), srFloor(8 * h), srFloor(8 * h), 16 * c, 0, 16, 16, e);
                drawFromImageCentered(EnemyHeadImage, srFloor(this.en_current_joint[a][1].x), srFloor(this.en_current_joint[a][1].y - 3 * h), srFloor(12 * h), srFloor(12 * h), 16 * c, 0, 16, 16, e);
                drawFromImageCentered(EnemyHeadImage, srFloor(this.en_current_joint[a][0].x), srFloor(this.en_current_joint[a][0].y - 4 * h), srFloor(16 * h), srFloor(16 * h), 16 * c, 0, 16, 16, d);
                break;
            case 2:
                drawLine(this.en_current_joint[a][1].x, this.en_current_joint[a][1].y, this.en_current_joint[a][2].x, this.en_current_joint[a][2].y, e);
                drawLine(this.en_current_joint[a][2].x, this.en_current_joint[a][2].y, this.en_current_joint[a][3].x, this.en_current_joint[a][3].y, e);
                drawLine(this.en_current_joint[a][3].x, this.en_current_joint[a][3].y, this.en_current_joint[a][1].x, this.en_current_joint[a][1].y, e);
                drawLine(this.en_current_joint[a][4].x, this.en_current_joint[a][4].y, this.en_current_joint[a][5].x, this.en_current_joint[a][5].y, e);
                drawLine(this.en_current_joint[a][5].x, this.en_current_joint[a][5].y, this.en_current_joint[a][6].x, this.en_current_joint[a][6].y, e);
                drawLine(this.en_current_joint[a][6].x, this.en_current_joint[a][6].y, this.en_current_joint[a][4].x, this.en_current_joint[a][4].y, e);
                drawFromImageCentered(EnemyHeadImage, srFloor(this.en_current_joint[a][0].x), srFloor(this.en_current_joint[a][0].y), srFloor(16 * h), srFloor(16 * h), 16 * c, 0, 16, 16, d);
                break;
            case 3:
                if (3 > this.en_state[a]) {
                    drawLine(this.en_current_joint[a][0].x, this.en_current_joint[a][0].y, this.en_current_joint[a][1].x, this.en_current_joint[a][1].y, e);
                    drawLine(this.en_current_joint[a][4].x, this.en_current_joint[a][4].y, this.en_current_joint[a][5].x, this.en_current_joint[a][5].y, e);
                }
                drawLine(this.en_current_joint[a][1].x, this.en_current_joint[a][1].y, this.en_current_joint[a][2].x, this.en_current_joint[a][2].y, e);
                drawLine(this.en_current_joint[a][2].x, this.en_current_joint[a][2].y, this.en_current_joint[a][3].x, this.en_current_joint[a][3].y, e);
                drawLine(this.en_current_joint[a][3].x, this.en_current_joint[a][3].y, this.en_current_joint[a][4].x, this.en_current_joint[a][4].y, e);
                filledRectCentered(srFloor(this.en_current_joint[a][5].x), srFloor(this.en_current_joint[a][5].y), srFloor(2 * h), srFloor(2 * h), d);
                drawFromImageCentered(EnemyHeadImage, srFloor(this.en_current_joint[a][0].x), srFloor(this.en_current_joint[a][0].y), srFloor(16 * h), srFloor(16 * h), 16 * c, 0, 16, 16, d);
                break;
            case 4:
            case 12:
                drawLine(this.en_current_joint[a][1].x, this.en_current_joint[a][1].y, this.en_current_joint[a][2].x, this.en_current_joint[a][2].y, e);
                if (3 > this.en_state[a]) {
                    drawLine(this.en_current_joint[a][1].x, this.en_current_joint[a][1].y, this.en_current_joint[a][3].x, this.en_current_joint[a][3].y, e);
                    drawLine(this.en_current_joint[a][1].x, this.en_current_joint[a][1].y, this.en_current_joint[a][4].x, this.en_current_joint[a][4].y, e);
                }
                drawLine(this.en_current_joint[a][3].x, this.en_current_joint[a][3].y, this.en_current_joint[a][5].x, this.en_current_joint[a][5].y, e);
                drawLine(this.en_current_joint[a][4].x, this.en_current_joint[a][4].y, this.en_current_joint[a][6].x, this.en_current_joint[a][6].y, e);
                if (3 > this.en_state[a]) {
                    drawLine(this.en_current_joint[a][2].x, this.en_current_joint[a][2].y, this.en_current_joint[a][7].x, this.en_current_joint[a][7].y, e);
                    drawLine(this.en_current_joint[a][2].x, this.en_current_joint[a][2].y, this.en_current_joint[a][8].x, this.en_current_joint[a][8].y, e);
                }
                drawLine(this.en_current_joint[a][7].x, this.en_current_joint[a][7].y, this.en_current_joint[a][9].x, this.en_current_joint[a][9].y, e);
                drawLine(this.en_current_joint[a][8].x, this.en_current_joint[a][8].y, this.en_current_joint[a][10].x, this.en_current_joint[a][10].y, e);
                drawFromImageCentered(EnemyHeadImage, srFloor(this.en_current_joint[a][0].x), srFloor(this.en_current_joint[a][0].y), srFloor(16 * h), srFloor(16 * h), 16 * c, 0, 16, 16, d);
                if (332 == this.en_id[a]) {
                    drawFromImageCentered(EnemyHeadImage, srFloor(this.en_current_joint[a][0].x), srFloor(this.en_current_joint[a][0].y - 3 * h), srFloor(16 * h), srFloor(16 * h), 352, 0, 16, 16, 16777215);
                }
                break;
            case 5:
            case 18:
                var q;
                if (5 == this.en_type[a]) {
                    q = -2;
                } else {
                    q = 2;
                }
                //for (b = 10 > this.b[a] ? this.b[a] - 1 : this.b[a] - 11; 0 < b; b--) {
                if (10 > this.en_state[a]) {
                    b = this.en_state[a] - 1
                } else {
                    b = this.en_state[a] - 11
                }
                while (0 < b) {
                    frameRectCentered(srFloor(this.en_current_joint[a][b].x), srFloor(this.en_current_joint[a][b].y + q * h), srFloor(4 * h) + 1, srFloor(4 * h) + 1, e);
                    b--;
                }
                if (5 == this.en_type[a]) {
                    drawFromImageCentered(EnemyHeadImage, srFloor(this.en_current_joint[a][0].x), srFloor(this.en_current_joint[a][0].y), srFloor(16 * h), srFloor(16 * h), 16 * c, 0, 16, 16, d);
                } else {
                    drawFromImageCentered(EnemyHeadImage, srFloor(this.en_current_joint[a][0].x), srFloor(this.en_current_joint[a][0].y), srFloor(16 * h), srFloor(16 * h), 16 * c, 15, 16, -16, d);
                }
                break;
            case 6:
                for (b = 1; 6 > b; b++) {
                    drawLine(this.en_current_joint[a][b].x, this.en_current_joint[a][b].y, this.en_current_joint[a][b + 1].x, this.en_current_joint[a][b + 1].y, e);
                }
                if (3 > this.en_state[a]) {
                    drawLine(this.en_current_joint[a][b].x, this.en_current_joint[a][b].y, this.en_current_joint[a][1].x, this.en_current_joint[a][1].y, e);
                }
                drawFromImageCentered(EnemyHeadImage, srFloor(this.en_current_joint[a][0].x), srFloor(this.en_current_joint[a][0].y), srFloor(16 * h), srFloor(16 * h), 16 * c, 0, 16, 16, d);
                break;
            case 7:
                drawLine(this.en_current_joint[a][2].x, this.en_current_joint[a][2].y, this.en_current_joint[a][3].x, this.en_current_joint[a][3].y, e);
                drawLine(this.en_current_joint[a][2].x, this.en_current_joint[a][2].y, this.en_current_joint[a][4].x, this.en_current_joint[a][4].y, e);
                drawLine(this.en_current_joint[a][3].x, this.en_current_joint[a][3].y, this.en_current_joint[a][4].x, this.en_current_joint[a][4].y, e);
                frameRectCentered(srFloor(this.en_current_joint[a][1].x), srFloor(this.en_current_joint[a][1].y), srFloor(6 * h) + 1, srFloor(6 * h) + 1, e);
                drawFromImageCentered(EnemyHeadImage, srFloor(this.en_current_joint[a][0].x), srFloor(this.en_current_joint[a][0].y), srFloor(16 * h), srFloor(16 * h), 16 * c, 0, 16, 16, d);
                break;
            case 8:
                frameRectCentered(srFloor(this.en_current_joint[a][2].x) + srFloor(1 * h), srFloor(this.en_current_joint[a][2].y - 2 * h), srFloor(8 * h) + 1, srFloor(4 * h) + 1, e);
                frameRectCentered(srFloor(this.en_current_joint[a][1].x), srFloor(this.en_current_joint[a][1].y - 2 * h), srFloor(4 * h) + 1, srFloor(4 * h) + 1, e);
                drawFromImageCentered(EnemyHeadImage, srFloor(this.en_current_joint[a][0].x), srFloor(this.en_current_joint[a][0].y), srFloor(16 * h), srFloor(16 * h), 16 * c, 0, 16, 16, d);
                break;
            case 9:
            case 13:
                filledRectCentered(srFloor(this.en_current_joint[a][5].x), srFloor(this.en_current_joint[a][5].y), srFloor(2 * h), srFloor(2 * h), d);
                drawFromImageCentered(EnemyHeadImage, srFloor(this.en_current_joint[a][4].x), srFloor(this.en_current_joint[a][4].y), srFloor(8 * h), srFloor(8 * h), 16 * c, 0, 16, 16, e);
                drawFromImageCentered(EnemyHeadImage, srFloor(this.en_current_joint[a][3].x), srFloor(this.en_current_joint[a][3].y), srFloor(10 * h), srFloor(10 * h), 16 * c, 0, 16, 16, e);
                drawFromImageCentered(EnemyHeadImage, srFloor(this.en_current_joint[a][2].x), srFloor(this.en_current_joint[a][2].y), srFloor(12 * h), srFloor(12 * h), 16 * c, 0, 16, 16, e);
                drawFromImageCentered(EnemyHeadImage, srFloor(this.en_current_joint[a][1].x), srFloor(this.en_current_joint[a][1].y), srFloor(14 * h), srFloor(14 * h), 16 * c, 0, 16, 16, e);
                drawFromImageCentered(EnemyHeadImage, srFloor(this.en_current_joint[a][0].x), srFloor(this.en_current_joint[a][0].y), srFloor(16 * h), srFloor(16 * h), 16 * c, 0, 16, 16, d);
                break;
            case 10:
                drawLine(this.en_current_joint[a][1].x, this.en_current_joint[a][1].y, this.en_current_joint[a][2].x, this.en_current_joint[a][2].y, e);
                if (3 > this.en_state[a]) {
                    drawLine(this.en_current_joint[a][0].x, this.en_current_joint[a][0].y, this.en_current_joint[a][1].x, this.en_current_joint[a][1].y, e);
                    drawLine(this.en_current_joint[a][0].x, this.en_current_joint[a][0].y, this.en_current_joint[a][3].x, this.en_current_joint[a][3].y, e);
                }
                drawLine(this.en_current_joint[a][1].x, this.en_current_joint[a][1].y, this.en_current_joint[a][2].x, this.en_current_joint[a][2].y, e);
                drawLine(this.en_current_joint[a][3].x, this.en_current_joint[a][3].y, this.en_current_joint[a][4].x, this.en_current_joint[a][4].y, e);
                if (3 > this.en_state[a]) {
                    drawLine(this.en_current_joint[a][0].x, this.en_current_joint[a][0].y, this.en_current_joint[a][5].x, this.en_current_joint[a][5].y, e);
                    drawLine(this.en_current_joint[a][0].x, this.en_current_joint[a][0].y, this.en_current_joint[a][7].x, this.en_current_joint[a][7].y, e);
                }
                drawLine(this.en_current_joint[a][5].x, this.en_current_joint[a][5].y, this.en_current_joint[a][6].x, this.en_current_joint[a][6].y, e);
                drawLine(this.en_current_joint[a][7].x, this.en_current_joint[a][7].y, this.en_current_joint[a][8].x, this.en_current_joint[a][8].y, e);
                drawFromImageCentered(EnemyHeadImage, srFloor(this.en_current_joint[a][0].x), srFloor(this.en_current_joint[a][0].y), srFloor(16 * h), srFloor(16 * h), 16 * c, 0, 16, 16, d);
                break;
            case 11:
                frameRectCentered(srFloor(this.en_current_joint[a][3].x), srFloor(this.en_current_joint[a][3].y - 7 * h), srFloor(4 * h) + 1, srFloor(14 * h) + 1, e);
                frameRectCentered(srFloor(this.en_current_joint[a][2].x) + 0, srFloor(this.en_current_joint[a][2].y), srFloor(4 * h) + 1, srFloor(9 * h) + 1, e);
                frameRectCentered(srFloor(this.en_current_joint[a][1].x) + 1, srFloor(this.en_current_joint[a][1].y), srFloor(4 * h) + 1, srFloor(8 * h) + 1, e);
                drawFromImageCentered(EnemyHeadImage, srFloor(this.en_current_joint[a][0].x) + 1, srFloor(this.en_current_joint[a][0].y), srFloor(16 * h), srFloor(16 * h), 16 * c, 0, 16, 16, d);
                break;
            case 14:
                drawLine(this.en_current_joint[a][1].x, this.en_current_joint[a][1].y, this.en_current_joint[a][2].x, this.en_current_joint[a][2].y, e);
                drawLine(this.en_current_joint[a][2].x, this.en_current_joint[a][2].y, this.en_current_joint[a][3].x, this.en_current_joint[a][3].y, e);
                drawLine(this.en_current_joint[a][3].x, this.en_current_joint[a][3].y, this.en_current_joint[a][1].x, this.en_current_joint[a][1].y, e);
                drawFromImageCentered(EnemyHeadImage, srFloor(this.en_current_joint[a][0].x), srFloor(this.en_current_joint[a][0].y), srFloor(16 * h), srFloor(16 * h), 16 * c, 0, 16, 16, d);
                break;
            case 15:
                drawLine(this.en_current_joint[a][0].x, this.en_current_joint[a][0].y, this.en_current_joint[a][1].x, this.en_current_joint[a][1].y, e);
                drawLine(this.en_current_joint[a][0].x, this.en_current_joint[a][0].y, this.en_current_joint[a][2].x, this.en_current_joint[a][2].y, e);
                drawLine(this.en_current_joint[a][1].x, this.en_current_joint[a][1].y, this.en_current_joint[a][2].x, this.en_current_joint[a][2].y, e);
                if (2 > this.en_state[a]) {
                    drawFromImageCentered(EnemyHeadImage, srFloor(this.en_current_joint[a][0].x), srFloor(this.en_current_joint[a][0].y), srFloor(16 * h), srFloor(16 * h), 16 * c, 0, 16, 16, d);
                } else {
                    drawFromImageCentered(EnemyHeadImage, srFloor(this.en_current_joint[a][3].x), srFloor(this.en_current_joint[a][3].y), srFloor(16 * h), srFloor(16 * h), 16 * c, 0, 16, 16, d);
                }
                break;
            case 16:
                if (2 > this.en_state[a]) {
                    for (b = 1; 4 > b; b++) {
                        drawLine(this.en_current_joint[a][0].x, this.en_current_joint[a][0].y, this.en_current_joint[a][b].x, this.en_current_joint[a][b].y, e);
                    }
                }
                for (b = 4; 10 > b; b++) {
                    drawLine(this.en_current_joint[a][b - 3].x, this.en_current_joint[a][b - 3].y, this.en_current_joint[a][b].x, this.en_current_joint[a][b].y, e);
                }
                if (2 > this.en_state[a]) {
                    for (b = 7; 10 > b; b++) {
                        filledRectCentered(srFloor(this.en_current_joint[a][b].x), srFloor(this.en_current_joint[a][b].y), srFloor(2 * g), srFloor(2 * g), d);
                    }
                } else {
                    for (b = 7; 10 > b; b++) {
                        filledRectCentered(srFloor(this.en_current_joint[a][b].x) + 1, srFloor(this.en_current_joint[a][b].y) + 1, srFloor(2 * h), srFloor(2 * h), d);
                    }
                }
                if (2 > this.en_state[a]) {
                    drawFromImageCentered(EnemyHeadImage, srFloor(this.en_current_joint[a][0].x), srFloor(this.en_current_joint[a][0].y), srFloor(16 * g), srFloor(16 * g), 16 * c, 0, 16, 16, d);
                } else {
                    drawFromImageCentered(EnemyHeadImage, srFloor(this.en_current_joint[a][0].x), srFloor(this.en_current_joint[a][0].y), srFloor(16 * h), srFloor(16 * h), 16 * c, 0, 16, 16, d);
                }
                break;
            case 17:
                if (10 > this.en_state[a]) {
                    for (b = this.en_state[a] - 1; 0 < b; b--) {
                        filledRectCentered(srFloor(this.en_current_joint[a][b].x), srFloor(this.en_current_joint[a][b].y - 2 * g), srFloor(4 * g), srFloor(4 * g), e);
                    }
                    drawFromImageCentered(EnemyHeadImage, srFloor(this.en_current_joint[a][0].x), srFloor(this.en_current_joint[a][0].y), srFloor(16 * g), srFloor(16 * g), 16 * c, 0, 16, 16, d)
                } else {
                    for (b = this.en_state[a] - 11; 0 < b; b--) {
                        frameRectCentered(srFloor(this.en_current_joint[a][b].x), srFloor(this.en_current_joint[a][b].y - 2 * h), srFloor(4 * h) + 1, srFloor(4 * h) + 1, e);
                    }
                    drawFromImageCentered(EnemyHeadImage, srFloor(this.en_current_joint[a][0].x), srFloor(this.en_current_joint[a][0].y), srFloor(16 * h), srFloor(16 * h), 16 * c, 0, 16, 16, d)
                }
        }
        if (0 < (PartyShowLpBar & 2) && 0 < this.en_hp[a]) {
            filledRect(srFloor(this.en_current_joint[a][0].x) - 6 * g, srFloor(this.en_current_joint[a][0].y) - 10 * g, 12 * g, 1, 10027008);
            filledRect(srFloor(this.en_current_joint[a][0].x) - 6 * g, srFloor(this.en_current_joint[a][0].y) - 10 * g, srFloor(12 * g * this.en_hp[a] / ENEMY_DATA[this.en_id[a]][ENEMY_LP]), 1, 52224)
        }
    }
};

/*
敵のアイコンを描く
*/
function EnDrawIcon(a, b, c, d) {
    var e = ENEMY_DATA[a][2];
    var g = ENEMY_DATA[a][4];
    var h = ENEMY_DATA[a][5];
    var q = srClampA(ENEMY_DATA[a][ENEMY_SIZE], 1, 4);
    if (1 == d) {
        q = 1;
    }
    d = q;
    var m = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    var l = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    switch (ENEMY_DATA[a][ENEMY_TYPE]) {
        case 0:
            m[0] = b + 0 * d;
            l[0] = c - 7 * d;
            m[1] = b - 5.5 * d;
            l[1] = c - 0 * d;
            m[2] = b + 6 * d;
            l[2] = c - 0 * d;
            break;
        case 1:
            m[0] = b - 3 * d;
            l[0] = c - 8 * d;
            m[1] = b + 1 * d;
            l[1] = c - 7 * d;
            m[2] = b + 4 * d;
            l[2] = c - 1 * d;
            break;
        case 2:
            m[0] = b + 0 * d;
            l[0] = c - 8 * d;
            m[1] = b - 4 * d;
            l[1] = c - 8 * d;
            m[2] = b - 9 * d;
            l[2] = c - 9 * d;
            m[3] = b - 7 * d;
            l[3] = c - 4 * d;
            m[4] = b + 3 * d;
            l[4] = c - 8 * d;
            m[5] = b + 9 * d;
            l[5] = c - 10 * d;
            m[6] = b + 7 * d;
            l[6] = c - 4 * d;
            break;
        case 3:
            m[0] = b - 3 * d;
            l[0] = c - 10 * d;
            m[1] = b + 1 * d;
            l[1] = c - 10 * d;
            m[2] = b + 4 * d;
            l[2] = c - 8 * d;
            m[3] = b + 5 * d;
            l[3] = c - 6 * d;
            m[4] = b + 5 * d;
            l[4] = c - 4 * d;
            m[5] = b + 3 * d;
            l[5] = c - 1 * d;
            break;
        case 4:
            m[0] = b + 0 * d;
            l[0] = c - 15 * d;
            m[1] = b + 0 * d;
            l[1] = c - 10 * d;
            m[2] = b + 0 * d;
            l[2] = c - 7 * d;
            m[3] = b - 2 * d;
            l[3] = c - 8 * d;
            m[4] = b + 3 * d;
            l[4] = c - 11 * d;
            m[5] = b - 5 * d;
            l[5] = c - 7 * d;
            m[6] = b + 5 * d;
            l[6] = c - 8 * d;
            m[7] = b - 3 * d;
            l[7] = c - 3 * d;
            m[8] = b + 3 * d;
            l[8] = c - 5 * d;
            m[9] = b - 1 * d;
            l[9] = c - 1 * d;
            m[10] = b + 2 * d;
            l[10] = c - 0 * d;
            break;
        case 5:
            m[0] = b + 0 * d;
            l[0] = c - 20 * d;
            m[1] = b + 0 * d;
            l[1] = c - 12 * d;
            m[2] = b - 1 * d;
            l[2] = c - 6 * d;
            m[3] = b + 0 * d;
            l[3] = c - 0 * d;
            break;
        case 18:
            d = srClampA(d, 1, 2);
            m[0] = b + 0 * d;
            l[0] = c + 20 * d - 40;
            m[1] = b + 0 * d;
            l[1] = c + 12 * d - 40;
            m[2] = b - 1 * d;
            l[2] = c + 6 * d - 40;
            m[3] = b + 0 * d;
            l[3] = c + 0 * d - 40;
            break;
        case 6:
            m[0] = b + 0 * d;
            l[0] = c - 10 * d;
            m[1] = b - 7 * d;
            l[1] = c - 19 * d;
            m[2] = b + 5 * d;
            l[2] = c - 21 * d;
            m[3] = b + 12 * d;
            l[3] = c - 12 * d;
            m[4] = b + 7 * d;
            l[4] = c - 2 * d;
            m[5] = b - 5 * d;
            l[5] = c - 0 * d;
            m[6] = b - 12 * d;
            l[6] = c - 10 * d;
            break;
        case 7:
            m[0] = b - 5 * d;
            l[0] = c - 13 * d;
            m[1] = b + 0 * d;
            l[1] = c - 9 * d;
            m[2] = b + 5 * d;
            l[2] = c - 6 * d;
            m[3] = b + 8 * d;
            l[3] = c - 11 * d;
            m[4] = b + 10 * d;
            l[4] = c - 3 * d;
            break;
        case 8:
            m[0] = b + 0 * d;
            l[0] = c - 12 * d;
            m[1] = b + 0 * d;
            l[1] = c - 5 * d;
            m[2] = b + 0 * d;
            l[2] = c - 0 * d;
            break;
        case 9:
        case 13:
            m[0] = b - 4 * d;
            l[0] = c - 20 * d;
            m[1] = b + 2 * d;
            l[1] = c - 16 * d;
            m[2] = b + 4 * d;
            l[2] = c - 11 * d;
            m[3] = b + 2 * d;
            l[3] = c - 6 * d;
            m[4] = b - 1 * d;
            l[4] = c - 3 * d;
            m[5] = b - 5 * d;
            l[5] = c - 2 * d;
            break;
        case 10:
            m[0] = b + 0 * d;
            l[0] = c - 6 * d;
            m[1] = b - 9 * d;
            l[1] = c - 9 * d;
            m[2] = b - 7 * d;
            l[2] = c - 0 * d;
            m[3] = b + 9 * d;
            l[3] = c - 9 * d;
            m[4] = b + 7 * d;
            l[4] = c - 0 * d;
            m[5] = b - 7 * d;
            l[5] = c - 5 * d;
            m[6] = b - 5 * d;
            l[6] = c - 0 * d;
            m[7] = b + 7 * d;
            l[7] = c - 5 * d;
            m[8] = b + 5 * d;
            l[8] = c - 0 * d;
            break;
        case 11:
            m[0] = b + 0 * d;
            l[0] = c - 19 * d;
            m[1] = b - 8 * d;
            l[1] = c - 13 * d;
            m[2] = b + 8 * d;
            l[2] = c - 18 * d;
            m[3] = b + 0 * d;
            l[3] = c - 0 * d;
            break;
        case 12:
            m[0] = b + 0 * d;
            l[0] = c - 16 * d;
            m[1] = b + 0 * d;
            l[1] = c - 10 * d;
            m[2] = b + 2 * d;
            l[2] = c - 7 * d;
            m[3] = b - 2 * d;
            l[3] = c - 8 * d;
            m[4] = b - 3 * d;
            l[4] = c - 11 * d;
            m[5] = b - 5 * d;
            l[5] = c - 7 * d;
            m[6] = b - 8 * d;
            l[6] = c - 10 * d;
            m[7] = b - 1 * d;
            l[7] = c - 4 * d;
            m[8] = b + 2 * d;
            l[8] = c - 5 * d;
            m[9] = b - 0 * d;
            l[9] = c - 1 * d;
            m[10] = b + 4 * d;
            l[10] = c - 0 * d;
            break;
        case 14:
            m[0] = b + 0 * d;
            l[0] = c - 8 * d;
            m[1] = b - 0 * d;
            l[1] = c - 14 * d;
            m[2] = b - 8 * d;
            l[2] = c - 16 * d;
            m[3] = b + 8 * d;
            l[3] = c - 16 * d;
            break;
        case 15:
            m[0] = b - 1 * d;
            l[0] = c - 12 * d;
            m[1] = b - 3 * d;
            l[1] = c - 0 * d;
            m[2] = b + 3 * d;
            l[2] = c - 0 * d;
            break;
        case 16:
            m[0] = b - 0 * d;
            l[0] = c - 10 * d;
            m[1] = b - 3 * d;
            l[1] = c - 11 * d;
            m[4] = b - 6 * d;
            l[4] = c - 12 * d;
            m[7] = b - 9 * d;
            l[7] = c - 13 * d;
            m[2] = b + 3 * d;
            l[2] = c - 11 * d;
            m[5] = b + 6 * d;
            l[5] = c - 12 * d;
            m[8] = b + 8 * d;
            l[8] = c - 14 * d;
            m[3] = b + 1 * d;
            l[3] = c - 7 * d;
            m[6] = b + 2 * d;
            l[6] = c - 4 * d;
            m[9] = b + 1 * d;
            l[9] = c - 1 * d;
            break;
        case 17:
            m[0] = b + 2 * d;
            l[0] = c - 16 * d;
            m[1] = b + 2 * d;
            l[1] = c - 6 * d;
            m[2] = b - 3 * d;
            l[2] = c - 5 * d;
            m[3] = b - 2 * d;
            l[3] = c - 0 * d;
    }
    switch (ENEMY_DATA[a][ENEMY_TYPE]) {
        case 0:
            frameRectCentered(srFloor(m[1] - .5), srFloor(l[1]) - 2 * q, srFloor(4 * d) + 1, srFloor(4 * d) + 1, h);
            frameRectCentered(srFloor(m[2] - .5), srFloor(l[2]) - 2 * q, srFloor(4 * d) + 1, srFloor(4 * d) + 1, h);
            drawFromImageCentered(EnemyHeadImage, srFloor(m[0]), srFloor(l[0]), srFloor(16 * d), srFloor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 1:
            drawFromImageCentered(EnemyHeadImage, srFloor(m[2]), srFloor(l[2] - 2 * d), srFloor(8 * d), srFloor(8 * d), 16 * e, 0, 16, 16, h);
            drawFromImageCentered(EnemyHeadImage, srFloor(m[1]), srFloor(l[1] - 3 * d), srFloor(12 * d), srFloor(12 * d), 16 * e, 0, 16, 16, h);
            drawFromImageCentered(EnemyHeadImage, srFloor(m[0]), srFloor(l[0] - 4 * d), srFloor(16 * d), srFloor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 2:
            drawLine(m[1], l[1], m[2], l[2], h);
            drawLine(m[2], l[2], m[3], l[3], h);
            drawLine(m[3], l[3], m[1], l[1], h);
            drawLine(m[4], l[4], m[5], l[5], h);
            drawLine(m[5], l[5], m[6], l[6], h);
            drawLine(m[6], l[6], m[4], l[4], h);
            drawFromImageCentered(EnemyHeadImage, srFloor(m[0]), srFloor(l[0]), srFloor(16 * d), srFloor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 3:
            drawLine(m[0], l[0], m[1], l[1], h);
            drawLine(m[4], l[4], m[5], l[5], h);
            drawLine(m[1], l[1], m[2], l[2], h);
            drawLine(m[2], l[2], m[3], l[3], h);
            drawLine(m[3], l[3], m[4], l[4], h);
            filledRectCentered(srFloor(m[5]), srFloor(l[5]), srFloor(2 * d), srFloor(2 * d), g);
            drawFromImageCentered(EnemyHeadImage, srFloor(m[0]), srFloor(l[0]), srFloor(16 * d), srFloor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 4:
        case 12:
            drawLine(m[1], l[1], m[2], l[2], h);
            drawLine(m[1], l[1], m[3], l[3], h);
            drawLine(m[1], l[1], m[4], l[4], h);
            drawLine(m[3], l[3], m[5], l[5], h);
            drawLine(m[4], l[4], m[6], l[6], h);
            drawLine(m[2], l[2], m[7], l[7], h);
            drawLine(m[2], l[2], m[8], l[8], h);
            drawLine(m[7], l[7], m[9], l[9], h);
            drawLine(m[8], l[8], m[10], l[10], h);
            drawFromImageCentered(EnemyHeadImage, srFloor(m[0]), srFloor(l[0]), srFloor(16 * d), srFloor(16 * d), 16 * e, 0, 16, 16, g);
            if (332 == a) {
                drawFromImageCentered(EnemyHeadImage, srFloor(m[0]), srFloor(l[0] - 3 * d), srFloor(16 * d), srFloor(16 * d), 352, 0, 16, 16, 16766720);
            }
            break;
        case 5:
            for (a = 3; 0 < a; a--) {
                frameRectCentered(srFloor(m[a]), srFloor(l[a] - 2 * d), srFloor(4 * d) + 1, srFloor(4 * d) + 1, h);
            }
            drawFromImageCentered(EnemyHeadImage, srFloor(m[0]), srFloor(l[0]), srFloor(16 * d), srFloor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 18:
            d = srClampA(d, 1, 2);
            for (a = 3; 0 < a; a--) {
                frameRectCentered(srFloor(m[a]), srFloor(l[a] + 2 * d), srFloor(4 * d) + 1, srFloor(4 * d) + 1, h);
            }
            drawFromImageCentered(EnemyHeadImage, srFloor(m[0]), srFloor(l[0]), srFloor(16 * d), srFloor(16 * d), 16 * e, 15, 16, -16, g);
            break;
        case 6:
            for (a = 1; 6 > a; a++) {
                drawLine(m[a], l[a], m[a + 1], l[a + 1], h);
            }
            drawLine(m[a], l[a], m[1], l[1], h);
            drawFromImageCentered(EnemyHeadImage, srFloor(m[0]), srFloor(l[0]), srFloor(16 * d), srFloor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 7:
            drawLine(m[2], l[2], m[3], l[3], h);
            drawLine(m[2], l[2], m[4], l[4], h);
            drawLine(m[3], l[3], m[4], l[4], h);
            frameRectCentered(srFloor(m[1]), srFloor(l[1]), srFloor(6 * d) + 1, srFloor(6 * d) + 1, h);
            drawFromImageCentered(EnemyHeadImage, srFloor(m[0]), srFloor(l[0]), srFloor(16 * d), srFloor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 8:
            frameRectCentered(srFloor(m[2]) + srFloor(1 * d), srFloor(l[2] - 2 * d), srFloor(8 * d) + 1, srFloor(4 * d) + 1, h);
            frameRectCentered(srFloor(m[1]), srFloor(l[1] - 2 * d), srFloor(4 * d) + 1, srFloor(4 * d) + 1, h);
            drawFromImageCentered(EnemyHeadImage, srFloor(m[0]), srFloor(l[0]), srFloor(16 * d), srFloor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 9:
        case 13:
            filledRectCentered(srFloor(m[5]), srFloor(l[5]), srFloor(2 * d), srFloor(2 * d), g);
            drawFromImageCentered(EnemyHeadImage, srFloor(m[4]), srFloor(l[4]), srFloor(8 * d), srFloor(8 * d), 16 * e, 0, 16, 16, h);
            drawFromImageCentered(EnemyHeadImage, srFloor(m[3]), srFloor(l[3]), srFloor(10 * d), srFloor(10 * d), 16 * e, 0, 16, 16, h);
            drawFromImageCentered(EnemyHeadImage, srFloor(m[2]), srFloor(l[2]), srFloor(12 * d), srFloor(12 * d), 16 * e, 0, 16, 16, h);
            drawFromImageCentered(EnemyHeadImage, srFloor(m[1]), srFloor(l[1]), srFloor(14 * d), srFloor(14 * d), 16 * e, 0, 16, 16, h);
            drawFromImageCentered(EnemyHeadImage, srFloor(m[0]), srFloor(l[0]), srFloor(16 * d), srFloor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 10:
            drawLine(srFloor(m[0]), srFloor(l[0]), srFloor(m[1]), srFloor(l[1]), h);
            drawLine(srFloor(m[0]), srFloor(l[0]), srFloor(m[3]), srFloor(l[3]), h);
            drawLine(srFloor(m[1]), srFloor(l[1]), srFloor(m[2]), srFloor(l[2]), h);
            drawLine(srFloor(m[3]), srFloor(l[3]), srFloor(m[4]), srFloor(l[4]), h);
            drawLine(srFloor(m[0]), srFloor(l[0]), srFloor(m[5]), srFloor(l[5]), h);
            drawLine(srFloor(m[0]), srFloor(l[0]), srFloor(m[7]), srFloor(l[7]), h);
            drawLine(srFloor(m[5]), srFloor(l[5]), srFloor(m[6]), srFloor(l[6]), h);
            drawLine(srFloor(m[7]), srFloor(l[7]), srFloor(m[8]), srFloor(l[8]), h);
            drawFromImageCentered(EnemyHeadImage, srFloor(m[0]), srFloor(l[0]), srFloor(16 * d), srFloor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 11:
            frameRectCentered(srFloor(m[3]), srFloor(l[3] - 7 * d), srFloor(4 * d) + 1, srFloor(14 * d) + 1, h);
            frameRectCentered(srFloor(m[2]) + 0, srFloor(l[2]), srFloor(4 * d) + 1, srFloor(9 * d) + 1, h);
            frameRectCentered(srFloor(m[1]) + 1, srFloor(l[1]), srFloor(4 * d) + 1, srFloor(8 * d) + 1, h);
            drawFromImageCentered(EnemyHeadImage, srFloor(m[0]) + 1, srFloor(l[0]), srFloor(16 * d), srFloor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 14:
            drawLine(srFloor(m[1]), srFloor(l[1]), srFloor(m[2]), srFloor(l[2]), h);
            drawLine(srFloor(m[1]), srFloor(l[1]), srFloor(m[3]), srFloor(l[3]), h);
            drawLine(srFloor(m[2]), srFloor(l[2]), srFloor(m[3]), srFloor(l[3]), h);
            drawFromImageCentered(EnemyHeadImage, srFloor(m[0]), srFloor(l[0]), srFloor(16 * d), srFloor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 15:
            drawLine(srFloor(m[0]), srFloor(l[0]), srFloor(m[1]), srFloor(l[1]), h);
            drawLine(srFloor(m[0]), srFloor(l[0]), srFloor(m[2]), srFloor(l[2]), h);
            drawLine(srFloor(m[1]), srFloor(l[1]), srFloor(m[2]), srFloor(l[2]), h);
            drawFromImageCentered(EnemyHeadImage, srFloor(m[0]), srFloor(l[0]), srFloor(16 * d), srFloor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 16:
            for (a = 1; 4 > a; a++) {
                drawLine(srFloor(m[0]), srFloor(l[0]), srFloor(m[a]), srFloor(l[a]), h);
            }
            for (a = 4; 10 > a; a++) {
                drawLine(srFloor(m[a - 3]), srFloor(l[a - 3]), srFloor(m[a]), srFloor(l[a]), h);
            }
            for (a = 7; 10 > a; a++) {
                filledRectCentered(srFloor(m[a]), srFloor(l[a]), srFloor(2 * d), srFloor(2 * d), g);
            }
            drawFromImageCentered(EnemyHeadImage, srFloor(m[0]), srFloor(l[0]), srFloor(16 * d), srFloor(16 * d), 16 * e, 0, 16, 16, g);
            break;
        case 17:
            for (a = 3; 0 < a; a--) {
                filledRectCentered(srFloor(m[a]), srFloor(l[a] - 2 * d), srFloor(4 * d), srFloor(4 * d), h);
            }
            drawFromImageCentered(EnemyHeadImage, srFloor(m[0]), srFloor(l[0]), srFloor(16 * d), srFloor(16 * d), 16 * e, 0, 16, 16, g)
    }
}

var StageCount = 90;
var StageOpenData = [
    3,//Town
    1,//Opening Street
    0, 0, 0, 0, 0, 0, 0,//Grassland
    0, 0,//Castle
    0, 0, 0,//Hill Country
    0,//Lake
    0, 0,//Forest
    0, 0, 0,//Cavern
    0,//Village
    0, 0, 0, 0,//Seaside
    0, 0, 0, 0, 0,//Submarine
    0, 0, 0,//Mist Grove
    0,//???
    0, 0, 0, 0, 0,//Desert
    0,//Oasis
    0, 0,//Desert
    0,//Pyramid
    0,//Desert
    0, 0, 0,//Beach
    0,//Resort
    0, 0, 0,//Cavern
    0, 0,//Snowfield
    0, 0, 0,//Mountain
    0, 0, 0, 0, 0, 0,//Snowfield
    0,//Frozen Lake
    0,//Ice Castle
    0,//Snowfield
    0,//Beach
    0, 0, 0, 0,//Forest
    0,//Forget Tree
    0,//!!!
    0, 0, 0, 0, 0,//Hell
    0,//Island
    0,//Hell
    0, 0, 0,//Inferno
    0,//Blood Lake
    0, 0,//Cavern
    0, 0, 0, 0,//Hell
    0//Volcano
];
var STAGE_UNLOCKED = 1;
var STAGE_BEATEN = 2;
var STAGE_BOOKED = 4;
var STAGE_BOOK_INDEX_DATA = [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 9, 10, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 0, 0, 0, 0, 0];
var STAGE_SHOP_REQUIREMENT = [1, 2, 3, 4, 5, 5, 6, 6, 7, 7, 9, 5, 6, 7, 1, 8, 8, 9, 9, 9, 1, 10, 11, 11, 12, 12, 13, 13, 14, 14, 12, 13, 14, 1, 15, 15, 15, 16, 16, 1, 17, 17, 18, 17, 18, 18, 18, 1, 19, 19, 19, 20, 20, 20, 21, 23, 20, 21, 21, 22, 22, 23, 22, 23, 24, 24, 24, 24, 24, 25, 1, 1, 24, 25, 26, 26, 26, 1, 27, 27, 28, 28, 1, 29, 30, 31, 32, 33, 1, 1];
var STAGE_NAME = "Town;Opening Street;Grassland 1;Grassland 2;Grassland 3;Grassland 4;Grassland 5;Grassland 6;Grassland 7;Castle Gate;Castle;Hill Country 1;Hill Country 2;Hill Country 3;Lake;Forest 1;Forest 2;Cavern 1;Cavern 2;Cavern 3;Village;Seaside 1;Seaside 2;Seaside 3;Seaside 4;Submarine 1;Submarine 2;Submarine 3;Submarine 4;Submarine Shrine;Mist Grove 1;Mist Grove 2;Mist Grove 3;???;Desert 1;Desert 2;Desert 3;Desert 4;Desert 5;Oasis;Desert 6;Desert 7;Pyramid;Desert 8;Beach 1;Beach 2;Beach 3;Resort;Cavern 4;Cavern 5;Cavern 6;Snowfield 1;Snowfield 2;Mountain 1;Mountain 2;Mountaintop;Snowfield 3;Snowfield 4;Snowfield 5;Snowfield 6;Snowfield 7;Snowfield 8;Frozen Lake;Ice Castle;Snowfield 9;Beach 4;Forest 3;Forest 4;Forest 5;Forest 6;Forget Tree;!!!;Hell 1;Hell 2;Hell 3;Hell 4;Hell 5;Island;Hell 6;Inferno 1;Inferno 2;Inferno 3;Blood Lake;Cavern 7;Cavern 8;Hell 7;Hell 8;Hell Gate;Hell Castle;Volcano".split(";");
var MAP_DATA = [
    [6, 28, 0, 1, 0],
    [10, 28, 0, 2, 0],
    [11, 24, 0, 3, 11],
    [10, 20, 0, 4, 5],
    [8, 16, 0, 6, 0],
    [12, 17, 0, 6, 14],
    [11, 12, 0, 7, 0],
    [15, 13, 0, 8, 0],
    [20, 13, 0, 9, 15],
    [24, 16, 0, 10, 0],
    [28, 16, 1, 21, 0],
    [15, 23, 0, 12, 0],
    [18, 20, 0, 13, 0],
    [22, 19, 0, 9, 0],
    [15, 17, 0, 0, 0],
    [20, 10, 0, 16, 0],
    [22, 7, 0, 17, 0],
    [22, 4, 1, 18, 0],
    [14, 3, 0, 19, 0],
    [6, 4, 1, 20, 0],
    [4, 7, 0, 0, 0],
    [33, 16, 0, 22, 30],
    [34, 12, 0, 23, 0],
    [37, 9, 0, 24, 0],
    [41, 10, 0, 25, 0],
    [42, 13, 0, 26, 28],
    [39, 16, 0, 27, 0],
    [43, 19, 0, 29, 0],
    [45, 14, 0, 29, 0],
    [48, 17, 2, 34, 0],
    [35, 20, 0, 31, 0],
    [38, 21, 0, 32, 0],
    [42, 24, 0, 33, 0],
    [46, 24, 0, 0, 0],
    [53, 17, 0, 35, 36],
    [57, 16, 0, 37, 0],
    [57, 20, 0, 38, 0],
    [60, 14, 0, 39, 0],
    [61, 19, 0, 39, 0],
    [63, 16, 1, 40, 41],
    [66, 14, 0, 42, 0],
    [66, 18, 0, 42, 43],
    [69, 16, 1, 48, 0],
    [70, 20, 0, 44, 0],
    [72, 24, 0, 45, 0],
    [76, 26, 0, 46, 0],
    [72, 30, 0, 47, 0],
    [65, 28, 0, 0, 0],
    [74, 14, 1, 49, 0],
    [78, 8, 0, 50, 0],
    [84, 10, 1, 51, 0],
    [87, 12, 0, 52, 56],
    [86, 16, 0, 53, 0],
    [81, 18, 0, 54, 0],
    [78, 14, 0, 55, 0],
    [79, 11, 0, 0, 0],
    [91, 11, 0, 57, 0],
    [93, 14, 0, 58, 59],
    [96, 16, 0, 62, 63],
    [94, 19, 0, 60, 0],
    [97, 21, 0, 61, 63],
    [96, 25, 0, 0, 0],
    [97, 13, 0, 0, 0],
    [101, 18, 1, 64, 65],
    [105, 16, 0, 72, 0],
    [106, 23, 0, 66, 0],
    [102, 28, 0, 67, 0],
    [110, 30, 0, 68, 0],
    [114, 29, 0, 69, 0],
    [115, 26, 0, 70, 0],
    [113, 22, 1, 71, 0],
    [109, 19, 0, 0, 0],
    [113, 16, 0, 73, 0],
    [117, 15, 0, 74, 0],
    [121, 18, 0, 75, 0],
    [126, 21, 0, 76, 79],
    [130, 18, 0, 77, 78],
    [126, 14, 0, 0, 0],
    [135, 17, 0, 83, 0],
    [125, 25, 0, 80, 0],
    [130, 27, 0, 81, 0],
    [135, 25, 0, 82, 0],
    [137, 21, 0, 0, 0],
    [136, 14, 1, 84, 0],
    [145, 12, 1, 85, 0],
    [143, 17, 0, 86, 0],
    [139, 15, 0, 87, 0],
    [140, 10, 0, 88, 0],
    [140, 7, 1, -1, 89],
    [130, 23, 1, 0, 0]
];
var TERRAIN_GROUND = 1;
var TERRAIN_GROUND_LEFT = 2;
var TERRAIN_GROUND_MIDDLE = 3;
var TERRAIN_GROUND_RIGHT = 4;
var TERRAIN_AIR_WATER = 5;
var TERRAIN_WATER = 6;
var TERRAIN_GROUND_LEFT_CLUMP = 7;
var TERRAIN_GROUND_MIDDLE_CLUMP = 8;
var TERRAIN_GROUND_RIGHT_CLUMP = 9;
var TERRAIN_AIR = 10;
var TERRAIN_CEILING = 11;
var TERRAIN_CEILING_LEFT = 12;
var TERRAIN_CEILING_MIDDLE = 13;
var TERRAIN_CEILING_RIGHT = 14;
var STAGE_DATA = [
    [
        [0, 0, TERRAIN_GROUND, 0, 0, TERRAIN_GROUND, 0, 0, TERRAIN_GROUND, 0, 0, TERRAIN_GROUND, 0, 0],
        [0, 100, TERRAIN_GROUND, 0]
    ],
    [
        [0, 1, TERRAIN_GROUND, 0, 5, TERRAIN_GROUND_MIDDLE, 1, 1],
        [0, 1, TERRAIN_GROUND, 0, 6, TERRAIN_GROUND_MIDDLE, 1, 3],
        [0, 1, TERRAIN_GROUND, 0, 6, TERRAIN_GROUND_LEFT, 1, 2, TERRAIN_GROUND_MIDDLE, 2, 1],
        [0, 1, TERRAIN_GROUND, 1, 5, TERRAIN_GROUND_MIDDLE, 2, 3],
        [0, 1, TERRAIN_GROUND, 2, 5, TERRAIN_GROUND_MIDDLE, 1, 2],
        [0, 1, TERRAIN_GROUND, 0, 20],
        [0, 1, TERRAIN_GROUND, 2, 8, TERRAIN_GROUND_MIDDLE, 3, 1],
        [0, 1, TERRAIN_GROUND, 2, 8, TERRAIN_GROUND_LEFT, 0, 3, TERRAIN_GROUND_MIDDLE, 3, 2],
        [0, 1, TERRAIN_GROUND, 2, 8, TERRAIN_GROUND_LEFT, 3, 1, TERRAIN_GROUND_MIDDLE, 3, 2, TERRAIN_GROUND_RIGHT, 3, 3],
        [0, 100, TERRAIN_GROUND_LEFT, 2, 2, TERRAIN_GROUND_MIDDLE, 3, 2, TERRAIN_GROUND_RIGHT, 4, 1]
    ],
    [
        [0, 2, TERRAIN_GROUND_LEFT, 5, 1, TERRAIN_GROUND_MIDDLE, 5, 2, TERRAIN_GROUND_RIGHT, 5, 3],
        [0, 2, TERRAIN_GROUND, 5, 6, TERRAIN_GROUND_MIDDLE, 6, 2],
        [0, 2, TERRAIN_GROUND_LEFT, 5, 6, TERRAIN_GROUND_MIDDLE, 6, 4],
        [0, 2, TERRAIN_GROUND_LEFT, 5, 12],
        [0, 2, TERRAIN_GROUND, 5, 6, TERRAIN_GROUND_LEFT, 6, 2, TERRAIN_GROUND_MIDDLE, 6, 2, TERRAIN_GROUND_RIGHT, 7, 1],
        [0, 2, TERRAIN_GROUND_LEFT, 6, 3, TERRAIN_GROUND_MIDDLE, 7, 2, TERRAIN_GROUND_RIGHT, 6, 3],
        [0, 2, TERRAIN_GROUND_LEFT, 7, 3, TERRAIN_GROUND_MIDDLE, 6, 4],
        [0, 100, TERRAIN_GROUND_LEFT, 5, 1, TERRAIN_GROUND_MIDDLE, 5, 6, TERRAIN_GROUND_RIGHT, 8, 12]
    ],
    [
        [0, 2, TERRAIN_GROUND, 9, 2, TERRAIN_GROUND_LEFT, 10, 1, TERRAIN_GROUND_MIDDLE, 10, 1, TERRAIN_GROUND_RIGHT, 10, 1],
        [0, 2, TERRAIN_GROUND, 9, 3, TERRAIN_GROUND_LEFT, 10, 1, TERRAIN_GROUND_MIDDLE, 10, 3, TERRAIN_GROUND_RIGHT, 10, 2],
        [0, 2, TERRAIN_GROUND_LEFT, 10, 1, TERRAIN_GROUND_MIDDLE, 10, 1, TERRAIN_GROUND_RIGHT, 9, 5],
        [0, 2, TERRAIN_GROUND, 9, 3, TERRAIN_GROUND_LEFT, 10, 2, TERRAIN_GROUND_MIDDLE, 10, 3, TERRAIN_GROUND_RIGHT, 11, 2],
        [0, 2, TERRAIN_GROUND, 11, 3, TERRAIN_GROUND_LEFT, 10, 3, TERRAIN_GROUND_MIDDLE, 10, 3, TERRAIN_GROUND_RIGHT, 10, 3],
        [0, 2, TERRAIN_GROUND, 10, 8, TERRAIN_GROUND_LEFT, 10, 4, TERRAIN_GROUND_MIDDLE, 9, 3, TERRAIN_GROUND_RIGHT, 12, 1],
        [0, 2, TERRAIN_GROUND, 10, 8, TERRAIN_GROUND_LEFT, 9, 3, TERRAIN_GROUND_MIDDLE, 12, 1, TERRAIN_GROUND_RIGHT, 11, 5],
        [0, 2, TERRAIN_GROUND, 9, 5, TERRAIN_GROUND_LEFT, 10, 3, TERRAIN_GROUND_MIDDLE, 12, 3, TERRAIN_GROUND_RIGHT, 11, 3],
        [0, 100, TERRAIN_GROUND_LEFT, 12, 2, TERRAIN_GROUND_MIDDLE, 13, 1, TERRAIN_GROUND_RIGHT, 11, 2]
    ],
    [
        [0, 2, TERRAIN_GROUND, 15, 3, TERRAIN_GROUND_MIDDLE, 14, 1, TERRAIN_GROUND_RIGHT, 14, 1],
        [0, 2, TERRAIN_GROUND, 15, 3, TERRAIN_GROUND_LEFT, 16, 1, TERRAIN_GROUND_MIDDLE, 14, 1, TERRAIN_GROUND_RIGHT, 14, 1],
        [0, 2, TERRAIN_GROUND_LEFT, 15, 3, TERRAIN_GROUND_MIDDLE, 16, 3, TERRAIN_GROUND_RIGHT, 14, 3],
        [0, 2, TERRAIN_GROUND, 16, 6, TERRAIN_GROUND_LEFT, 14, 1, TERRAIN_GROUND_MIDDLE, 14, 1, TERRAIN_GROUND_RIGHT, 14, 1],
        [0, 2, TERRAIN_GROUND, 15, 9, TERRAIN_GROUND_RIGHT, 17, 1],
        [0, 2, TERRAIN_GROUND, 17, 1, TERRAIN_GROUND_LEFT, 15, 6, TERRAIN_GROUND_MIDDLE, 16, 3, TERRAIN_GROUND_RIGHT, 14, 3],
        [0, 2, TERRAIN_GROUND, 17, 2, TERRAIN_GROUND_LEFT, 14, 3, TERRAIN_GROUND_MIDDLE, 14, 3, TERRAIN_GROUND_RIGHT, 14, 3],
        [0, 2, TERRAIN_GROUND, 17, 3, TERRAIN_GROUND_LEFT, 15, 6, TERRAIN_GROUND_MIDDLE, 16, 3, TERRAIN_GROUND_RIGHT, 16, 3],
        [0, 100, TERRAIN_GROUND_LEFT, 15, 3, TERRAIN_GROUND_MIDDLE, 18, 1, TERRAIN_GROUND_RIGHT, 15, 3]
    ],
    [
        [0, 2, TERRAIN_GROUND, 19, 5],
        [0, 2, TERRAIN_GROUND, 19, 10],
        [0, 2, TERRAIN_GROUND, 19, 15],
        [0, 2, TERRAIN_GROUND_LEFT, 19, 5, TERRAIN_GROUND_MIDDLE, 19, 5, TERRAIN_GROUND_RIGHT, 21, 1],
        [0, 2, TERRAIN_GROUND, 19, 10, TERRAIN_GROUND_MIDDLE, 20, 3],
        [0, 2, TERRAIN_GROUND, 19, 10, TERRAIN_GROUND_LEFT, 21, 1, TERRAIN_GROUND_MIDDLE, 20, 2, TERRAIN_GROUND_RIGHT, 21, 1],
        [0, 2, TERRAIN_GROUND, 19, 5, TERRAIN_GROUND_LEFT, 19, 3, TERRAIN_GROUND_MIDDLE, 20, 3, TERRAIN_GROUND_RIGHT, 21, 3],
        [0, 100, TERRAIN_GROUND_LEFT, 19, 2, TERRAIN_GROUND_MIDDLE, 19, 6, TERRAIN_GROUND_RIGHT, 22, 12]
    ],
    [
        [0, 2, TERRAIN_GROUND, 23, 6],
        [0, 2, TERRAIN_GROUND, 23, 8, TERRAIN_GROUND_MIDDLE, 24, 3],
        [0, 2, TERRAIN_GROUND, 24, 6, TERRAIN_GROUND_LEFT, 23, 2, TERRAIN_GROUND_MIDDLE, 23, 2, TERRAIN_GROUND_RIGHT, 23, 2],
        [0, 2, TERRAIN_GROUND_MIDDLE, 24, 6, TERRAIN_GROUND_RIGHT, 23, 6],
        [0, 2, TERRAIN_GROUND, 23, 9, TERRAIN_GROUND_MIDDLE, 25, 1],
        [0, 2, TERRAIN_GROUND, 23, 9, TERRAIN_GROUND_LEFT, 25, 1, TERRAIN_GROUND_MIDDLE, 25, 1, TERRAIN_GROUND_RIGHT, 25, 1],
        [0, 2, TERRAIN_GROUND, 23, 12, TERRAIN_GROUND_LEFT, 24, 3, TERRAIN_GROUND_MIDDLE, 25, 2, TERRAIN_GROUND_RIGHT, 25, 2],
        [0, 2, TERRAIN_GROUND, 25, 6, TERRAIN_GROUND_LEFT, 24, 3, TERRAIN_GROUND_MIDDLE, 24, 3, TERRAIN_GROUND_RIGHT, 24, 3],
        [0, 100, TERRAIN_GROUND, 26, 3, TERRAIN_GROUND_LEFT, 23, 3, TERRAIN_GROUND_MIDDLE, 25, 3, TERRAIN_GROUND_RIGHT, 24, 3]
    ],
    [
        [0, 2, TERRAIN_GROUND_MIDDLE, 27, 5, TERRAIN_GROUND_RIGHT, 28, 1],
        [0, 2, TERRAIN_GROUND, 27, 5, TERRAIN_GROUND_LEFT, 28, 1, TERRAIN_GROUND_MIDDLE, 28, 1, TERRAIN_GROUND_RIGHT, 28, 1],
        [0, 2, TERRAIN_GROUND, 27, 5, TERRAIN_GROUND_LEFT, 29, 1, TERRAIN_GROUND_MIDDLE, 29, 1, TERRAIN_GROUND_RIGHT, 29, 1],
        [0, 2, TERRAIN_GROUND, 28, 5, TERRAIN_GROUND_LEFT, 29, 1, TERRAIN_GROUND_MIDDLE, 29, 1, TERRAIN_GROUND_RIGHT, 29, 1],
        [0, 2, TERRAIN_GROUND_LEFT, 27, 5, TERRAIN_GROUND_MIDDLE, 28, 3, TERRAIN_GROUND_RIGHT, 29, 2],
        [0, 2, TERRAIN_GROUND, 27, 9, TERRAIN_GROUND_MIDDLE, 27, 9],
        [0, 2, TERRAIN_GROUND, 28, 5, TERRAIN_GROUND_MIDDLE, 29, 5],
        [0, 100, TERRAIN_GROUND, 28, 5, TERRAIN_GROUND_LEFT, 29, 2, TERRAIN_GROUND_MIDDLE, 30, 1, TERRAIN_GROUND_RIGHT, 29, 2]
    ],
    [
        [0, 2, TERRAIN_GROUND_MIDDLE, 32, 1, TERRAIN_GROUND_RIGHT, 32, 2],
        [0, 2, TERRAIN_GROUND, 31, 3, TERRAIN_GROUND_LEFT, 32, 1, TERRAIN_GROUND_MIDDLE, 32, 2, TERRAIN_GROUND_RIGHT, 32, 2],
        [0, 2, TERRAIN_GROUND_LEFT, 31, 3, TERRAIN_GROUND_MIDDLE, 32, 2, TERRAIN_GROUND_RIGHT, 32, 3],
        [0, 2, TERRAIN_GROUND, 31, 5, TERRAIN_GROUND_MIDDLE, 33, 2],
        [0, 2, TERRAIN_GROUND, 32, 8, TERRAIN_GROUND_MIDDLE, 33, 1, TERRAIN_GROUND_RIGHT, 33, 2],
        [0, 2, TERRAIN_GROUND_LEFT, 31, 5, TERRAIN_GROUND_MIDDLE, 33, 4, TERRAIN_GROUND_RIGHT, 33, 3],
        [0, 2, TERRAIN_GROUND, 31, 8, TERRAIN_GROUND_LEFT, 32, 2, TERRAIN_GROUND_MIDDLE, 32, 3, TERRAIN_GROUND_RIGHT, 33, 4],
        [0, 100, TERRAIN_GROUND_LEFT, 32, 3, TERRAIN_GROUND_MIDDLE, 33, 3, TERRAIN_GROUND_RIGHT, 34, 1]
    ],
    [
        [1, 1, TERRAIN_GROUND_MIDDLE, 35, 10, TERRAIN_GROUND_RIGHT, 36, 1],
        [1, 1, TERRAIN_GROUND_LEFT, 35, 1, TERRAIN_GROUND_MIDDLE, 35, 15, TERRAIN_GROUND_RIGHT, 36, 1],
        [1, 1, TERRAIN_GROUND, 35, 15, TERRAIN_GROUND_LEFT, 37, 1, TERRAIN_GROUND_MIDDLE, 37, 1, TERRAIN_GROUND_RIGHT, 37, 1],
        [1, 1, TERRAIN_GROUND, 35, 15, TERRAIN_GROUND_LEFT, 36, 1, TERRAIN_GROUND_MIDDLE, 36, 1, TERRAIN_GROUND_RIGHT, 36, 1],
        [1, 1, TERRAIN_GROUND, 37, 5, TERRAIN_GROUND_LEFT, 36, 2, TERRAIN_GROUND_MIDDLE, 35, 10, TERRAIN_GROUND_RIGHT, 36, 2],
        [1, 100, TERRAIN_GROUND, 36, 3, TERRAIN_GROUND_MIDDLE, 38, 1]
    ],
    [
        [1, 100, TERRAIN_GROUND, 39, 0],
        [1, 100, TERRAIN_GROUND_RIGHT, 39, 1]
    ],
    [
        [2, 3, TERRAIN_GROUND_MIDDLE, 41, 1, TERRAIN_GROUND, 42, 3],
        [2, 3, TERRAIN_GROUND_MIDDLE, 41, 1, TERRAIN_GROUND_MIDDLE, 42, 6],
        [2, 3, TERRAIN_GROUND_MIDDLE, 41, 1, TERRAIN_GROUND_RIGHT, 43, 6],
        [2, 3, TERRAIN_GROUND, 41, 2, TERRAIN_GROUND, 43, 5],
        [2, 3, TERRAIN_GROUND, 41, 3, TERRAIN_GROUND, 42, 9],
        [2, 3, TERRAIN_GROUND, 41, 3, TERRAIN_GROUND, 42, 9, TERRAIN_GROUND, 43, 6],
        [2, 100, TERRAIN_GROUND_MIDDLE, 44, 1, TERRAIN_GROUND_MIDDLE, 43, 6]
    ],
    [
        [2, 3, TERRAIN_GROUND_MIDDLE, 45, 1, TERRAIN_GROUND, 46, 3],
        [2, 3, TERRAIN_GROUND_MIDDLE, 45, 1, TERRAIN_AIR_WATER, 46, 5],
        [2, 3, TERRAIN_GROUND_MIDDLE, 45, 1, TERRAIN_GROUND, 47, 5],
        [2, 3, TERRAIN_GROUND, 45, 2, TERRAIN_GROUND, 47, 9],
        [2, 3, TERRAIN_AIR_WATER, 45, 3, TERRAIN_AIR_WATER, 46, 6],
        [2, 3, TERRAIN_AIR_WATER, 45, 2, TERRAIN_AIR_WATER, 46, 6, TERRAIN_GROUND, 47, 5],
        [2, 100, TERRAIN_GROUND_RIGHT, 48, 1, TERRAIN_GROUND_MIDDLE, 45, 2]
    ],
    [
        [2, 3, TERRAIN_GROUND, 49, 1, TERRAIN_GROUND, 50, 1],
        [2, 3, TERRAIN_GROUND, 49, 1, TERRAIN_GROUND, 51, 5],
        [2, 3, TERRAIN_GROUND, 50, 1, TERRAIN_GROUND, 51, 5],
        [2, 3, TERRAIN_GROUND, 49, 1, TERRAIN_GROUND, 50, 1, TERRAIN_GROUND, 51, 9],
        [2, 100, TERRAIN_GROUND_MIDDLE, 52, 1, TERRAIN_GROUND_MIDDLE, 49, 2, TERRAIN_GROUND_MIDDLE, 50, 2]
    ],
    [
        [0, 4, TERRAIN_WATER, 53, 10, TERRAIN_WATER, 55, 5],
        [0, 4, TERRAIN_WATER, 53, 20, TERRAIN_WATER, 55, 5],
        [0, 4, TERRAIN_WATER, 53, 15, TERRAIN_GROUND, 54, 10],
        [0, 4, TERRAIN_WATER, 55, 8, TERRAIN_GROUND, 54, 10],
        [0, 4, TERRAIN_WATER, 53, 30, TERRAIN_WATER, 55, 5],
        [0, 4, TERRAIN_WATER, 53, 30, TERRAIN_GROUND, 54, 5],
        [0, 4, TERRAIN_WATER, 53, 20, TERRAIN_GROUND, 54, 5, TERRAIN_WATER, 55, 5],
        [0, 101, TERRAIN_WATER, 56, 1, TERRAIN_GROUND, 54, 5, TERRAIN_WATER, 55, 5]
    ],
    [
        [3, 1, TERRAIN_GROUND, 58, 3],
        [3, 1, TERRAIN_GROUND, 58, 4, TERRAIN_GROUND, 57, 5],
        [3, 1, TERRAIN_GROUND, 58, 5, TERRAIN_GROUND, 59, 5],
        [3, 1, TERRAIN_GROUND, 58, 5, TERRAIN_GROUND_MIDDLE, 57, 5, TERRAIN_GROUND_LEFT, 59, 5],
        [3, 1, TERRAIN_GROUND_MIDDLE, 57, 8, TERRAIN_GROUND_RIGHT, 59, 8],
        [3, 1, TERRAIN_GROUND, 58, 15, TERRAIN_GROUND, 57, 1, TERRAIN_GROUND, 59, 1],
        [3, 1, TERRAIN_GROUND, 58, 6, TERRAIN_GROUND, 57, 6, TERRAIN_GROUND, 59, 6],
        [3, 100, TERRAIN_GROUND_MIDDLE, 60, 3, TERRAIN_GROUND, 58, 10]
    ],
    [
        [3, 1, TERRAIN_GROUND, 62, 3, TERRAIN_GROUND, 61, 2],
        [3, 1, TERRAIN_GROUND, 62, 4, TERRAIN_GROUND, 63, 3],
        [3, 1, TERRAIN_GROUND, 62, 5, TERRAIN_AIR_WATER, 61, 5],
        [3, 1, TERRAIN_GROUND, 62, 5, TERRAIN_AIR_WATER, 63, 5],
        [3, 1, TERRAIN_AIR_WATER, 61, 5, TERRAIN_AIR_WATER, 63, 5],
        [3, 1, TERRAIN_GROUND, 62, 15, TERRAIN_AIR_WATER, 61, 1, TERRAIN_AIR_WATER, 63, 1],
        [3, 1, TERRAIN_GROUND, 62, 6, TERRAIN_AIR_WATER, 61, 6, TERRAIN_AIR_WATER, 63, 6],
        [3, 100, TERRAIN_GROUND_MIDDLE, 64, 1, TERRAIN_GROUND, 62, 3, TERRAIN_AIR_WATER, 61, 1, TERRAIN_AIR_WATER, 63, 1]
    ],
    [
        [4, 5, TERRAIN_WATER, 69, 1, TERRAIN_GROUND, 65, 5],
        [4, 5, TERRAIN_WATER, 69, 1, TERRAIN_GROUND, 65, 5, TERRAIN_GROUND_MIDDLE, 66, 5],
        [4, 5, TERRAIN_WATER, 69, 1, TERRAIN_GROUND, 65, 5, TERRAIN_GROUND_RIGHT, 67, 5],
        [4, 5, TERRAIN_WATER, 69, 1, TERRAIN_GROUND_MIDDLE, 66, 5, TERRAIN_GROUND_MIDDLE, 65, 5],
        [4, 5, TERRAIN_WATER, 69, 1, TERRAIN_GROUND_LEFT, 66, 5, TERRAIN_GROUND_MIDDLE, 65, 5, TERRAIN_GROUND_RIGHT, 67, 5],
        [4, 5, TERRAIN_WATER, 69, 1, TERRAIN_GROUND, 66, 6, TERRAIN_GROUND, 65, 6, TERRAIN_GROUND, 67, 6],
        [4, 102, TERRAIN_GROUND_MIDDLE, 68, 1]
    ],
    [
        [4, 5, TERRAIN_WATER, 74, 1, TERRAIN_GROUND, 70, 8],
        [4, 5, TERRAIN_WATER, 74, 1, TERRAIN_GROUND, 70, 8, TERRAIN_GROUND, 71, 5],
        [4, 5, TERRAIN_WATER, 74, 1, TERRAIN_GROUND, 70, 8, TERRAIN_GROUND, 72, 5],
        [4, 5, TERRAIN_WATER, 74, 1, TERRAIN_GROUND_MIDDLE, 71, 8, TERRAIN_GROUND, 72, 5],
        [4, 5, TERRAIN_WATER, 74, 1, TERRAIN_GROUND_LEFT, 70, 6, TERRAIN_GROUND_MIDDLE, 71, 6, TERRAIN_GROUND_RIGHT, 72, 6],
        [4, 5, TERRAIN_WATER, 74, 1, TERRAIN_GROUND, 70, 8, TERRAIN_GROUND, 71, 8, TERRAIN_GROUND, 72, 8],
        [4, 102, TERRAIN_GROUND_MIDDLE, 73, 1, TERRAIN_GROUND, 71, 8]
    ],
    [
        [4, 5, TERRAIN_WATER, 79, 1, TERRAIN_GROUND, 75, 5, TERRAIN_GROUND_MIDDLE, 76, 1],
        [4, 5, TERRAIN_WATER, 79, 1, TERRAIN_GROUND, 75, 5, TERRAIN_GROUND, 77, 2],
        [4, 5, TERRAIN_WATER, 79, 1, TERRAIN_GROUND, 75, 5, TERRAIN_AIR_WATER, 76, 5],
        [4, 5, TERRAIN_WATER, 79, 1, TERRAIN_GROUND_MIDDLE, 75, 4, TERRAIN_GROUND_MIDDLE, 76, 4, TERRAIN_GROUND_MIDDLE, 77, 2],
        [4, 5, TERRAIN_WATER, 79, 1, TERRAIN_GROUND, 75, 5, TERRAIN_AIR_WATER, 76, 5, TERRAIN_GROUND, 77, 3],
        [4, 102, TERRAIN_GROUND_MIDDLE, 78, 2, TERRAIN_GROUND_RIGHT, 78, 3, TERRAIN_GROUND_MIDDLE, 77, 5, TERRAIN_GROUND_RIGHT, 77, 10]
    ],
    [
        [0, 0, TERRAIN_GROUND, 80, 0],
        [0, 100, TERRAIN_GROUND, 80, 0]
    ],
    [
        [0, 6, TERRAIN_GROUND, 80, 10, TERRAIN_GROUND_MIDDLE, 83, 2],
        [0, 6, TERRAIN_GROUND, 81, 10, TERRAIN_GROUND, 83, 5],
        [0, 6, TERRAIN_GROUND, 80, 12, TERRAIN_GROUND_MIDDLE, 83, 3, TERRAIN_GROUND_RIGHT, 82, 1],
        [0, 6, TERRAIN_GROUND, 83, 12, TERRAIN_GROUND, 81, 5, TERRAIN_GROUND_MIDDLE, 82, 1],
        [0, 6, TERRAIN_GROUND_LEFT, 80, 8, TERRAIN_GROUND_MIDDLE, 81, 8, TERRAIN_GROUND_RIGHT, 83, 8, TERRAIN_GROUND, 82, 5],
        [0, 100, TERRAIN_GROUND_RIGHT, 84, 1]
    ],
    [
        [0, 6, TERRAIN_GROUND, 85, 15, TERRAIN_GROUND_MIDDLE, 86, 1],
        [0, 6, TERRAIN_GROUND, 85, 15, TERRAIN_GROUND_MIDDLE, 86, 2, TERRAIN_AIR_WATER, 87, 5, TERRAIN_AIR_WATER, 88, 1],
        [0, 6, TERRAIN_AIR_WATER, 87, 20, TERRAIN_AIR_WATER, 88, 2],
        [0, 6, TERRAIN_GROUND, 85, 15, TERRAIN_GROUND_MIDDLE, 86, 1, TERRAIN_AIR_WATER, 87, 15, TERRAIN_AIR_WATER, 88, 1],
        [0, 6, TERRAIN_GROUND, 85, 10, TERRAIN_GROUND_MIDDLE, 86, 4, TERRAIN_AIR_WATER, 87, 5, TERRAIN_AIR_WATER, 88, 4],
        [0, 100, TERRAIN_GROUND_RIGHT, 89, 1]
    ],
    [
        [0, 6, TERRAIN_GROUND_MIDDLE, 92, 1, TERRAIN_GROUND_MIDDLE, 92, 2],
        [0, 6, TERRAIN_GROUND_MIDDLE, 90, 15, TERRAIN_GROUND_MIDDLE, 92, 1],
        [0, 6, TERRAIN_GROUND, 91, 15, TERRAIN_GROUND_MIDDLE, 91, 5, TERRAIN_GROUND_MIDDLE, 92, 1],
        [0, 6, TERRAIN_AIR_WATER, 91, 15, TERRAIN_GROUND_MIDDLE, 92, 1],
        [0, 6, TERRAIN_GROUND_MIDDLE, 90, 15, TERRAIN_AIR_WATER, 91, 10, TERRAIN_GROUND_MIDDLE, 92, 1],
        [0, 100, TERRAIN_GROUND_RIGHT, 93, 1]
    ],
    [
        [0, 6, TERRAIN_GROUND_MIDDLE, 94, 10, TERRAIN_GROUND_RIGHT, 94, 10, TERRAIN_GROUND_RIGHT, 96, 5],
        [0, 6, TERRAIN_AIR_WATER, 95, 20, TERRAIN_GROUND, 96, 5],
        [0, 6, TERRAIN_GROUND, 94, 30, TERRAIN_AIR_WATER, 95, 30, TERRAIN_GROUND, 96, 5],
        [0, 6, TERRAIN_GROUND_MIDDLE, 94, 30, TERRAIN_AIR_WATER, 95, 30, TERRAIN_GROUND_MIDDLE, 96, 5],
        [0, 100, TERRAIN_GROUND_MIDDLE, 97, 1, TERRAIN_GROUND_MIDDLE, 96, 20]
    ],
    [
        [4, 4, TERRAIN_WATER, 99, 10, TERRAIN_WATER, 100, 1],
        [4, 4, TERRAIN_WATER, 98, 10, TERRAIN_WATER, 99, 10, TERRAIN_WATER, 100, 1],
        [4, 4, TERRAIN_GROUND_LEFT, 98, 10, TERRAIN_GROUND_RIGHT, 98, 10, TERRAIN_WATER, 100, 1],
        [4, 4, TERRAIN_WATER, 99, 20, TERRAIN_WATER, 100, 5],
        [4, 4, TERRAIN_GROUND_MIDDLE, 98, 10, TERRAIN_WATER, 98, 10, TERRAIN_WATER, 99, 5, TERRAIN_WATER, 100, 2],
        [4, 101, TERRAIN_WATER, 101, 1]
    ],
    [
        [4, 4, TERRAIN_GROUND, 102, 20, TERRAIN_WATER, 103, 3],
        [4, 4, TERRAIN_GROUND, 102, 30, TERRAIN_GROUND, 104, 3],
        [4, 4, TERRAIN_GROUND_MIDDLE, 102, 20, TERRAIN_WATER, 103, 3, TERRAIN_GROUND_RIGHT, 104, 3],
        [4, 4, TERRAIN_GROUND, 102, 20, TERRAIN_WATER, 103, 8, TERRAIN_GROUND_RIGHT, 104, 5],
        [4, 101, TERRAIN_GROUND, 102, 50, TERRAIN_GROUND_MIDDLE, 105, 1]
    ],
    [
        [4, 4, TERRAIN_WATER, 106, 10, TERRAIN_WATER, 107, 3],
        [4, 4, TERRAIN_WATER, 106, 20, TERRAIN_WATER, 108, 2],
        [4, 4, TERRAIN_WATER, 106, 20, TERRAIN_WATER, 107, 5, TERRAIN_WATER, 108, 1],
        [4, 4, TERRAIN_WATER, 106, 15, TERRAIN_WATER, 107, 10, TERRAIN_WATER, 108, 1],
        [4, 4, TERRAIN_WATER, 106, 35, TERRAIN_WATER, 108, 3],
        [4, 101, TERRAIN_WATER, 109, 5]
    ],
    [
        [4, 4, TERRAIN_WATER, 111, 10, TERRAIN_WATER, 112, 1],
        [4, 4, TERRAIN_WATER, 111, 20, TERRAIN_WATER, 112, 1],
        [4, 4, TERRAIN_WATER, 110, 30, TERRAIN_WATER, 112, 1],
        [4, 4, TERRAIN_WATER, 111, 20, TERRAIN_WATER, 112, 2],
        [4, 101, TERRAIN_WATER, 113, 1, TERRAIN_WATER, 112, 2, TERRAIN_WATER, 111, 10]
    ],
    [
        [1, 101, TERRAIN_WATER, 114, 0],
        [1, 101, TERRAIN_WATER, 114, 1]
    ],
    [
        [3, 2, TERRAIN_GROUND, 116, 5, TERRAIN_AIR_WATER, 118, 3],
        [3, 2, TERRAIN_GROUND, 116, 12, TERRAIN_GROUND, 117, 12],
        [3, 2, TERRAIN_GROUND_MIDDLE, 116, 10, TERRAIN_GROUND, 116, 5, TERRAIN_AIR_WATER, 118, 5],
        [3, 2, TERRAIN_GROUND, 117, 12, TERRAIN_AIR_WATER, 118, 8],
        [3, 2, TERRAIN_GROUND, 116, 10, TERRAIN_GROUND_MIDDLE, 117, 10, TERRAIN_AIR_WATER, 118, 5],
        [3, 100, TERRAIN_GROUND_MIDDLE, 119, 1, TERRAIN_AIR_WATER, 118, 3]
    ],
    [
        [3, 2, TERRAIN_GROUND_RIGHT, 122, 1, TERRAIN_GROUND, 120, 5],
        [3, 2, TERRAIN_GROUND_RIGHT, 122, 3, TERRAIN_GROUND, 120, 10],
        [3, 2, TERRAIN_GROUND_RIGHT, 122, 5, TERRAIN_GROUND, 121, 10, TERRAIN_GROUND_RIGHT, 120, 10],
        [3, 100, TERRAIN_GROUND_MIDDLE, 123, 1, TERRAIN_GROUND, 120, 10]
    ],
    [
        [3, 3, TERRAIN_GROUND, 124, 20],
        [3, 3, TERRAIN_GROUND, 125, 20],
        [3, 3, TERRAIN_GROUND, 126, 20],
        [3, 2, TERRAIN_GROUND, 124, 10, TERRAIN_GROUND, 125, 5, TERRAIN_GROUND, 126, 5],
        [3, 2, TERRAIN_GROUND_RIGHT, 124, 10, TERRAIN_GROUND, 125, 10, TERRAIN_GROUND_MIDDLE, 126, 5],
        [3, 3, TERRAIN_GROUND_MIDDLE, 124, 30],
        [3, 100, TERRAIN_GROUND_MIDDLE, 127, 1]
    ],
    [
        [3, 1, TERRAIN_GROUND, 128, 10],
        [3, 1, TERRAIN_GROUND, 128, 50],
        [3, 100, TERRAIN_GROUND, 128, 99, TERRAIN_GROUND, 129, 1]
    ],
    [
        [5, 7, TERRAIN_GROUND, 130, 10, TERRAIN_GROUND, 132, 1],
        [5, 7, TERRAIN_GROUND, 130, 15, TERRAIN_GROUND, 131, 15, TERRAIN_GROUND_RIGHT, 132, 2],
        [5, 7, TERRAIN_GROUND, 131, 30, TERRAIN_GROUND, 132, 2],
        [5, 7, TERRAIN_GROUND_MIDDLE, 130, 30, TERRAIN_GROUND_RIGHT, 132, 3],
        [5, 7, TERRAIN_GROUND, 130, 20, TERRAIN_GROUND_MIDDLE, 131, 20, TERRAIN_GROUND, 132, 3],
        [5, 100, TERRAIN_GROUND_MIDDLE, 133, 1, TERRAIN_GROUND_RIGHT, 132, 5]
    ],
    [
        [5, 7, TERRAIN_GROUND, 134, 10, TERRAIN_AIR_WATER, 135, 1],
        [5, 7, TERRAIN_GROUND, 134, 30, TERRAIN_GROUND_MIDDLE, 136, 5, TERRAIN_AIR_WATER, 135, 3],
        [5, 7, TERRAIN_AIR_WATER, 134, 10, TERRAIN_GROUND, 136, 10, TERRAIN_AIR_WATER, 135, 2],
        [5, 7, TERRAIN_GROUND_MIDDLE, 134, 10, TERRAIN_GROUND_MIDDLE, 136, 5, TERRAIN_AIR_WATER, 135, 4],
        [5, 7, TERRAIN_AIR_WATER, 134, 30, TERRAIN_GROUND_MIDDLE, 136, 5, TERRAIN_AIR_WATER, 135, 3],
        [5, 100, TERRAIN_GROUND_MIDDLE, 137, 1, TERRAIN_GROUND_MIDDLE, 135, 2]
    ],
    [
        [5, 7, TERRAIN_GROUND_LEFT, 138, 5, TERRAIN_GROUND_MIDDLE, 139, 5, TERRAIN_GROUND_RIGHT, 140, 1],
        [5, 7, TERRAIN_GROUND_MIDDLE, 139, 10, TERRAIN_GROUND_RIGHT, 138, 10, TERRAIN_GROUND, 140, 2],
        [5, 7, TERRAIN_GROUND, 138, 25, TERRAIN_GROUND_MIDDLE, 140, 3],
        [5, 7, TERRAIN_GROUND, 139, 25, TERRAIN_GROUND_MIDDLE, 140, 3],
        [5, 7, TERRAIN_GROUND_LEFT, 138, 15, TERRAIN_GROUND_MIDDLE, 140, 3, TERRAIN_GROUND_RIGHT, 139, 15],
        [5, 7, TERRAIN_GROUND_MIDDLE, 139, 20, TERRAIN_GROUND, 140, 5],
        [5, 100, TERRAIN_GROUND, 141, 5, TERRAIN_GROUND, 138, 30]
    ],
    [
        [5, 7, TERRAIN_GROUND, 143, 10, TERRAIN_GROUND_MIDDLE, 142, 3],
        [5, 7, TERRAIN_GROUND, 143, 15, TERRAIN_GROUND_MIDDLE, 142, 3, TERRAIN_GROUND_MIDDLE, 144, 3],
        [5, 7, TERRAIN_GROUND_MIDDLE, 143, 1, TERRAIN_AIR_WATER, 142, 20, TERRAIN_GROUND_MIDDLE, 144, 5],
        [5, 7, TERRAIN_GROUND_MIDDLE, 143, 1, TERRAIN_AIR_WATER, 142, 10, TERRAIN_GROUND, 144, 15],
        [5, 7, TERRAIN_GROUND_LEFT, 143, 10, TERRAIN_AIR_WATER, 142, 10, TERRAIN_GROUND_MIDDLE, 144, 10],
        [5, 100, TERRAIN_GROUND_MIDDLE, 145, 1, TERRAIN_GROUND, 143, 8]
    ],
    [
        [5, 7, TERRAIN_GROUND_MIDDLE, 146, 1, TERRAIN_GROUND_RIGHT, 147, 1, TERRAIN_WATER, 148, 1],
        [5, 7, TERRAIN_GROUND, 146, 3, TERRAIN_WATER, 148, 2],
        [5, 7, TERRAIN_GROUND, 147, 3, TERRAIN_WATER, 148, 3],
        [5, 7, TERRAIN_GROUND, 146, 2, TERRAIN_GROUND, 147, 2, TERRAIN_WATER, 148, 3],
        [5, 7, TERRAIN_GROUND_MIDDLE, 146, 1, TERRAIN_GROUND_MIDDLE, 147, 1, TERRAIN_WATER, 148, 30],
        [5, 100, TERRAIN_GROUND_MIDDLE, 149, 25, TERRAIN_GROUND_RIGHT, 149, 25]
    ],
    [
        [5, 4, TERRAIN_WATER, 150, 10, TERRAIN_GROUND_MIDDLE, 151, 10],
        [5, 4, TERRAIN_WATER, 151, 10, TERRAIN_GROUND_MIDDLE, 152, 10],
        [5, 4, TERRAIN_WATER, 152, 10, TERRAIN_GROUND_MIDDLE, 150, 10],
        [5, 4, TERRAIN_GROUND_LEFT, 150, 10, TERRAIN_GROUND_MIDDLE, 151, 10, TERRAIN_GROUND_RIGHT, 152, 10],
        [5, 4, TERRAIN_WATER, 150, 10, TERRAIN_WATER, 151, 10, TERRAIN_WATER, 152, 10],
        [5, 101, TERRAIN_WATER, 153, 1]
    ],
    [
        [5, 7, TERRAIN_GROUND, 154, 3, TERRAIN_AIR_WATER, 155, 2, TERRAIN_GROUND_RIGHT, 156, 1],
        [5, 7, TERRAIN_GROUND, 154, 15, TERRAIN_GROUND_MIDDLE, 154, 10, TERRAIN_GROUND_MIDDLE, 156, 1],
        [5, 7, TERRAIN_AIR_WATER, 155, 20, TERRAIN_GROUND_MIDDLE, 156, 1],
        [5, 7, TERRAIN_GROUND, 154, 15, TERRAIN_AIR_WATER, 155, 15, TERRAIN_GROUND, 156, 2],
        [5, 7, TERRAIN_GROUND_LEFT, 154, 15, TERRAIN_AIR_WATER, 155, 15, TERRAIN_GROUND, 156, 2],
        [5, 100, TERRAIN_GROUND_MIDDLE, 157, 1]
    ],
    [
        [5, 7, TERRAIN_GROUND_LEFT, 158, 10, TERRAIN_GROUND_MIDDLE, 160, 1, TERRAIN_GROUND_RIGHT, 158, 10],
        [5, 7, TERRAIN_AIR_WATER, 159, 20, TERRAIN_GROUND_MIDDLE, 160, 2],
        [5, 7, TERRAIN_GROUND_LEFT, 158, 10, TERRAIN_AIR_WATER, 159, 20, TERRAIN_GROUND, 160, 3],
        [5, 7, TERRAIN_GROUND_MIDDLE, 159, 20, TERRAIN_GROUND_MIDDLE, 160, 5],
        [5, 100, TERRAIN_GROUND_MIDDLE, 161, 1, TERRAIN_GROUND, 160, 5]
    ],
    [
        [5, 102, TERRAIN_GROUND_MIDDLE, 162, 0],
        [5, 102, TERRAIN_GROUND_MIDDLE, 162, 1]
    ],
    [
        [5, 2, TERRAIN_GROUND_LEFT, 164, 10, TERRAIN_GROUND_RIGHT, 165, 1],
        [5, 2, TERRAIN_GROUND, 165, 2],
        [5, 2, TERRAIN_GROUND, 164, 30, TERRAIN_GROUND, 166, 3],
        [5, 2, TERRAIN_GROUND_LEFT, 164, 10, TERRAIN_GROUND_RIGHT, 165, 1, TERRAIN_GROUND, 166, 3],
        [5, 100, TERRAIN_GROUND_MIDDLE, 167, 1, TERRAIN_GROUND_RIGHT, 165, 1]
    ],
    [
        [5, 8, TERRAIN_GROUND, 168, 15, TERRAIN_AIR_WATER, 169, 3],
        [5, 8, TERRAIN_GROUND, 168, 20, TERRAIN_WATER, 170, 1],
        [5, 8, TERRAIN_GROUND, 168, 20, TERRAIN_AIR_WATER, 169, 5, TERRAIN_WATER, 170, 2],
        [5, 8, TERRAIN_AIR_WATER, 169, 30, TERRAIN_WATER, 170, 2],
        [5, 8, TERRAIN_GROUND, 168, 10, TERRAIN_AIR_WATER, 169, 5, TERRAIN_WATER, 170, 3],
        [5, 101, TERRAIN_GROUND_MIDDLE, 171, 1, TERRAIN_WATER, 170, 3]
    ],
    [
        [5, 8, TERRAIN_AIR_WATER, 172, 5, TERRAIN_AIR_WATER, 173, 5, TERRAIN_AIR_WATER, 174, 1],
        [5, 8, TERRAIN_AIR_WATER, 172, 20, TERRAIN_AIR_WATER, 174, 3],
        [5, 8, TERRAIN_AIR_WATER, 173, 20, TERRAIN_AIR_WATER, 174, 3],
        [5, 8, TERRAIN_AIR_WATER, 172, 10, TERRAIN_AIR_WATER, 173, 10, TERRAIN_AIR_WATER, 174, 3],
        [5, 8, TERRAIN_AIR_WATER, 173, 3, TERRAIN_AIR_WATER, 173, 3, TERRAIN_AIR_WATER, 174, 15],
        [5, 101, TERRAIN_AIR_WATER, 175, 10]
    ],
    [
        [5, 8, TERRAIN_WATER, 177, 10, TERRAIN_GROUND, 178, 10],
        [5, 8, TERRAIN_GROUND_MIDDLE, 176, 1, TERRAIN_WATER, 177, 10],
        [5, 8, TERRAIN_GROUND_MIDDLE, 176, 1, TERRAIN_GROUND, 178, 10],
        [5, 8, TERRAIN_GROUND_MIDDLE, 176, 1, TERRAIN_WATER, 177, 10, TERRAIN_GROUND, 178, 10],
        [5, 101, TERRAIN_GROUND_MIDDLE, 176, 2, TERRAIN_WATER, 179, 1]
    ],
    [
        [0, 0, TERRAIN_GROUND, 180, 0],
        [0, 100, TERRAIN_GROUND, 180, 0]
    ],
    [
        [4, 9, TERRAIN_GROUND, 180, 20, TERRAIN_WATER, 184, 1],
        [4, 9, TERRAIN_GROUND, 180, 30, TERRAIN_GROUND, 181, 3, TERRAIN_WATER, 184, 2],
        [4, 9, TERRAIN_GROUND, 180, 40, TERRAIN_GROUND, 182, 3, TERRAIN_WATER, 184, 3],
        [4, 9, TERRAIN_GROUND, 180, 50, TERRAIN_GROUND, 181, 3, TERRAIN_GROUND, 182, 3],
        [4, 9, TERRAIN_GROUND, 180, 60, TERRAIN_WATER, 184, 10],
        [4, 103, TERRAIN_GROUND_MIDDLE, 183, 1, TERRAIN_GROUND, 180, 20]
    ],
    [
        [4, 9, TERRAIN_GROUND, 185, 30, TERRAIN_GROUND_MIDDLE, 186, 3],
        [4, 9, TERRAIN_GROUND, 185, 40, TERRAIN_GROUND, 186, 10, TERRAIN_GROUND_RIGHT, 187, 1],
        [4, 9, TERRAIN_GROUND, 185, 40, TERRAIN_GROUND_MIDDLE, 186, 20, TERRAIN_GROUND_MIDDLE, 187, 1],
        [4, 9, TERRAIN_GROUND, 185, 70, TERRAIN_GROUND_MIDDLE, 187, 1, TERRAIN_GROUND_RIGHT, 187, 1],
        [4, 9, TERRAIN_GROUND, 185, 40, TERRAIN_WATER, 189, 1],
        [4, 103, TERRAIN_GROUND_RIGHT, 188, 1, TERRAIN_GROUND, 186, 5]
    ],
    [
        [4, 9, TERRAIN_GROUND, 190, 80, TERRAIN_WATER, 194, 1],
        [4, 9, TERRAIN_GROUND, 191, 80, TERRAIN_WATER, 194, 1],
        [4, 9, TERRAIN_GROUND, 192, 80, TERRAIN_WATER, 194, 1],
        [4, 103, TERRAIN_GROUND_MIDDLE, 193, 1]
    ],
    [
        [7, 3, TERRAIN_GROUND_RIGHT, 195, 30, TERRAIN_GROUND_MIDDLE, 196, 1],
        [7, 3, TERRAIN_GROUND_RIGHT, 195, 30, TERRAIN_GROUND_MIDDLE, 197, 3],
        [7, 3, TERRAIN_GROUND, 195, 50, TERRAIN_GROUND_MIDDLE, 196, 3, TERRAIN_GROUND_MIDDLE, 197, 3],
        [7, 3, TERRAIN_GROUND_RIGHT, 195, 50, TERRAIN_GROUND_MIDDLE, 196, 3, TERRAIN_GROUND_MIDDLE, 197, 3],
        [7, 100, TERRAIN_GROUND_MIDDLE, 198, 1, TERRAIN_GROUND_MIDDLE, 197, 3]
    ],
    [
        [7, 3, TERRAIN_GROUND, 199, 30, TERRAIN_GROUND_MIDDLE, 200, 2],
        [7, 3, TERRAIN_GROUND, 199, 40, TERRAIN_GROUND_MIDDLE, 201, 2],
        [7, 3, TERRAIN_GROUND_MIDDLE, 200, 20, TERRAIN_GROUND_MIDDLE, 201, 2],
        [7, 3, TERRAIN_GROUND, 199, 20, TERRAIN_GROUND_MIDDLE, 200, 10, TERRAIN_GROUND_RIGHT, 201, 2],
        [7, 3, TERRAIN_GROUND, 201, 5],
        [7, 100, TERRAIN_GROUND_MIDDLE, 202, 1, TERRAIN_GROUND, 199, 90]
    ],
    [
        [3, 10, TERRAIN_GROUND, 203, 30, TERRAIN_GROUND_MIDDLE, 205, 1],
        [3, 10, TERRAIN_GROUND, 204, 30, TERRAIN_GROUND_MIDDLE, 205, 1],
        [3, 10, TERRAIN_GROUND, 205, 5],
        [3, 10, TERRAIN_GROUND, 203, 20, TERRAIN_GROUND_MIDDLE, 204, 20, TERRAIN_GROUND, 205, 1],
        [3, 100, TERRAIN_GROUND_MIDDLE, 206, 1, TERRAIN_GROUND_LEFT, 203, 5, TERRAIN_GROUND_RIGHT, 204, 5]
    ],
    [
        [4, 10, TERRAIN_AIR_WATER, 207, 30, TERRAIN_GROUND_RIGHT, 208, 30],
        [4, 10, TERRAIN_AIR_WATER, 207, 50, TERRAIN_GROUND_MIDDLE, 208, 10, TERRAIN_GROUND_RIGHT, 209, 1],
        [4, 10, TERRAIN_AIR_WATER, 207, 10, TERRAIN_GROUND, 208, 50, TERRAIN_GROUND_RIGHT, 209, 1],
        [4, 10, TERRAIN_AIR_WATER, 207, 10, TERRAIN_GROUND, 208, 10, TERRAIN_GROUND, 209, 3],
        [4, 100, TERRAIN_GROUND_MIDDLE, 210, 1, TERRAIN_AIR_WATER, 207, 10, TERRAIN_GROUND, 208, 10]
    ],
    [
        [0, 1, TERRAIN_GROUND_MIDDLE, 4, 1, TERRAIN_GROUND_LEFT, 8, 1, TERRAIN_AIR_WATER, 13, 1, TERRAIN_AIR_WATER, 18, 1, TERRAIN_GROUND_LEFT, 22, 1, TERRAIN_GROUND_MIDDLE, 26, 1, TERRAIN_GROUND_MIDDLE, 30, 1, TERRAIN_GROUND_RIGHT, 34, 1],
        [2, 10, TERRAIN_GROUND_MIDDLE, 44, 1, TERRAIN_AIR_WATER, 48, 1, TERRAIN_GROUND_MIDDLE, 52, 1, TERRAIN_GROUND_MIDDLE, 38, 1],
        [3, 10, TERRAIN_GROUND_MIDDLE, 60, 1, TERRAIN_GROUND_MIDDLE, 64, 1, TERRAIN_GROUND_RIGHT, 68, 1, TERRAIN_AIR_WATER, 73, 1, TERRAIN_GROUND_LEFT, 78, 1],
        [0, 8, TERRAIN_GROUND_MIDDLE, 84, 1, TERRAIN_GROUND_MIDDLE, 89, 1, TERRAIN_AIR_WATER, 93, 1, TERRAIN_GROUND_MIDDLE, 97, 1],
        [4, 101, TERRAIN_WATER, 56, 1, TERRAIN_WATER, 101, 1, TERRAIN_GROUND_MIDDLE, 105, 1, TERRAIN_WATER, 109, 1, TERRAIN_WATER, 113, 1, TERRAIN_WATER, 153, 1],
        [3, 1, TERRAIN_GROUND_LEFT, 119, 1, TERRAIN_GROUND_RIGHT, 123, 1, TERRAIN_GROUND_MIDDLE, 127, 1],
        [5, 1, TERRAIN_GROUND_MIDDLE, 133, 1, TERRAIN_GROUND_MIDDLE, 137, 1, TERRAIN_GROUND, 141, 1, TERRAIN_GROUND_RIGHT, 145, 1, TERRAIN_GROUND_LEFT, 149, 1, TERRAIN_GROUND_RIGHT, 157, 1, TERRAIN_GROUND_LEFT, 161, 1, TERRAIN_GROUND_MIDDLE, 167, 1],
        [5, 8, TERRAIN_GROUND_MIDDLE, 171, 1, TERRAIN_AIR_WATER, 175, 1, TERRAIN_WATER, 179, 1],
        [4, 103, TERRAIN_AIR_WATER, 183, 1, TERRAIN_GROUND_MIDDLE, 188, 1, TERRAIN_GROUND_MIDDLE, 193, 1],
        [1, 100, TERRAIN_AIR_WATER, 211, 1, TERRAIN_AIR_WATER, 212, 1, TERRAIN_AIR_WATER, 213, 1, TERRAIN_AIR_WATER, 214, 1]
    ],
    [
        [7, 3, TERRAIN_GROUND_LEFT, 215, 3, TERRAIN_GROUND_RIGHT, 216, 3, TERRAIN_GROUND_MIDDLE, 217, 3],
        [7, 3, TERRAIN_AIR_WATER, 215, 80, TERRAIN_GROUND, 217, 1],
        [7, 3, TERRAIN_GROUND, 216, 80, TERRAIN_GROUND, 217, 1],
        [7, 3, TERRAIN_AIR_WATER, 215, 40, TERRAIN_GROUND, 216, 40, TERRAIN_GROUND, 217, 2],
        [7, 100, TERRAIN_GROUND_MIDDLE, 218, 1, TERRAIN_GROUND_RIGHT, 217, 1]
    ],
    [
        [7, 3, TERRAIN_GROUND_LEFT, 219, 1, TERRAIN_GROUND_MIDDLE, 220, 1, TERRAIN_GROUND_RIGHT, 219, 1],
        [7, 3, TERRAIN_GROUND_LEFT, 221, 1, TERRAIN_GROUND_MIDDLE, 220, 1, TERRAIN_GROUND_RIGHT, 221, 1],
        [7, 3, TERRAIN_GROUND, 221, 3, TERRAIN_GROUND_MIDDLE, 219, 1],
        [7, 3, TERRAIN_GROUND_MIDDLE, 219, 1, TERRAIN_GROUND, 220, 3, TERRAIN_GROUND_MIDDLE, 221, 1],
        [7, 100, TERRAIN_GROUND_LEFT, 221, 1, TERRAIN_GROUND_MIDDLE, 220, 1, TERRAIN_GROUND_RIGHT, 219, 1, TERRAIN_GROUND_MIDDLE, 222, 1]
    ],
    [
        [7, 1, TERRAIN_AIR_WATER, 223, 50, TERRAIN_GROUND_MIDDLE, 225, 1],
        [7, 1, TERRAIN_AIR_WATER, 224, 50, TERRAIN_GROUND_MIDDLE, 225, 1],
        [7, 1, TERRAIN_AIR_WATER, 223, 20, TERRAIN_AIR_WATER, 224, 20, TERRAIN_GROUND, 225, 2],
        [7, 100, TERRAIN_GROUND_MIDDLE, 226, 1]
    ],
    [
        [7, 1, TERRAIN_GROUND_MIDDLE, 227, 30],
        [7, 1, TERRAIN_GROUND_MIDDLE, 229, 15, TERRAIN_GROUND_RIGHT, 227, 30],
        [7, 1, TERRAIN_GROUND, 228, 50],
        [7, 1, TERRAIN_GROUND, 228, 30, TERRAIN_GROUND_MIDDLE, 227, 30],
        [7, 1, TERRAIN_GROUND, 228, 10, TERRAIN_GROUND_MIDDLE, 229, 30, TERRAIN_GROUND_RIGHT, 227, 10],
        [7, 100, TERRAIN_GROUND_RIGHT, 230, 30]
    ],
    [
        [7, 1, TERRAIN_GROUND_MIDDLE, 232, 1, TERRAIN_GROUND, 231, 5],
        [7, 1, TERRAIN_GROUND_MIDDLE, 232, 1, TERRAIN_GROUND, 231, 50],
        [7, 1, TERRAIN_GROUND_MIDDLE, 232, 2, TERRAIN_GROUND, 231, 15],
        [7, 100, TERRAIN_GROUND_MIDDLE, 234, 1, TERRAIN_GROUND, 233, 99]
    ],
    [
        [7, 1, TERRAIN_GROUND, 235, 50, TERRAIN_GROUND_MIDDLE, 237, 1],
        [7, 1, TERRAIN_GROUND, 236, 50, TERRAIN_GROUND_MIDDLE, 237, 1],
        [7, 1, TERRAIN_GROUND_LEFT, 237, 1, TERRAIN_GROUND_MIDDLE, 237, 1, TERRAIN_GROUND_RIGHT, 237, 1],
        [7, 1, TERRAIN_GROUND_MIDDLE, 235, 30, TERRAIN_GROUND_MIDDLE, 236, 30, TERRAIN_GROUND_RIGHT, 237, 1],
        [7, 100, TERRAIN_GROUND_LEFT, 238, 1, TERRAIN_GROUND_MIDDLE, 238, 1, TERRAIN_GROUND_RIGHT, 238, 1]
    ],
    [
        [8, 100, TERRAIN_AIR_WATER, 239, 5, TERRAIN_GROUND, 241, 3],
        [8, 100, TERRAIN_GROUND, 240, 2, TERRAIN_GROUND, 241, 5],
        [8, 100, TERRAIN_AIR_WATER, 239, 5, TERRAIN_GROUND_MIDDLE, 240, 5],
        [8, 100, TERRAIN_AIR_WATER, 239, 5, TERRAIN_GROUND_RIGHT, 240, 1, TERRAIN_GROUND, 241, 5],
        [8, 100, TERRAIN_GROUND_MIDDLE, 242, 1]
    ],
    [
        [7, 102, TERRAIN_GROUND_MIDDLE, 243, 0],
        [7, 102, TERRAIN_GROUND_MIDDLE, 243, 1]
    ],
    [
        [7, 6, TERRAIN_GROUND, 247, 30],
        [7, 6, TERRAIN_GROUND_LEFT, 245, 20, TERRAIN_GROUND_MIDDLE, 247, 20],
        [7, 6, TERRAIN_GROUND, 245, 20, TERRAIN_AIR_WATER, 246, 30],
        [7, 6, TERRAIN_GROUND, 245, 20, TERRAIN_AIR_WATER, 246, 20, TERRAIN_GROUND_RIGHT, 247, 20],
        [7, 100, TERRAIN_GROUND_MIDDLE, 248, 1]
    ],
    [
        [7, 8, TERRAIN_WATER, 249, 30, TERRAIN_GROUND_RIGHT, 251, 1],
        [7, 8, TERRAIN_WATER, 249, 50, TERRAIN_GROUND_RIGHT, 251, 3],
        [7, 8, TERRAIN_GROUND, 250, 40, TERRAIN_GROUND_RIGHT, 251, 1],
        [7, 8, TERRAIN_WATER, 249, 30, TERRAIN_GROUND_MIDDLE, 250, 30, TERRAIN_GROUND_RIGHT, 251, 2],
        [7, 101, TERRAIN_WATER, 252, 1, TERRAIN_WATER, 251, 3]
    ],
    [
        [9, 1, TERRAIN_GROUND_MIDDLE, 253, 30, TERRAIN_AIR_WATER, 255, 1],
        [9, 1, TERRAIN_GROUND, 254, 30, TERRAIN_AIR_WATER, 255, 1],
        [9, 1, TERRAIN_GROUND_MIDDLE, 253, 20, TERRAIN_GROUND, 254, 20, TERRAIN_AIR_WATER, 255, 1],
        [9, 1, TERRAIN_GROUND_LEFT, 253, 10, TERRAIN_GROUND, 254, 10, TERRAIN_AIR_WATER, 255, 3],
        [9, 100, TERRAIN_AIR_WATER, 256, 1, TERRAIN_AIR_WATER, 255, 1]
    ],
    [
        [9, 1, TERRAIN_GROUND_MIDDLE, 258, 1],
        [9, 1, TERRAIN_GROUND, 258, 10],
        [9, 100, TERRAIN_GROUND_MIDDLE, 259, 1]
    ],
    [
        [9, 1, TERRAIN_GROUND, 262, 30, TERRAIN_GROUND_MIDDLE, 260, 30],
        [9, 1, TERRAIN_GROUND, 260, 30, TERRAIN_GROUND_MIDDLE, 261, 30],
        [9, 1, TERRAIN_GROUND, 262, 30, TERRAIN_GROUND_MIDDLE, 261, 30],
        [9, 100, TERRAIN_GROUND_MIDDLE, 263, 1, TERRAIN_GROUND_RIGHT, 260, 2, TERRAIN_GROUND_RIGHT, 261, 2, TERRAIN_GROUND_RIGHT, 262, 2]
    ],
    [
        [9, 1, TERRAIN_GROUND_MIDDLE, 264, 1, TERRAIN_AIR_WATER, 265, 80],
        [9, 1, TERRAIN_GROUND_MIDDLE, 264, 1, TERRAIN_GROUND, 266, 80],
        [9, 1, TERRAIN_GROUND_MIDDLE, 264, 1, TERRAIN_AIR_WATER, 265, 40, TERRAIN_GROUND, 266, 40],
        [9, 100, TERRAIN_GROUND_MIDDLE, 267, 1, TERRAIN_GROUND_RIGHT, 264, 1]
    ],
    [
        [9, 0, TERRAIN_GROUND, 268, 0],
        [9, 100, TERRAIN_GROUND, 268, 0]
    ],
    [
        [4, 101, TERRAIN_AIR_WATER, 268, 30],
        [4, 101, TERRAIN_AIR_WATER, 268, 60],
        [4, 101, TERRAIN_AIR_WATER, 268, 99, TERRAIN_AIR_WATER, 269, 1]
    ],
    [
        [10, 1, TERRAIN_GROUND_MIDDLE, 270, 20, TERRAIN_GROUND_RIGHT, 271, 1],
        [10, 1, TERRAIN_GROUND, 270, 40, TERRAIN_GROUND_MIDDLE, 271, 1, TERRAIN_GROUND_RIGHT, 271, 1],
        [10, 1, TERRAIN_GROUND, 270, 40, TERRAIN_GROUND_MIDDLE, 271, 1, TERRAIN_GROUND_RIGHT, 272, 1],
        [10, 1, TERRAIN_GROUND, 270, 40, TERRAIN_GROUND_MIDDLE, 272, 1, TERRAIN_GROUND_RIGHT, 272, 1],
        [10, 1, TERRAIN_GROUND, 270, 10, TERRAIN_GROUND, 271, 3, TERRAIN_GROUND, 272, 3],
        [10, 1, TERRAIN_GROUND_MIDDLE, 270, 60],
        [10, 100, TERRAIN_GROUND_MIDDLE, 273, 1, TERRAIN_GROUND, 270, 30]
    ],
    [
        [10, 11, TERRAIN_AIR_WATER, 274, 50, TERRAIN_GROUND_MIDDLE, 276, 1],
        [10, 11, TERRAIN_AIR_WATER, 274, 50, TERRAIN_GROUND_MIDDLE, 275, 1],
        [10, 11, TERRAIN_GROUND, 274, 50, TERRAIN_GROUND_RIGHT, 276, 1, TERRAIN_GROUND_MIDDLE, 275, 1],
        [10, 11, TERRAIN_GROUND, 274, 50, TERRAIN_GROUND, 275, 2],
        [10, 11, TERRAIN_GROUND, 274, 50, TERRAIN_GROUND_LEFT, 276, 1, TERRAIN_GROUND_RIGHT, 276, 1],
        [10, 100, TERRAIN_GROUND_MIDDLE, 274, 50, TERRAIN_GROUND_MIDDLE, 277, 1]
    ],
    [
        [10, 11, TERRAIN_GROUND_MIDDLE, 279, 1, TERRAIN_GROUND_LEFT, 278, 10, TERRAIN_GROUND_RIGHT, 280, 10],
        [10, 11, TERRAIN_GROUND, 279, 2, TERRAIN_GROUND, 278, 40],
        [10, 11, TERRAIN_GROUND, 279, 2, TERRAIN_GROUND, 280, 60],
        [10, 11, TERRAIN_GROUND, 279, 2, TERRAIN_GROUND, 278, 30, TERRAIN_GROUND, 280, 20],
        [10, 100, TERRAIN_GROUND_LEFT, 279, 1, TERRAIN_GROUND_RIGHT, 279, 1, TERRAIN_GROUND_MIDDLE, 281, 1]
    ],
    [
        [10, 10, TERRAIN_GROUND_MIDDLE, 282, 10, TERRAIN_GROUND_RIGHT, 282, 10],
        [10, 10, TERRAIN_GROUND, 283, 30, TERRAIN_GROUND_MIDDLE, 282, 10],
        [10, 10, TERRAIN_GROUND, 282, 30, TERRAIN_GROUND, 284, 5],
        [10, 10, TERRAIN_GROUND, 283, 30, TERRAIN_GROUND, 284, 5],
        [10, 10, TERRAIN_GROUND, 284, 10, TERRAIN_GROUND_MIDDLE, 282, 5, TERRAIN_GROUND_RIGHT, 283, 5],
        [10, 100, TERRAIN_GROUND_MIDDLE, 285, 1, TERRAIN_GROUND_LEFT, 282, 3, TERRAIN_GROUND_MIDDLE, 284, 3, TERRAIN_GROUND_RIGHT, 283, 3]
    ],
    [
        [10, 1, TERRAIN_GROUND_LEFT, 286, 1, TERRAIN_GROUND_MIDDLE, 286, 1, TERRAIN_GROUND_RIGHT, 286, 2],
        [10, 1, TERRAIN_GROUND_LEFT, 287, 1, TERRAIN_GROUND_MIDDLE, 287, 1, TERRAIN_GROUND_RIGHT, 287, 2],
        [10, 1, TERRAIN_GROUND_LEFT, 288, 1, TERRAIN_GROUND_MIDDLE, 288, 1, TERRAIN_GROUND_RIGHT, 288, 2],
        [10, 1, TERRAIN_GROUND, 286, 3, TERRAIN_GROUND, 287, 3],
        [10, 1, TERRAIN_GROUND, 287, 3, TERRAIN_GROUND, 288, 2],
        [10, 1, TERRAIN_GROUND, 288, 3, TERRAIN_GROUND, 286, 3],
        [10, 100, TERRAIN_GROUND_LEFT, 286, 1, TERRAIN_GROUND_MIDDLE, 287, 1, TERRAIN_GROUND_RIGHT, 288, 1, TERRAIN_GROUND, 289, 5]
    ],
    [
        [0, 0, TERRAIN_GROUND, 290, 0],
        [0, 100, TERRAIN_GROUND, 290, 0]
    ],
    [
        [10, 1, TERRAIN_AIR_WATER, 290, 60, TERRAIN_GROUND_MIDDLE, 291, 5],
        [10, 1, TERRAIN_AIR_WATER, 290, 60, TERRAIN_GROUND_MIDDLE, 292, 2],
        [10, 1, TERRAIN_AIR_WATER, 291, 60, TERRAIN_GROUND_MIDDLE, 292, 2],
        [10, 1, TERRAIN_AIR_WATER, 292, 10, TERRAIN_AIR_WATER, 290, 2, TERRAIN_AIR_WATER, 291, 2],
        [10, 100, TERRAIN_GROUND_MIDDLE, 293, 1, TERRAIN_AIR_WATER, 290, 1, TERRAIN_AIR_WATER, 291, 1, TERRAIN_AIR_WATER, 292, 1]
    ],
    [
        [11, 10, TERRAIN_GROUND, 294, 30, TERRAIN_GROUND_MIDDLE, 296, 1],
        [11, 10, TERRAIN_GROUND, 295, 30, TERRAIN_GROUND_MIDDLE, 296, 1],
        [11, 10, TERRAIN_GROUND_MIDDLE, 296, 1, TERRAIN_GROUND_RIGHT, 296, 1],
        [11, 10, TERRAIN_GROUND_MIDDLE, 294, 50, TERRAIN_GROUND_RIGHT, 295, 50],
        [11, 10, TERRAIN_GROUND_LEFT, 294, 20, TERRAIN_GROUND_MIDDLE, 295, 20, TERRAIN_GROUND_RIGHT, 296, 1],
        [11, 100, TERRAIN_GROUND_MIDDLE, 297, 1]
    ],
    [
        [11, 1, TERRAIN_GROUND_MIDDLE_CLUMP, 298, 100],
        [11, 1, TERRAIN_GROUND_MIDDLE_CLUMP, 299, 100],
        [11, 1, TERRAIN_GROUND_MIDDLE_CLUMP, 300, 100],
        [11, 100, TERRAIN_GROUND_LEFT_CLUMP, 298, 20, TERRAIN_GROUND_MIDDLE_CLUMP, 300, 20, TERRAIN_GROUND_RIGHT_CLUMP, 299, 20, TERRAIN_GROUND_RIGHT, 301, 1]
    ],
    [
        [11, 1, TERRAIN_GROUND_RIGHT, 302, 20, TERRAIN_GROUND_MIDDLE_CLUMP, 302, 20],
        [11, 1, TERRAIN_GROUND, 303, 40],
        [11, 1, TERRAIN_GROUND_RIGHT, 304, 20, TERRAIN_GROUND_MIDDLE_CLUMP, 304, 20],
        [11, 1, TERRAIN_GROUND_LEFT, 302, 15, TERRAIN_GROUND_MIDDLE, 304, 15, TERRAIN_GROUND_RIGHT, 303, 15],
        [11, 100, TERRAIN_GROUND_MIDDLE, 305, 1]
    ],
    [
        [11, 4, TERRAIN_WATER, 306, 10, TERRAIN_GROUND_MIDDLE, 307, 5],
        [11, 4, TERRAIN_WATER, 306, 30, TERRAIN_AIR, 308, 10],
        [11, 4, TERRAIN_GROUND, 307, 20, TERRAIN_AIR, 308, 10],
        [11, 4, TERRAIN_WATER, 306, 10, TERRAIN_GROUND_MIDDLE, 307, 5, TERRAIN_AIR, 308, 40],
        [11, 4, TERRAIN_WATER, 306, 30, TERRAIN_GROUND_MIDDLE, 307, 10, TERRAIN_AIR, 308, 5],
        [11, 101, TERRAIN_GROUND_MIDDLE, 309, 1, TERRAIN_AIR, 308, 10]
    ],
    [
        [11, 9, TERRAIN_GROUND_MIDDLE, 310, 10, TERRAIN_CEILING_MIDDLE, 311, 10, TERRAIN_WATER, 314, 1],
        [11, 9, TERRAIN_GROUND, 310, 30, TERRAIN_CEILING_MIDDLE, 311, 10, TERRAIN_GROUND_MIDDLE, 312, 1, TERRAIN_WATER, 314, 1],
        [11, 9, TERRAIN_GROUND_MIDDLE, 310, 10, TERRAIN_CEILING, 311, 30, TERRAIN_GROUND_MIDDLE, 312, 1, TERRAIN_WATER, 314, 1],
        [11, 9, TERRAIN_GROUND, 310, 30, TERRAIN_CEILING, 311, 30, TERRAIN_GROUND, 312, 2, TERRAIN_WATER, 314, 1],
        [11, 103, TERRAIN_GROUND, 312, 2, TERRAIN_GROUND_MIDDLE, 313, 1]
    ],
    [
        [11, 9, TERRAIN_GROUND_MIDDLE, 315, 10, TERRAIN_CEILING_MIDDLE, 316, 10, TERRAIN_WATER, 319, 1],
        [11, 9, TERRAIN_GROUND, 315, 30, TERRAIN_CEILING_MIDDLE, 316, 10, TERRAIN_GROUND_MIDDLE, 317, 1, TERRAIN_WATER, 319, 1],
        [11, 9, TERRAIN_GROUND_MIDDLE, 315, 20, TERRAIN_CEILING, 316, 20, TERRAIN_GROUND_MIDDLE, 317, 1, TERRAIN_WATER, 319, 1],
        [11, 9, TERRAIN_GROUND, 315, 40, TERRAIN_CEILING, 316, 15, TERRAIN_GROUND, 317, 2, TERRAIN_WATER, 319, 1],
        [11, 103, TERRAIN_GROUND_MIDDLE, 318, 1]
    ],
    [
        [10, 1, TERRAIN_GROUND_MIDDLE, 320, 50, TERRAIN_GROUND_RIGHT, 320, 50],
        [10, 1, TERRAIN_GROUND_RIGHT, 321, 5, TERRAIN_GROUND, 320, 20],
        [10, 1, TERRAIN_AIR_WATER, 322, 3, TERRAIN_GROUND, 320, 20],
        [10, 1, TERRAIN_AIR_WATER, 322, 2, TERRAIN_AIR_WATER, 321, 3, TERRAIN_GROUND, 320, 20],
        [10, 100, TERRAIN_AIR_WATER, 323, 1, TERRAIN_AIR_WATER, 322, 1, TERRAIN_GROUND_MIDDLE, 321, 1, TERRAIN_GROUND_MIDDLE, 320, 1]
    ],
    [
        [10, 11, TERRAIN_GROUND, 324, 10],
        [10, 11, TERRAIN_GROUND, 324, 50, TERRAIN_AIR_WATER, 325, 1],
        [10, 11, TERRAIN_GROUND, 324, 50, TERRAIN_AIR_WATER, 326, 1],
        [10, 11, TERRAIN_GROUND, 324, 50, TERRAIN_AIR_WATER, 325, 1, TERRAIN_AIR_WATER, 326, 1],
        [10, 100, TERRAIN_GROUND, 324, 50, TERRAIN_GROUND_RIGHT, 327, 1]
    ],
    [
        [1, 1, TERRAIN_GROUND_MIDDLE, 328, 10, TERRAIN_GROUND_RIGHT, 329, 1],
        [1, 1, TERRAIN_GROUND_LEFT, 328, 1, TERRAIN_GROUND_MIDDLE, 328, 15, TERRAIN_GROUND_RIGHT, 329, 1],
        [1, 1, TERRAIN_GROUND, 328, 15, TERRAIN_GROUND_LEFT, 330, 1, TERRAIN_GROUND_MIDDLE, 330, 1, TERRAIN_GROUND_RIGHT, 330, 1],
        [1, 1, TERRAIN_GROUND, 328, 15, TERRAIN_GROUND_LEFT, 329, 1, TERRAIN_GROUND_MIDDLE, 329, 1, TERRAIN_GROUND_RIGHT, 329, 1],
        [1, 1, TERRAIN_GROUND, 330, 5, TERRAIN_GROUND_LEFT, 329, 2, TERRAIN_GROUND_MIDDLE, 328, 10, TERRAIN_GROUND_RIGHT, 329, 2],
        [1, 100, TERRAIN_GROUND_MIDDLE, 331, 1, TERRAIN_GROUND, 329, 3]
    ],
    [
        [12, 100, TERRAIN_GROUND_MIDDLE, 332, 0],
        [12, 100, TERRAIN_GROUND_MIDDLE, 332, 1]
    ],
    [
        [7, 100, TERRAIN_GROUND_MIDDLE, 198, 1, TERRAIN_GROUND_MIDDLE, 202, 1, TERRAIN_GROUND_MIDDLE, 218, 1, TERRAIN_GROUND_MIDDLE, 222, 1],
        [7, 100, TERRAIN_GROUND_MIDDLE, 234, 1, TERRAIN_GROUND_MIDDLE, 238, 1, TERRAIN_GROUND_MIDDLE, 226, 1, TERRAIN_GROUND_RIGHT, 230, 1],
        [4, 100, TERRAIN_GROUND_MIDDLE, 206, 1, TERRAIN_AIR_WATER, 210, 1],
        [8, 100, TERRAIN_GROUND_MIDDLE, 242, 1, TERRAIN_GROUND_MIDDLE, 248, 1],
        [9, 100, TERRAIN_GROUND_MIDDLE, 267, 1, TERRAIN_AIR_WATER, 256, 1],
        [9, 100, TERRAIN_GROUND_MIDDLE, 259, 1, TERRAIN_GROUND_MIDDLE, 263, 1],
        [10, 100, TERRAIN_GROUND_MIDDLE, 273, 1, TERRAIN_GROUND_RIGHT, 277, 1, TERRAIN_GROUND_MIDDLE, 281, 1],
        [10, 100, TERRAIN_GROUND_MIDDLE, 285, 1, TERRAIN_GROUND, 289, 1, TERRAIN_GROUND_MIDDLE, 293, 1],
        [11, 100, TERRAIN_GROUND_MIDDLE, 297, 1, TERRAIN_GROUND_RIGHT, 301, 1, TERRAIN_GROUND_MIDDLE, 305, 1],
        [11, 101, TERRAIN_WATER, 252, 1, TERRAIN_WATER, 309, 1],
        [11, 103, TERRAIN_GROUND_MIDDLE, 313, 1, TERRAIN_GROUND_MIDDLE, 318, 1],
        [1, 100, TERRAIN_GROUND_LEFT, 323, 1, TERRAIN_GROUND_MIDDLE, 327, 1, TERRAIN_GROUND_RIGHT, 331, 1],
        [12, 100, TERRAIN_AIR_WATER, 338, 100]
    ],
    []
];
var SR_PROJECTILE = new SrProjectile;

/*
飛び道具のクラス的なやつ
*/
function SrProjectile() {
    var a;
    this.pj_is_from_enemy = new Int32Array(1E3);
    this.pj_position = Array(1E3);
    this.pj_velocity = Array(1E3);
    this.pj_is_dying = new Int32Array(1E3);
    this.pj_is_rotated = new Int32Array(1E3);
    this.pj_image = new Int32Array(1E3);
    this.pj_color = new Int32Array(1E3);
    this.pj_is_transparent = new Int32Array(1E3);
    this.pj_width = new Int32Array(1E3);
    this.pj_height = new Int32Array(1E3);
    this.pj_hit_width = new Int32Array(1E3);
    this.pj_hit_height = new Int32Array(1E3);
    this.pj_summon_delay = new Int32Array(1E3);
    this.pj_hit_delay = new Int32Array(1E3);
    this.pj_time = new Int32Array(1E3);
    this.pj_despawn_time = new Int32Array(1E3);
    this.pj_gravity = new Int32Array(1E3);
    this.pj_acceleration = new Int32Array(1E3);
    this.pj_pierce = new Int32Array(1E3);
    this.pj_bounce = new Int32Array(1E3);
    this.pj_homing = new Int32Array(1E3);
    this.pj_knockback = new Int32Array(1E3);
    this.pj_multiple_hit = new Int32Array(1E3);
    this.pj_min_at = new Int32Array(1E3);
    this.pj_max_at = new Int32Array(1E3);
    this.pj_type = new Int32Array(1E3);
    this.pj_type_value = new Int32Array(1E3);
    this.pj_residue_mode = new Int32Array(1E3);
    this.pj_residue_is_rotated = new Int32Array(1E3);
    this.pj_residue_image = new Int32Array(1E3);
    this.pj_residue_color = new Int32Array(1E3);
    this.pj_residue_is_transparent = new Int32Array(1E3);
    this.pj_residue_width = new Int32Array(1E3);
    this.pj_residue_height = new Int32Array(1E3);
    this.pj_residue_hit_width = new Int32Array(1E3);
    this.pj_residue_hit_height = new Int32Array(1E3);
    this.pj_residue_summon_delay = new Int32Array(1E3);
    this.pj_residue_hit_delay = new Int32Array(1E3);
    this.pj_residue_time = new Int32Array(1E3);
    this.pj_residue_despawn_time = new Int32Array(1E3);
    this.pj_residue_gravity = new Int32Array(1E3);
    this.pj_residue_acceleration = new Int32Array(1E3);
    this.pj_residue_pierce = new Int32Array(1E3);
    this.pj_residue_bounce = new Int32Array(1E3);
    this.pj_residue_multiple_hit = new Int32Array(1E3);
    this.pj_residue_min_at = new Int32Array(1E3);
    this.pj_residue_max_at = new Int32Array(1E3);
    this.pj_residue_count = new Int32Array(1E3);
    this.pj_residue_type = new Int32Array(1E3);
    this.pj_residue_type_value = new Int32Array(1E3);
    for (a = this.pj_last_index = 0; 1E3 > a; a++) {
        this.pj_position[a] = new SrVec2;
    }
    for (a = 0; 1E3 > a; a++) {
        this.pj_velocity[a] = new SrVec2
    }
}

/*
飛び道具のリセット
*/
SrProjectile.prototype.pjReset = function () {
    this.pj_last_index = 0
};

/*
飛び道具の追加
*/
SrProjectile.prototype.pjAdd = function (a, b, c, d, e, g, h, q, m, l, A, z, Z, B, S, ia, za, ta, X, T, Y, Ua, eb, Va, ua, pa, Ha, rb, Aa, ka, ab, Pa, Wa, Ca, yb, Hb, Ib, Jb, Kb, Lb, Mb, Nb, Ob, Pb, Qb, sb, Rb, Sb, Tb, Ub, Vb) {
    if (1E3 != this.pj_last_index) {
        this.pj_is_from_enemy[this.pj_last_index] = a;
        setVec2(this.pj_position[this.pj_last_index], b, c);
        setVec2(this.pj_velocity[this.pj_last_index], d, e);
        this.pj_is_dying[this.pj_last_index] = 0;
        this.pj_is_rotated[this.pj_last_index] = g;
        this.pj_image[this.pj_last_index] = h;
        this.pj_color[this.pj_last_index] = q;
        this.pj_is_transparent[this.pj_last_index] = m;
        this.pj_width[this.pj_last_index] = l;
        this.pj_height[this.pj_last_index] = A;
        this.pj_hit_width[this.pj_last_index] = z;
        this.pj_hit_height[this.pj_last_index] = Z;
        this.pj_summon_delay[this.pj_last_index] = srFloor(srRandom(B));
        this.pj_hit_delay[this.pj_last_index] = S;
        this.pj_time[this.pj_last_index] = ia;
        this.pj_despawn_time[this.pj_last_index] = za;
        this.pj_gravity[this.pj_last_index] = ta;
        this.pj_acceleration[this.pj_last_index] = X;
        this.pj_pierce[this.pj_last_index] = T;
        this.pj_bounce[this.pj_last_index] = Y;
        this.pj_homing[this.pj_last_index] = Ua;
        this.pj_knockback[this.pj_last_index] = eb;
        this.pj_multiple_hit[this.pj_last_index] = Va;
        this.pj_min_at[this.pj_last_index] = ua;
        this.pj_max_at[this.pj_last_index] = pa;
        this.pj_type[this.pj_last_index] = Ha;
        this.pj_type_value[this.pj_last_index] = rb;
        this.pj_residue_mode[this.pj_last_index] = Aa;
        this.pj_residue_is_rotated[this.pj_last_index] = ka;
        this.pj_residue_image[this.pj_last_index] = ab;
        this.pj_residue_color[this.pj_last_index] = Pa;
        this.pj_residue_is_transparent[this.pj_last_index] = Wa;
        this.pj_residue_width[this.pj_last_index] = Ca;
        this.pj_residue_height[this.pj_last_index] = yb;
        this.pj_residue_hit_width[this.pj_last_index] = Hb;
        this.pj_residue_hit_height[this.pj_last_index] = Ib;
        this.pj_residue_summon_delay[this.pj_last_index] = Jb;
        this.pj_residue_hit_delay[this.pj_last_index] = Kb;
        this.pj_residue_time[this.pj_last_index] = Lb;
        this.pj_residue_despawn_time[this.pj_last_index] = Mb;
        this.pj_residue_gravity[this.pj_last_index] = Nb;
        this.pj_residue_acceleration[this.pj_last_index] = Ob;
        this.pj_residue_pierce[this.pj_last_index] = Pb;
        this.pj_residue_bounce[this.pj_last_index] = Qb;
        this.pj_residue_multiple_hit[this.pj_last_index] = sb;
        this.pj_residue_min_at[this.pj_last_index] = Rb;
        this.pj_residue_max_at[this.pj_last_index] = Sb;
        this.pj_residue_count[this.pj_last_index] = Tb;
        this.pj_residue_type[this.pj_last_index] = Ub;
        this.pj_residue_type_value[this.pj_last_index] = Vb;
        this.pj_last_index++
    }
};

/*
飛び道具の削除
a:SrProjectile
*/
function PjSub(a, b) {
    a.pj_is_from_enemy[b] = a.pj_is_from_enemy[a.pj_last_index - 1];
    a.pj_position[b].vecSet(a.pj_position[a.pj_last_index - 1]);
    a.pj_velocity[b].vecSet(a.pj_velocity[a.pj_last_index - 1]);
    a.pj_is_dying[b] = a.pj_is_dying[a.pj_last_index - 1];
    a.pj_is_rotated[b] = a.pj_is_rotated[a.pj_last_index - 1];
    a.pj_image[b] = a.pj_image[a.pj_last_index - 1];
    a.pj_color[b] = a.pj_color[a.pj_last_index - 1];
    a.pj_is_transparent[b] = a.pj_is_transparent[a.pj_last_index - 1];
    a.pj_width[b] = a.pj_width[a.pj_last_index - 1];
    a.pj_height[b] = a.pj_height[a.pj_last_index - 1];
    a.pj_hit_width[b] = a.pj_hit_width[a.pj_last_index - 1];
    a.pj_hit_height[b] = a.pj_hit_height[a.pj_last_index - 1];
    a.pj_summon_delay[b] = a.pj_summon_delay[a.pj_last_index - 1];
    a.pj_hit_delay[b] = a.pj_hit_delay[a.pj_last_index - 1];
    a.pj_time[b] = a.pj_time[a.pj_last_index - 1];
    a.pj_despawn_time[b] = a.pj_despawn_time[a.pj_last_index - 1];
    a.pj_gravity[b] = a.pj_gravity[a.pj_last_index - 1];
    a.pj_acceleration[b] = a.pj_acceleration[a.pj_last_index - 1];
    a.pj_pierce[b] = a.pj_pierce[a.pj_last_index - 1];
    a.pj_bounce[b] = a.pj_bounce[a.pj_last_index - 1];
    a.pj_homing[b] = a.pj_homing[a.pj_last_index - 1];
    a.pj_knockback[b] = a.pj_knockback[a.pj_last_index - 1];
    a.pj_multiple_hit[b] = a.pj_multiple_hit[a.pj_last_index - 1];
    a.pj_min_at[b] = a.pj_min_at[a.pj_last_index - 1];
    a.pj_max_at[b] = a.pj_max_at[a.pj_last_index - 1];
    a.pj_type[b] = a.pj_type[a.pj_last_index - 1];
    a.pj_type_value[b] = a.pj_type_value[a.pj_last_index - 1];
    a.pj_residue_mode[b] = a.pj_residue_mode[a.pj_last_index - 1];
    a.pj_residue_is_rotated[b] = a.pj_residue_is_rotated[a.pj_last_index - 1];
    a.pj_residue_image[b] = a.pj_residue_image[a.pj_last_index - 1];
    a.pj_residue_color[b] = a.pj_residue_color[a.pj_last_index - 1];
    a.pj_residue_is_transparent[b] = a.pj_residue_is_transparent[a.pj_last_index - 1];
    a.pj_residue_width[b] = a.pj_residue_width[a.pj_last_index - 1];
    a.pj_residue_height[b] = a.pj_residue_height[a.pj_last_index - 1];
    a.pj_residue_hit_width[b] = a.pj_residue_hit_width[a.pj_last_index - 1];
    a.pj_residue_hit_height[b] = a.pj_residue_hit_height[a.pj_last_index - 1];
    a.pj_residue_summon_delay[b] = a.pj_residue_summon_delay[a.pj_last_index - 1];
    a.pj_residue_hit_delay[b] = a.pj_residue_hit_delay[a.pj_last_index - 1];
    a.pj_residue_time[b] = a.pj_residue_time[a.pj_last_index - 1];
    a.pj_residue_despawn_time[b] = a.pj_residue_despawn_time[a.pj_last_index - 1];
    a.pj_residue_gravity[b] = a.pj_residue_gravity[a.pj_last_index - 1];
    a.pj_residue_acceleration[b] = a.pj_residue_acceleration[a.pj_last_index - 1];
    a.pj_residue_pierce[b] = a.pj_residue_pierce[a.pj_last_index - 1];
    a.pj_residue_bounce[b] = a.pj_residue_bounce[a.pj_last_index - 1];
    a.pj_residue_multiple_hit[b] = a.pj_residue_multiple_hit[a.pj_last_index - 1];
    a.pj_residue_min_at[b] = a.pj_residue_min_at[a.pj_last_index - 1];
    a.pj_residue_max_at[b] = a.pj_residue_max_at[a.pj_last_index - 1];
    a.pj_residue_count[b] = a.pj_residue_count[a.pj_last_index - 1];
    a.pj_residue_type[b] = a.pj_residue_type[a.pj_last_index - 1];
    a.pj_residue_type_value[b] = a.pj_residue_type_value[a.pj_last_index - 1];
    a.pj_last_index--
}

/*
メインの動き
*/
function PjMain() {
    var a = SR_PROJECTILE;
    var b;
    var c;
    var d = new SrVec2;
    var e;
    var g;
    for (b = 0; b < a.pj_last_index; b++) {
        if (-64 > a.pj_position[b].x || 576 < a.pj_position[b].x) {
            PjSub(a, b--);
        } else if (0 < a.pj_summon_delay[b]) {
            a.pj_summon_delay[b]--;
        } else {
            if (1 == a.pj_is_dying[b]) {
                a.pj_time[b]++;
                if (a.pj_time[b] >= a.pj_despawn_time[b]) {
                    PjSub(a, b--);
                }
            } else {
                if (0 < a.pj_homing[b]) {
                    e = a.pj_homing[b];
                    if (a.pj_is_from_enemy[b]) {
                        if (1 != GameMode) {
                            e = plFindPlayer(a.pj_position[b].x - e, a.pj_position[b].y - e, a.pj_position[b].x + e, a.pj_position[b].y + e, 0);
                        } else {
                            e = plFindPlayer(a.pj_position[b].x - e, a.pj_position[b].y - e, a.pj_position[b].x + e, a.pj_position[b].y + e, 1 - a.pj_is_from_enemy[b] << 2);
                        }
                    } else {
                        if (1 != GameMode) {
                            e = findEnemy(a.pj_position[b].x - e, a.pj_position[b].y - e, a.pj_position[b].x + e, a.pj_position[b].y + e);
                        } else {
                            e = plFindPlayer(a.pj_position[b].x - e, a.pj_position[b].y - e, a.pj_position[b].x + e, a.pj_position[b].y + e, 1 - a.pj_is_from_enemy[b] << 2);
                        }
                    }
                    if (-1 != e) {
                        if (a.pj_is_from_enemy[b]) {
                            if (1 != GameMode) {
                                setDistance(d, SR_PLAYER.pl_current_joint[e][0], a.pj_position[b]);
                            } else {
                                setDistance(d, SR_PLAYER.pl_current_joint[e][0], a.pj_position[b]);
                            }
                        } else {
                            if (1 != GameMode) {
                                setDistance(d, SR_ENEMY.en_current_joint[e][0], a.pj_position[b]);
                            } else {
                                setDistance(d, SR_PLAYER.pl_current_joint[e][0], a.pj_position[b]);
                            }
                        }
                        normalize(d);
                        e = magnitudeOf(a.pj_velocity[b]);
                        a.pj_velocity[b].x = .85 * a.pj_velocity[b].x + .15 * d.x + srRandomRange(-.1, .1);
                        a.pj_velocity[b].y = .85 * a.pj_velocity[b].y + .15 * d.y + srRandomRange(-.1, .1);
                        normalize(a.pj_velocity[b]);
                        scaleVec2(a.pj_velocity[b], srMax(e, 1));
                    }
                }
                a.pj_velocity[b].y += .01 * a.pj_gravity[b];
                scaleVec2(a.pj_velocity[b], .01 * a.pj_acceleration[b]);
                e = a;
                g = b;
                c = d;
                var h = 0;
                c.vecSet(e.pj_velocity[g]);
                var q = srFloor(magnitudeOf(c) / 4) + 1;
                scaleVec2(c, 1 / q);
                var m;
                var l;
                var A;
                //当たり判定かな
                for (var z = 0; z < q; z++) {
                    m = e.pj_position[g].y + c.y;
                    l = srFloor(srClampA(e.pj_position[g].x, 0, 511) / 8);
                    A = srFloor(srClampA(m, 0, 255) / 8);
                    l = SR_TERRAIN.tr_data[A][l];
                    if (0 > l || 8 < l || e.pj_pierce[g]) {
                        e.pj_position[g].y = m;
                    } else if (e.pj_bounce[g]) {
                        if (2 == e.pj_bounce[g]) {
                            c.y *= -1;
                            e.pj_velocity[g].y *= -1;
                        }
                    } else {
                        h = 1;
                    }
                    m = e.pj_position[g].x + c.x;
                    l = srFloor(srClampA(m, 0, 511) / 8);
                    A = srFloor(srClampA(e.pj_position[g].y, 0, 255) / 8);
                    l = SR_TERRAIN.tr_data[A][l];
                    if (0 <= l && 8 >= l && !e.pj_pierce[g]) {
                        if (!e.pj_bounce[g] || 1 == e.pj_bounce[g]) {
                            h = 1;
                        }
                        if (2 == e.pj_bounce[g]) {
                            c.x *= -1;
                            e.pj_velocity[g].x *= -1;
                        }
                    } else {
                        e.pj_position[g].x = m;
                    }
                }
                e = h;
                c = 1;
                if (1 == a.pj_type[b] && a.pj_type_value[b] && srRandom(1E3) > a.pj_type_value[b]) {
                    c = 0;
                }
                if (0 < a.pj_hit_delay[b]) {
                    a.pj_hit_delay[b]--;
                    c = 0;
                }
                g = -1;
                if (1 == c) {
                    if (a.pj_is_from_enemy[b]) {
                        if (1 != GameMode) {
                            g = plGetDamage(a.pj_multiple_hit[b], a.pj_type[b], a.pj_type_value[b], a.pj_min_at[b], a.pj_max_at[b], a.pj_position[b].x, a.pj_position[b].y, a.pj_hit_width[b], a.pj_hit_height[b], 0);
                        } else {
                            g = plGetDamage(a.pj_multiple_hit[b], a.pj_type[b], a.pj_type_value[b], a.pj_min_at[b], a.pj_max_at[b], a.pj_position[b].x, a.pj_position[b].y, a.pj_hit_width[b], a.pj_hit_height[b], 1 - a.pj_is_from_enemy[b] << 2);
                        }
                    } else {
                        if (1 != GameMode) {
                            g = enGetDamage(a.pj_multiple_hit[b], a.pj_type[b], a.pj_type_value[b], a.pj_min_at[b], a.pj_max_at[b], a.pj_position[b].x, a.pj_position[b].y, a.pj_hit_width[b], a.pj_hit_height[b]);
                        } else {
                            g = plGetDamage(a.pj_multiple_hit[b], a.pj_type[b], a.pj_type_value[b], a.pj_min_at[b], a.pj_max_at[b], a.pj_position[b].x, a.pj_position[b].y, a.pj_hit_width[b], a.pj_hit_height[b], 1 - a.pj_is_from_enemy[b] << 2);
                        }
                    }
                }
                if (-1 != g && a.pj_knockback[b]) {
                    if (a.pj_is_from_enemy[b]) {
                        if (1 != GameMode) {
                            setDistance(d, SR_PLAYER.pl_current_joint[g][0], a.pj_position[b]);
                        } else {
                            setDistance(d, SR_PLAYER.pl_current_joint[g][0], a.pj_position[b]);
                        }
                    } else {
                        if (1 != GameMode) {
                            setDistance(d, SR_ENEMY.en_current_joint[g][0], a.pj_position[b]);
                        } else {
                            setDistance(d, SR_PLAYER.pl_current_joint[g][0], a.pj_position[b]);
                        }
                    }
                    normalize(d);
                    scaleVec2(d, .1 * a.pj_knockback[b]);
                    if (1 == GameMode || a.pj_is_from_enemy[b]) {
                        scaleVec2(d, .1);
                    } else {
                        scaleVec2(d, ENEMY_KNOCKBACK_VAR[ENEMY_DATA[SR_ENEMY.en_id[g]][ENEMY_TYPE]] / ENEMY_DATA[SR_ENEMY.en_id[g]][ENEMY_SIZE]);
                    }
                    if (a.pj_is_from_enemy[b]) {
                        if (1 != GameMode) {
                            //vecSub
                            SR_PLAYER.pl_last_joint[g][0].vecSub(d);
                            a.pj_knockback[b] = 0;
                        } else {
                            //vecSub
                            SR_PLAYER.pl_last_joint[g][0].vecSub(d);
                            a.pj_knockback[b] = 0;
                        }
                    } else {
                        if (1 != GameMode) {
                            //vecSub
                            SR_ENEMY.en_last_joint[g][0].vecSub(d);
                            a.pj_knockback[b] = 0;
                        } else {
                            //vecSub
                            SR_PLAYER.pl_last_joint[g][0].vecSub(d);
                            a.pj_knockback[b] = 0;
                        }
                    }
                }
                if (1 == a.pj_type[b] && a.pj_type_value[b]) {
                    g = -1;
                }
                if (1 == e || -1 != g) {
                    a.pj_is_dying[b] = 1;
                    a.pj_time[b] = 0;
                    if (1 == a.pj_residue_mode[b] || 3 == a.pj_residue_mode[b] || 4 == a.pj_residue_mode[b] || 5 == a.pj_residue_mode[b] || 6 == a.pj_residue_mode[b] || 7 == a.pj_residue_mode[b] || 8 == a.pj_residue_mode[b] || 9 == a.pj_residue_mode[b]) {
                        h = srFloor(srRandom(512));
                        for (c = 0; c < a.pj_residue_count[b]; c++) {
                            if (1 == a.pj_residue_mode[b]) {
                                setVec2(d, 0, 0);
                            } else if (3 == a.pj_residue_mode[b]) {
                                h = srFloor(srRandom(512));
                                q = srRandomRange(.05, .1);
                                d.x = a.pj_residue_count[b] * AngleArray[h][0] * q;
                                d.y = a.pj_residue_count[b] * AngleArray[h][1] * q;
                            } else if (4 == a.pj_residue_mode[b]) {
                                d.x = srRandomRange(.1 * -a.pj_residue_count[b], .1 * a.pj_residue_count[b]);
                                d.y = srRandomRange(.2 * -a.pj_residue_count[b], .1 * -a.pj_residue_count[b]);
                            } else if (5 == a.pj_residue_mode[b]) {
                                d.x = a.pj_velocity[b].x;
                                d.y = a.pj_velocity[b].y;
                            } else if (6 == a.pj_residue_mode[b]) {
                                d.x = srRandomRange(.01 * -a.pj_residue_count[b], .01 * a.pj_residue_count[b]);
                                d.y = srRandomRange(.2 * -a.pj_residue_count[b], .05 * -a.pj_residue_count[b]);
                            } else if (7 == a.pj_residue_mode[b]) {
                                q = srFloor(h + 512 * c / a.pj_residue_count[b]) & 511;
                                d.x = a.pj_residue_count[b] * AngleArray[q][0];
                                d.y = a.pj_residue_count[b] * AngleArray[q][1];
                            } else if (8 == a.pj_residue_mode[b]) {
                                h = srFloor(srRandom(512));
                                q = srRandomRange(0, .1);
                                d.x = a.pj_residue_count[b] * AngleArray[h][0] * q;
                                d.y = a.pj_residue_count[b] * AngleArray[h][1] * q;
                            } else if (9 == a.pj_residue_mode[b]) {
                                d.x = a.pj_velocity[b].x;
                                d.y = a.pj_velocity[b].y;
                                normalize(d);
                            }
                            SR_PROJECTILE.pjAdd(a.pj_is_from_enemy[b], a.pj_position[b].x, a.pj_position[b].y, d.x, d.y, a.pj_residue_is_rotated[b], a.pj_residue_image[b], a.pj_residue_color[b], a.pj_residue_is_transparent[b], a.pj_residue_width[b], a.pj_residue_height[b], a.pj_residue_hit_width[b], a.pj_residue_hit_height[b], a.pj_residue_summon_delay[b], a.pj_residue_hit_delay[b], a.pj_residue_time[b], a.pj_residue_despawn_time[b], a.pj_residue_gravity[b], a.pj_residue_acceleration[b], a.pj_residue_pierce[b], a.pj_residue_bounce[b], 0, 0, a.pj_residue_multiple_hit[b], a.pj_residue_min_at[b], a.pj_residue_max_at[b], a.pj_residue_type[b], a.pj_residue_type_value[b], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                        }
                    }
                }
                if (0 < a.pj_time[b]) {
                    a.pj_time[b]--;
                }
                if (!a.pj_time[b]) {
                    a.pj_is_dying[b] = 1;
                }
                if (2 == a.pj_residue_mode[b] && (srRandom(100) < a.pj_residue_count[b] || 1 == e || -1 != g)) {
                    d.x = srRandomRange(-1, 1);
                    d.y = srRandomRange(-1, 1);
                    SR_PROJECTILE.pjAdd(a.pj_is_from_enemy[b], a.pj_position[b].x, a.pj_position[b].y, d.x, d.y, a.pj_residue_is_rotated[b], a.pj_residue_image[b], a.pj_residue_color[b], a.pj_residue_is_transparent[b], a.pj_residue_width[b], a.pj_residue_height[b], a.pj_residue_hit_width[b], a.pj_residue_hit_height[b], a.pj_residue_summon_delay[b], a.pj_residue_hit_delay[b], a.pj_residue_time[b], a.pj_residue_despawn_time[b], a.pj_residue_gravity[b], a.pj_residue_acceleration[b], a.pj_residue_pierce[b], a.pj_residue_bounce[b], 0, 0, a.pj_residue_multiple_hit[b], a.pj_residue_min_at[b], a.pj_residue_max_at[b], a.pj_residue_type[b], a.pj_residue_type_value[b], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                }
            }
        }
    }
}

/*
飛び道具描く
*/
function PjDraw() {
    var a = SR_PROJECTILE;
    var b;
    var c;
    var d;
    var e = new SrVec2;
    var g = new SrVec2;
    var h = new SrVec2;
    var q = new SrVec2;
    for (b = 0; b < a.pj_last_index; b++) {
        if (0 >= a.pj_summon_delay[b]) {
            c = 16 * a.pj_image[b];
            if (1 == a.pj_is_dying[b]) {
                d = srFloor((a.pj_color[b] >> 24 & 255) * (a.pj_despawn_time[b] - a.pj_time[b]) / a.pj_despawn_time[b]) << 24 | a.pj_color[b] & 16777215;
            } else {
                d = a.pj_color[b];
            }
            if (0 < a.pj_hit_delay[b]) {
                d = srFloor((d >> 24 & 255) / 2) << 24 | d & 16777215;
            }
            DisplayMode1 = a.pj_is_transparent[b];
            DisplayMode2 = 1;
            //debug draw
            //textOutputM(SMALL_TEXT,srFloor(a.pj_position[b].x), srFloor(a.pj_position[b].y-30)," "+a.pj_residue_type[b],255,255,255,32,255,255,255,128,5,7);
            //当たり判定
            //frameRectCentered(a.pj_position[b].x,a.pj_position[b].y,a.pj_hit_width[b],a.pj_hit_height[b],256*256*256*256-1);
            //
            if (!a.pj_is_rotated[b]) {
                drawFromImageCentered(ProjectileImage, srFloor(a.pj_position[b].x), srFloor(a.pj_position[b].y), a.pj_width[b], a.pj_height[b], c, 0, 16, 16, d);
            } else {
                g.vecSet(a.pj_velocity[b]);
                e.vecSet(g);
                setPerpendicular(e);
                normalize(e);
                normalize(g);
                scaleVec2(e, a.pj_width[b] >> 1);
                scaleVec2(g, a.pj_height[b] >> 1);
                setDistance(h, g, e);
                setSumVec2(q, g, e);
                var m = a.pj_position[b].x + h.x;
                var l = a.pj_position[b].y + h.y;
                var A = c;
                var z = a.pj_position[b].x + q.x;
                var Z = a.pj_position[b].y + q.y;
                var B = c + 16;
                var S = a.pj_position[b].x - h.x;
                var ia = a.pj_position[b].y - h.y;
                var za = c + 16;
                var ta = a.pj_position[b].x - q.x;
                var X = a.pj_position[b].y - q.y;
                var T = c;
                var Y = 0;
                var Ua = 0;
                var eb = 16;
                var Va = 16;
                c = ProjectileImage;
                m = m << 16;
                l = l << 16;
                z = z << 16;
                Z = Z << 16;
                S = S << 16;
                ia = ia << 16;
                ta = ta << 16;
                X = X << 16;
                A = 65535 * A;
                Y = 65535 * Y;
                B = 65535 * B;
                Ua = 65535 * Ua;
                za = 65535 * za;
                eb = 65535 * eb;
                T = 65535 * T;
                Va = 65535 * Va;
                var ua;
                var pa;
                pa = 25165824;
                var Ha = 0;
                if (pa > l) {
                    pa = l;
                }
                if (pa > Z) {
                    pa = Z;
                }
                if (pa > ia) {
                    pa = ia;
                }
                if (pa > X) {
                    pa = X;
                }
                if (Ha < l) {
                    Ha = l;
                }
                if (Ha < Z) {
                    Ha = Z;
                }
                if (Ha < ia) {
                    Ha = ia;
                }
                if (Ha < X) {
                    Ha = X;
                }
                pa >>= 16;
                Ha >>= 16;
                if (0 > pa) {
                    pa = 0;
                }
                if (384 <= Ha) {
                    Ha = 383;
                }
                for (ua = pa; ua <= Ha; ua++) {
                    CanvasSub1[ua] = 512;
                    CanvasSub2[ua] = -1;
                }
                drawRotation(m, l, A, Y, z, Z, B, Ua);
                drawRotation(z, Z, B, Ua, S, ia, za, eb);
                drawRotation(S, ia, za, eb, ta, X, T, Va);
                drawRotation(ta, X, T, Va, m, l, A, Y);
                z = d >> 24 & 255;
                m = d >> 16 & 255;
                l = d >> 8 & 255;
                A = d & 255;
                for (ua = pa; ua <= Ha; ua++) {
                    //for (pa = 512 * ua + CanvasSub1[ua], B = CanvasSub2[ua] - CanvasSub1[ua] + 1, Z = (CanvasSub4[ua] - CanvasSub3[ua]) / B, za = (CanvasSub6[ua] - CanvasSub5[ua]) / B, S = CanvasSub3[ua], ia = CanvasSub5[ua], B = CanvasSub1[ua]; B <= CanvasSub2[ua]; B++, pa++, S += Z, ia += za) {
                    //0 > B || 512 <= B || (T = c.l[(ia >> 16) * c.m + (S >> 16)], DisplayMode2 ? (T = z * (T & 255) >> 8) && (GameCanvas[pa] = colorBlend(GameCanvas[pa], d, T)) : -1 != T && (ta = m * ((T & 16711680) >> 16) >> 8, X = l * ((T & 65280) >> 8) >> 8, T = A * (T & 255) >> 8, GameCanvas[pa] = Ce ? colorBlend(GameCanvas[pa], ta << 16 | X << 8 | T, z) : ta << 16 | X << 8 | T))
                    //}
                    pa = 512 * ua + CanvasSub1[ua];
                    B = CanvasSub2[ua] - CanvasSub1[ua] + 1;
                    Z = (CanvasSub4[ua] - CanvasSub3[ua]) / B;
                    za = (CanvasSub6[ua] - CanvasSub5[ua]) / B;
                    S = CanvasSub3[ua];
                    ia = CanvasSub5[ua];
                    B = CanvasSub1[ua];
                    while (B <= CanvasSub2[ua]) {
                        if (0 <= B && 512 > B) {
                            //im.l im.m
                            T = c.im_array[(ia >> 16) * c.im_array_width + (S >> 16)];
                            if (DisplayMode2) {
                                T = z * (T & 255) >> 8
                                if (T) {
                                    GameCanvas[pa] = colorBlend(GameCanvas[pa], d, T)
                                }
                            } else if (-1 != T) {
                                ta = m * ((T & 16711680) >> 16) >> 8;
                                X = l * ((T & 65280) >> 8) >> 8;
                                T = A * (T & 255) >> 8;
                                if (DisplayMode1) {
                                    GameCanvas[pa] = colorBlend(GameCanvas[pa], ta << 16 | X << 8 | T, z)
                                } else {
                                    GameCanvas[pa] = ta << 16 | X << 8 | T
                                }
                            }
                        }
                        B++;
                        pa++;
                        S += Z;
                        ia += za;
                    }
                }
            }
            DisplayMode2 = DisplayMode1 = 0
        }
    }
}

var SR_INDICATOR = new SrIndicator;

/*
ダメージエフェクトのクラス的な
*/
function SrIndicator() {
    var a;
    this.in_position = Array(1E3);
    this.in_velocity = Array(1E3);
    this.in_value = new Int32Array(1E3);
    this.in_color = new Int32Array(1E3);
    this.in_fade_time = new Int32Array(1E3);
    for (a = this.in_last_index = 0; 1E3 > a; a++) {
        this.in_position[a] = new SrVec2;
    }
    for (a = 0; 1E3 > a; a++) {
        this.in_velocity[a] = new SrVec2
    }
}

/*
ダメージエフェクト初期化
*/
SrIndicator.prototype.inReset = function () {
    this.in_last_index = 0
};

/*
ダメージエフェクト追加
*/
SrIndicator.prototype.inAdd = function (a, b, c, d, e) {
    if (1E3 != this.in_last_index) {
        a = srClampA(a, 16, 495);
        b = srClampA(b, 8, 247);
        setVec2(this.in_position[this.in_last_index], a, b);
        setVec2(this.in_velocity[this.in_last_index], c, -2);
        if (0 != c) {
            this.in_velocity[this.in_last_index].x += srRandomRange(-.2, .2);
            this.in_velocity[this.in_last_index].y += srRandomRange(-.2, .2);
        }
        this.in_value[this.in_last_index] = d;
        this.in_color[this.in_last_index] = e;
        this.in_fade_time[this.in_last_index] = 0;
        this.in_last_index++
    }
};

/*
ダメージエフェクト削除
*/
SrIndicator.prototype.inDelete = function (a) {
    this.in_position[a].vecSet(this.in_position[this.in_last_index - 1]);
    this.in_velocity[a].vecSet(this.in_velocity[this.in_last_index - 1]);
    this.in_value[a] = this.in_value[this.in_last_index - 1];
    this.in_color[a] = this.in_color[this.in_last_index - 1];
    this.in_fade_time[a] = this.in_fade_time[this.in_last_index - 1];
    this.in_last_index--
};

/*
ダメージエフェクトメイン
*/
function InMain() {
    var a = SR_INDICATOR;
    var b;
    for (b = 0; b < a.in_last_index; b++) {
        if (0 == a.in_velocity[b].x) {
            var c = a.in_position[b];
            var d = a.in_velocity[b];
            d.y += 0;
            scaleVec2(d, .96)
        } else {
            c = a.in_position[b];
            d = a.in_velocity[b];
            d.y += .05;
            scaleVec2(d, .99);
        }
        //vecAdd
        c.vecAdd(d);
        a.in_position[b].x = srClampA(a.in_position[b].x, 16, 495);
        a.in_position[b].y = srClampA(a.in_position[b].y, 8, 247);
        a.in_fade_time[b]++;
        if (100 <= a.in_fade_time[b]) {
            a.inDelete(b--)
        }
    }
}

/*
ダメージエフェクト描く
*/
function InDraw() {
    var a = SR_INDICATOR;
    var b;
    var c;
    var d;
    var e;
    var g;
    for (b = 0; b < a.in_last_index; b++) {
        //
        //textOutputM(SMALL_TEXT,srFloor(a.in_position[b].x), srFloor(a.in_position[b].y)," "+a.in_velocity[b].y,255,255,255,32,255,255,255,128,5,7);
        //textOutputB(SMALL_TEXT,srFloor(a.in_position[b].x), srFloor(a.in_position[b].y)," "+a.in_velocity[b].y,255,0,0,32,255,0,0,128,5,7);

        //
        c = a.in_color[b] >> 16 & 255;
        d = a.in_color[b] >> 8 & 255;
        e = a.in_color[b] & 255;
        g = srFloor(255 * srMin(100 - a.in_fade_time[b], 50) / 50);
        showTextCenter(SMALL_TEXT, srFloor(a.in_position[b].x), srFloor(a.in_position[b].y), "" + a.in_value[b], c, d, e, g, 0, 0, 0, g, 5, 7)
    }
}

var SR_DROP = new SrDrop;

/*
ドロップアイテムのクラス的な
*/
function SrDrop() {
    var a;
    this.dp_position = Array(100);
    this.dp_velocity = Array(100);
    this.dp_id = new Int32Array(100);
    this.dp_sub_data1 = new Int32Array(100);
    this.dp_sub_data2 = new Int32Array(100);
    this.dp_hit_delay = new Int32Array(100);
    for (a = this.dp_anti_cheat_value = this.dp_last_index = 0; 100 > a; a++) {
        this.dp_position[a] = new SrVec2;
    }
    for (a = 0; 100 > a; a++) {
        this.dp_velocity[a] = new SrVec2
    }
}

/*
ドロップアイテム初期化
*/
SrDrop.prototype.dpReset = function () {
    this.dp_anti_cheat_value = this.dp_last_index = 0
};

/*
ドロップアイテム追加
*/
SrDrop.prototype.dpAdd = function (a, b, c, d, e) {
    if (100 != this.dp_last_index) {
        a = srClampA(a, 16, 495);
        b = srClampA(b, 8, 247);
        setVec2(this.dp_position[this.dp_last_index], a, b);
        if (MouseX1 < a) {
            this.dp_velocity[this.dp_last_index].x = srRandomRange(-.5, -1);
        } else {
            this.dp_velocity[this.dp_last_index].x = srRandomRange(.5, 1);
        }
        this.dp_velocity[this.dp_last_index].y = srRandomRange(-1, -2);
        this.dp_id[this.dp_last_index] = c;
        this.dp_sub_data1[this.dp_last_index] = d;
        this.dp_sub_data2[this.dp_last_index] = e;
        this.dp_hit_delay[this.dp_last_index] = 0;
        this.dp_last_index++;
        for (c = this.dp_anti_cheat_value = 0; c < this.dp_last_index; c++) {
            this.dp_anti_cheat_value += 7 * this.dp_id[c] + 3 * this.dp_sub_data1[c] + 11 * this.dp_sub_data2[c]
        }
    }
};

/*
ドロップアイテム削除
*/
SrDrop.prototype.dpDelete = function (a) {
    this.dp_position[a].vecSet(this.dp_position[this.dp_last_index - 1]);
    this.dp_velocity[a].vecSet(this.dp_velocity[this.dp_last_index - 1]);
    this.dp_id[a] = this.dp_id[this.dp_last_index - 1];
    this.dp_sub_data1[a] = this.dp_sub_data1[this.dp_last_index - 1];
    this.dp_sub_data2[a] = this.dp_sub_data2[this.dp_last_index - 1];
    this.dp_hit_delay[a] = this.dp_hit_delay[this.dp_last_index - 1];
    this.dp_last_index--;
    for (a = this.dp_anti_cheat_value = 0; a < this.dp_last_index; a++) {
        this.dp_anti_cheat_value += 7 * this.dp_id[a] + 3 * this.dp_sub_data1[a] + 11 * this.dp_sub_data2[a]
    }
};

/*
ドロップアイテムメイン
*/
function DpMain() {
    var a = SR_DROP;
    var b;
    var c;
    for (b = c = 0; b < a.dp_last_index; b++) {
        c += 7 * a.dp_id[b] + 3 * a.dp_sub_data1[b] + 11 * a.dp_sub_data2[b];
    }
    if (a.dp_anti_cheat_value != c) {
        game_cheated++;//GameCanvas = null;
    }
    for (b = 0; b < a.dp_last_index; b++) {
        //

        //
        a.dp_velocity[b].y += .04;
        scaleVec2(a.dp_velocity[b], .98);
        var d;
        var e;
        c = srClampA(a.dp_position[b].y + a.dp_velocity[b].y, 8, 247);
        d = srFloor(a.dp_position[b].x / 8);
        e = srFloor(c / 8);
        d = SR_TERRAIN.tr_data[e][d];
        if (0 > d || 8 < d) {
            a.dp_position[b].y = c;
        }
        c = srClampA(a.dp_position[b].x + a.dp_velocity[b].x, 16, 495);
        d = srFloor(c / 8);
        e = srFloor(a.dp_position[b].y / 8);
        d = SR_TERRAIN.tr_data[e][d];
        if (0 > d || 8 < d) {
            a.dp_position[b].x = c;
        }
        if (100 > a.dp_hit_delay[b]) {
            a.dp_hit_delay[b]++;
        } else {
            c = plFindPlayer(a.dp_position[b].x - 12, a.dp_position[b].y - 6 - 12, a.dp_position[b].x + 12, a.dp_position[b].y - 6 + 12, 0)
            if (-1 != c) {
                antiCheatCheck();
                if (1 == a.dp_id[b]) {
                    PartyGold = srClampA(PartyGold + a.dp_sub_data1[b], 0, 9999999);
                    SR_INDICATOR.inAdd(a.dp_position[b].x, a.dp_position[b].y, 0, a.dp_sub_data1[b], 16776960);
                } else if (2 == a.dp_id[b]) {
                    //おにぎりの優先順位の処理
                    for (d = 0; 4 > d; d++) {
                        if (0 != SR_PLAYER.pl_is_found[d] && srFloor(100 * PlayerCurrentLp[c] / PlayerMaxLp[c]) > srFloor(100 * PlayerCurrentLp[d] / PlayerMaxLp[d])) {
                            c = d;
                        }
                    }
                    if (PlayerCurrentLp[c] == PlayerMaxLp[c]) {
                        continue;
                    }
                    antiCheatCheck();
                    PlayerCurrentLp[c] = srClampA(PlayerCurrentLp[c] + srFloor(PlayerMaxLp[c] / 5), 0, PlayerMaxLp[c]);
                    antiCheatSet();
                    SR_INDICATOR.inAdd(a.dp_position[b].x, a.dp_position[b].y, 0, srFloor(PlayerMaxLp[c] / 5), 65280)
                } else {
                    for (c = 16; 40 > c; c++) {
                        if (0 == InventoryItem[c]) {
                            InventoryItem[c] = a.dp_id[b];
                            InventoryCompo1[c] = a.dp_sub_data1[b];
                            InventoryCompo2[c] = a.dp_sub_data2[b];
                            break
                        }
                    }
                    if (40 == c) {
                        a.dp_velocity[b].x = srRandomRange(-1, 1);
                        a.dp_velocity[b].y = srRandomRange(-1, -2);
                        a.dp_hit_delay[b] = 0;
                        continue
                    }
                }
                antiCheatSet();
                a.dpDelete(b--)
            }
        }
    }
}

/*
ドロップアイテム描く
*/
function DpDraw() {
    var a = SR_DROP;
    var b;
    DisplayMode2 = 2;
    for (b = 0; b < a.dp_last_index; b++) {
        if (100 == a.dp_hit_delay[b] || a.dp_hit_delay[b] & 6) {
            drawFromImage(SmallItemImage, srFloor(a.dp_position[b].x) - 6, srFloor(a.dp_position[b].y) - 12, 12, 12, 12 * getItemData(a.dp_id[b], 3), 0, 12, 12, getItemData(a.dp_id[b], 6));
        }
        //
        //consoleLog(a.f);
        //showTextTopLeft(LARGE_TEXT,a.dp_position[b].x,a.dp_position[b].y,"abcdefg",255,255,255,255,255,255,255,32,20,20);
        //
    }
    DisplayMode2 = 0
    //showTextSolidTopLeft(LARGE_TEXT,10,10,"abc",16777215,0);
}

var SR_TERRAIN = new SrTerrain;

/*
地形のクラス的な
*/
function SrTerrain() {
    this.tr_width = 64;
    this.tr_height = 48;
    this.tr_data = Array(this.tr_height);
    this.tr_low_surface = new Int32Array(this.tr_width);
    this.tr_high_surface = new Int32Array(this.tr_width);
    this.tr_cavern_top = new Int32Array(this.tr_width);
    this.tr_water_surface = new Int32Array(this.tr_width);
    this.tr_water_can_spawn_location = new Int32Array(48 * this.tr_height);
    this.tr_stage_id = this.tr_water_can_spawn_location_count = 0;
    this.tr_image_resource = -1;
    for (var a = 0; a < this.tr_height; a++) {
        this.tr_data[a] = new Int32Array(this.tr_width)
    }
}

/*
地形セット
*/
SrTerrain.prototype.trSet = function (a) {
    var b, c;
    this.tr_stage_id = a;
    if (this.tr_image_resource != STAGE_DATA[this.tr_stage_id][CurrentArea][1]) {
        this.tr_image_resource = STAGE_DATA[this.tr_stage_id][CurrentArea][1];
        StageTerrainImage = new SrImage;
        StageTerrainImage.imSet("st" + this.tr_image_resource + ".gif");
    }
    imageToArray(StageTerrainImage);
    if (ImageCounter) {
        return !1;
    }
    this.tr_height = StageTerrainImage.im_array_height;
    for (c = 0; c < this.tr_height; c++) {
        for (b = 0; b < this.tr_width; b++) {
            this.tr_data[c][b] = -1;
        }
    }
    //im.m
    var d = srFloor(srRandom(StageTerrainImage.im_array_width - 64));
    for (c = 0; c < this.tr_height; c++) {
        for (b = 0; b < this.tr_width; b++) {
            a = c * StageTerrainImage.im_array_width + srClampA(b, 3, 60) + d;
            var e;
            if (3 >= b || this.tr_width - 3 <= b) {
                //im.l
                e = StageTerrainImage.im_array[a];
            } else {
                e = StageTerrainImage.im_array[a - 1];
            }
            var g;
            if (2 >= b || this.tr_width - 4 <= b) {
                g = StageTerrainImage.im_array[a];
            } else {
                g = StageTerrainImage.im_array[a + 1];
            }
            var h;
            if (c) {
                //im.l im.m
                h = StageTerrainImage.im_array[a - StageTerrainImage.im_array_width];
            } else {
                h = StageTerrainImage.im_array[a];
            }
            var q;
            if (c == this.tr_height - 1) {
                //im.l
                q = StageTerrainImage.im_array[a];
            } else {
                q = StageTerrainImage.im_array[a + StageTerrainImage.im_array_width];
            }
            if (0 != StageTerrainImage.im_array[a]) {
                if (255 == StageTerrainImage.im_array[a]) {
                    this.tr_data[c][b] = 9
                }
                //im.a
            } else if (0 != e && 0 == g && 0 != h && 0 == q) {
                this.tr_data[c][b] = 0
            } else if (0 == e && 0 == g && 0 != h && 0 == q) {
                this.tr_data[c][b] = 1
            } else if (0 == e && 0 != g && 0 != h && 0 == q) {
                this.tr_data[c][b] = 2
            } else if (0 != e && 0 == g && 0 == h && 0 == q) {
                this.tr_data[c][b] = 3
            } else if (0 == e && 0 == g && 0 == h && 0 == q) {
                this.tr_data[c][b] = 4
            } else if (0 == e && 0 != g && 0 == h && 0 == q) {
                this.tr_data[c][b] = 5
            } else if (0 != e && 0 == g && 0 == h && 0 != q) {
                this.tr_data[c][b] = 6
            } else if (0 == e && 0 == g && 0 == h && 0 != q) {
                this.tr_data[c][b] = 7
            } else if (0 == e && 0 != g && 0 == h && 0 != q) {
                this.tr_data[c][b] = 8
            }
        }
    }
    for (b = 0; b < this.tr_width; b++) {
        for (c = this.tr_height - 1; 0 <= c; c--) {
            if (0 > this.tr_data[c][b] || 8 < this.tr_data[c][b]) {
                this.tr_low_surface[b] = c;
                break
            }
        }
    }
    for (b = 0; b < this.tr_width; b++) {
        for (c = 1; c < this.tr_height; c++) {
            if ((0 > this.tr_data[c - 1][b] || 8 < this.tr_data[c - 1][b]) && 0 <= this.tr_data[c][b] && 8 >= this.tr_data[c][b]) {
                this.tr_high_surface[b] = c - 1;
                break
            }
        }
    }
    for (b = 0; b < this.tr_width; b++) {
        for (c = 0; c < this.tr_height; c++) {
            if (0 > this.tr_data[c][b] || 8 < this.tr_data[c][b]) {
                this.tr_cavern_top[b] = c;
                break
            }
        }
    }

    for (b = 0; b < this.tr_width; b++) {
        for (this.tr_water_surface[b] = this.tr_cavern_top[b], c = 1; c < this.tr_height; c++) {
            if ((0 > this.tr_data[c - 1][b] || 8 < this.tr_data[c - 1][b]) && 0 <= this.tr_data[c][b] && 9 >= this.tr_data[c][b]) {
                this.tr_water_surface[b] = c - 1;
                break
            }
        }
    }
    this.tr_water_can_spawn_location_count = 0;

    for (b = 12; 60 > b; b++) {
        for (c = 1; c < this.tr_height - 1; c++) {
            if (9 == this.tr_data[c - 1][b] && 9 == this.tr_data[c][b]) {
                this.tr_water_can_spawn_location[this.tr_water_can_spawn_location_count++] = c * this.tr_width + b;
            }
        }
    }
    if (!CurrentArea) {
        for (a = 0; 196608 > a; a++) {
            //im.l
            StageEffectCanvasImage.im_array[a] = 0;
        }
        b = GameCanvas;
        switch (this.tr_stage_id) {
            case 15:
            case 16:
            case 30:
            case 31:
            case 32:
            case 33:
            case 66:
            case 67:
            case 68:
            case 69:
                DisplayMode1 = 1;
                DisplayMode2 = 3;
                //im.l
                GameCanvas = StageEffectCanvasImage.im_array;
                for (a = 0; 196608 > a; a++) {
                    GameCanvas[a] = 0;
                }
                for (a = 0; 100 > a; a++) {
                    c = srRandomRange(1.7, 3.69);
                    c = c * c * c * c;
                    drawFromImageCentered(ProjectileImage, srFloor(srRandomRange(0, 512)), srFloor(256 - c), 256, 32, 96, 0, 16, 16, 419430399);
                }
                GameCanvas = b;
                DisplayMode1 = DisplayMode2 = 0
        }
    }
    return !0
};

/*
地形描く
*/
function TrDraw() {
    var a = SR_TERRAIN;
    var b;
    var c;
    var d = new Int32Array([0, 8, 16, 0, 8, 16, 0, 8, 16]);
    var e = new Int32Array([0, 0, 0, 8, 8, 8, 16, 16, 16]);
    var g = TerrainTextureImageArray[STAGE_DATA[a.tr_stage_id][CurrentArea][0]];
    for (c = 0; c < a.tr_height; c++) {
        for (b = 0; b < a.tr_width; b++) {
            var h = a.tr_data[c][b];
            if (-1 != h) {
                if (9 != h) {
                    drawItem(g, 8 * b, 8 * c, 8, 8, d[h], e[h], 8, 8)
                } else if (82 == a.tr_stage_id) {
                    if (-1 == a.tr_data[c - 1][b]) {
                        drawItem(BloodImage, 8 * b, 8 * c, 8, 8, 0, 0, 8, 8)
                    } else {
                        BackGroundFill(8 * b - 4, 8 * c, 16, 8, 5570560)
                    }
                } else {
                    if (-1 == a.tr_data[c - 1][b]) {
                        drawItem(WaterImage, 8 * b, 8 * c, 8, 8, 0, 0, 8, 8)
                    } else {
                        BackGroundFill(8 * b - 4, 8 * c, 16, 8, 21916)
                    }
                }
            }
        }
    }
    //
    //for (b = 0; b < SR_TERRAIN.i; b++) {
        //for (var bb = 0; bb < a.tr_width; bb++) {
            //showTextSolidTopLeft(LARGE_TEXT,b*8,a.tr_low_surface[b]*8,"b",16777215,10000000)
            //showTextSolidTopLeft(LARGE_TEXT,b*8,a.tr_high_surface[b]*8,"g",16777215,10000000)
            //showTextSolidTopLeft(LARGE_TEXT,b*8,a.tr_cavern_top[b]*8,"h",16777215,10000000)
            //showTextSolidTopLeft(LARGE_TEXT,b*8,a.tr_water_surface[b]*8,"u",16777215,10000000)
        //d = srFloor(srRandom(SR_TERRAIN.i));
        //showTextSolidTopLeft(LARGE_TEXT, (a.tr_water_can_spawn_location[b]&63) * 8, srFloor(a.tr_water_can_spawn_location[b]/64) * 8, "A", 16777215, 10000000)
        //}
    //}
    //
}

var SR_WORLD_MAP = new SrWorldMap;

/*
ワールドマップのクラス的な
*/
function SrWorldMap() {
    this.mp_width = 78;
    this.mp_scroll_x = 0;
    this.mp_tile = Array(16);
    this.mp_symbol = Array(16);
    for (var a = 0; 16 > a; a++) {
        this.mp_tile[a] = new Int32Array(this.mp_width);
        this.mp_symbol[a] = new Int32Array(this.mp_width)
    }
}

/*
マップのセット
*/
SrWorldMap.prototype.mpSet = function () {
    var a;
    var b;
    var c;
    for (c = 0; 16 > c; c++) {
        for (b = 0; b < this.mp_width; b++) {
            this.mp_tile[c][b] = -1;
        }
    }
    for (c = 0; 16 > c; c++) {
        for (b = 0; b < this.mp_width; b++) {
            a = c * MapElevationImage.im_array_width + b;
            var d;
            if (b) {
                d = -1;
            } else {
                d = 0;
            }
            var e;
            if (b == this.mp_width - 1) {
                e = 0;
            } else {
                e = 1;
            }
            var g;
            if (c) {
                g = -this.mp_width;
            } else {
                g = 0;
            }
            var h;
            if (15 == c) {
                h = 0;
            } else {
                h = this.mp_width;
            }
            //im.l
            var q = MapElevationImage.im_array[a + d + g];
            var m = MapElevationImage.im_array[a + g];
            g = MapElevationImage.im_array[a + e + g];
            var l = MapElevationImage.im_array[a + d];
            var A = MapElevationImage.im_array[a + e];
            d = MapElevationImage.im_array[a + d + h];
            var z = MapElevationImage.im_array[a + h];
            e = MapElevationImage.im_array[a + e + h];
            if (65535 == MapImage.im_array[a]) {
                this.mp_tile[c][b] = 15
            } else if (6684672 == MapImage.im_array[a]) {
                this.mp_tile[c][b] = 17
            } else if (0 != MapElevationImage.im_array[a]) {
                if (13209 == MapElevationImage.im_array[a]) {
                    this.mp_tile[c][b] = 13
                } else if (16764006 == MapImage.im_array[a]) {
                    this.mp_tile[c][b] = 14
                } else if (6710886 == MapImage.im_array[a]) {
                    this.mp_tile[c][b] = 16
                } else {
                    a = MapElevationImage.im_array[a];
                    if (m >= a && l >= a && A >= a && z >= a && e < a) {
                        this.mp_tile[c][b] = 3
                    } else if (m >= a && l >= a && A >= a && z >= a && d < a) {
                        this.mp_tile[c][b] = 4
                    } else if (m >= a && l >= a && A >= a && z >= a && g < a) {
                        this.mp_tile[c][b] = 8
                    } else if (m >= a && l >= a && A >= a && z >= a && q < a) {
                        this.mp_tile[c][b] = 9
                    } else if (l < a && A >= a && m < a && z >= a) {
                        this.mp_tile[c][b] = 0
                    } else if (l >= a && A >= a && m < a && z >= a) {
                        this.mp_tile[c][b] = 1
                    } else if (l >= a && A < a && m < a && z >= a) {
                        this.mp_tile[c][b] = 2
                    } else if (l < a && A >= a && m >= a && z >= a) {
                        this.mp_tile[c][b] = 5
                    } else if (l >= a && A < a && m >= a && z >= a) {
                        this.mp_tile[c][b] = 7
                    } else if (l < a && A >= a && m >= a && z < a) {
                        this.mp_tile[c][b] = 10
                    } else if (l >= a && A >= a && m >= a && z < a) {
                        this.mp_tile[c][b] = 11
                    } else if (l >= a && A < a && m >= a && z < a) {
                        this.mp_tile[c][b] = 12
                    }
                }
            }
        }
    }
    for (c = 0; 16 > c; c++) {
        for (b = 0; b < this.mp_width; b++) {
            //im.m
            a = c * MapImage.im_array_width + b;
            this.mp_symbol[c][b] = -1;
            if (26112 == MapImage.im_array[a]) {
                this.mp_symbol[c][b] = 0
            } else if (10066329 == MapImage.im_array[a]) {
                this.mp_symbol[c][b] = 1
            } else if (8404992 == MapImage.im_array[a]) {
                this.mp_symbol[c][b] = 2
            } else if (13434879 == MapImage.im_array[a]) {
                this.mp_symbol[c][b] = 5
            } else if (12288 == MapImage.im_array[a]) {
                this.mp_symbol[c][b] = 6
            }
        }
    }
};

var DOCUMENT = document;
var CV = DOCUMENT.getElementById("cv");
var CTX = CV.getContext("2d");
var MY_IMAGE_DATA = CTX.createImageData(512, 384);
var Bit8Color = new Uint32Array(MY_IMAGE_DATA.data.buffer);
var CONSOLE = WINDOW.console;
var FROM_CHAR_CODE = String.fromCharCode;
var TIMEOUT = setTimeout;
//var LocationHostName=location.hostname;
var LocationHostName = "dan-ball.jp";

//WINDOW.fff = cvPutImageData;

/*
画像貼り付け
*/
function cvPutImageData(a, b, c) {
    try {
        CV = DOCUMENT.getElementById("cv");
        CTX = CV.getContext("2d");
        CTX.putImageData(a, b, c)
    } catch (d) {
    }
}

//WINDOW.fff = consoleLog;

/*
console.log(a)
*/
function consoleLog(a) {
    try {
        CONSOLE.log(a)
    } catch (b) {
    }
}

WINDOW.Init = startGame;
//(C) 2008 ha55ii DAN-BALL.jp
var CHAR_COPYRIGHT1 = FROM_CHAR_CODE(40, 67, 41, 32, 50, 48, 48, 56, 32, 104, 97, 53, 53, 105, 105, 32, 68, 65, 78, 45, 66, 65, 76, 76, 46, 106, 112);
//Copyright (C) 2008 ha55ii DAN-BALL.jp
var CHAR_COPYRIGHT2 = FROM_CHAR_CODE(67, 111, 112, 121, 114, 105, 103, 104, 116, 32, 40, 67, 41, 32, 50, 48, 48, 56, 32, 104, 97, 53, 53, 105, 105, 32, 68, 65, 78, 45, 66, 65, 76, 76, 46, 106, 112);
//./data/
var CHAR_DATA_PATH = FROM_CHAR_CODE(46, 47, 100, 97, 116, 97, 47);
//fps
FROM_CHAR_CODE(102, 112, 115);
//canvas
var CHAR_CANVAS = FROM_CHAR_CODE(99, 97, 110, 118, 97, 115);
//2d
var CHAR_2D = FROM_CHAR_CODE(50, 100);
var HostLength = 0;
//dan-ball.jp
var CHAR_DAN_BALL_JP = FROM_CHAR_CODE(100, 97, 110, 45, 98, 97, 108, 108, 46, 106, 112);
var GameCanvas = new Int32Array(196608);
var CanvasSub1 = new Int32Array(384);
var CanvasSub2 = new Int32Array(384);
var CanvasSub3 = new Float32Array(384);
var CanvasSub4 = new Float32Array(384);
var CanvasSub5 = new Float32Array(384);
var CanvasSub6 = new Float32Array(384);

/*
メインループはここ
*/
function mainSequence() {
    if (AnimationFrame) {
        //AnimationFrameは不明
        //fps修正とか?
        AnimationFrame(mainSequence);
        AnimationFrameCounter++;
        TimeCurrent = Date.now();
        //時間調節mod custom_fps (60)
        let custom_fps = DOCUMENT.getElementById("custom_fps").value;
        var a = srFloor(custom_fps * (TimeCurrent - TimePrevious) / 1E3 + .5);
        if (0 > a || custom_fps <= a) {
            FrameCounter = AnimationFrameCounter = 0;
            TimePrevious = TimeCurrent;
            a = 0;
        } else if (a == PreviousGameTickPassed) {
            return;
        }
        FrameCounter++;
        PreviousGameTickPassed = a
    }
    Clicked = 0 == LeftClickWasDown && 1 == LeftClickIsDown;
    Released = 1 == LeftClickWasDown && 0 == LeftClickIsDown;
    RightClickClicked = 0 == RightClickWasDown && 1 == RightClickIsDown;
    RightClickReleased = 1 == RightClickWasDown && 0 == RightClickIsDown;
    LeftClickWasDown = LeftClickIsDown;
    RightClickWasDown = RightClickIsDown;
    LeftClickIsUp = !(Released | LeftClickWasDown | RightClickReleased | RightClickWasDown);
    if (Clicked) {
        MouseChanged = 1;
    } else if (RightClickClicked) {
        MouseChanged = -1;
    } else {
        MouseChanged = 0;
    }
    if (LeftClickIsDown) {
        LeftClickDownTime++;
    } else {
        LeftClickDownTime = 0;
    }
    MouseX1 = MouseX2;
    MouseY1 = MouseY2;
    for (a = 0; 256 > a; a++) {
        IsKeyPressed[a] = IsKey2[a];
        IsKey2[a] = !1;
    }
    //乱数をランダムにする
    RandomVar1 = RandomVar1 + srFloor(1024 * Math.random()) & 1023;
    RandomVar2 = srFloor(512 * Math.random()) | 1;
    //RandomVar2=256;たまたまこうなると乱数が壊れそうで怖い(多分大したことないけど)
    //これはチート用に追加した繰り返し
    let multiple_move = DOCUMENT.getElementById("multiple_move").value;
    for (let ii = 0; ii < multiple_move; ii++) {
        playSequence();
    }
    //for (var b = 11 == HostLength ? 196608 : 0, a = 0; a < b; a++) og[a] = 4278190080 | (GameCanvas[a] & 255) << 16 | GameCanvas[a] & 65280 | GameCanvas[a] >> 16 & 255;
    if (11 == HostLength) {
        for (var b = 196608, a = 0; a < b; a++) {
            //青 緑 赤
            //赤 緑 青
            //入れ替わってる!?
            //不透明
            Bit8Color[a] = 4278190080 | (GameCanvas[a] & 255) << 16 | GameCanvas[a] & 65280 | GameCanvas[a] >> 16 & 255;
            //半透明()()()
            //Bit8Color[a] = 2130706432 | (GameCanvas[a] & 255) << 16 | GameCanvas[a] & 65280 | GameCanvas[a] >> 16 & 255;
            //色ずらす
            //Bit8Color[a] = 4278190080 | (GameCanvas[a-3] & 255) << 16 | GameCanvas[a+3] & 65280 | GameCanvas[a] >> 16 & 255;
        }
    } else {
        //ホストの文字数が合わないとき(なにもしない)
        // for (b = 0, a = 0; a < b; a++) {
        //     Bit8Color[a] = 4278190080 | (GameCanvas[a] & 255) << 16 | GameCanvas[a] & 65280 | GameCanvas[a] >> 16 & 255;
        // }
    }
    cvPutImageData(MY_IMAGE_DATA, 0, 0);
    //console.log(AnimationFrame);
    AnimationFrame || TIMEOUT(mainSequence, getNextTime())
}

var HostChecked = 1;

/*
dan-ball.jpかどうかを調べる
が、ホスト変数は別で代入してるので問題ナシ
*/
function checkHost() {
    if (LocationHostName.length != CHAR_DAN_BALL_JP.length) {
        return !0;
    }
    for (HostChecked = 0; HostLength < LocationHostName.length; HostLength++) {
        if (LocationHostName[HostLength] != CHAR_DAN_BALL_JP[HostLength]) {
            return !0;
        }
    }
    return !1
}

var AnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;
//AnimationFrame=null;
var AnimationFrameCounter = 0;
var PreviousGameTickPassed = 0;
var FrameCounter = 0;
var TIME_INCREMENT1 = 20;
var TimeCurrent = Date.now();
var TimePrevious = TimeCurrent;
var TimeNext = TimeCurrent + TIME_INCREMENT1;
var TimeMin = TimeCurrent;
var TimeDesertHaze = 0;

/*
フレームレート調節用
*/
function getNextTime() {
    TimeCurrent = Date.now();
    var a = srClampA(TimeNext - TimeCurrent, 5, TIME_INCREMENT1);
    FrameCounter++;
    TimeDesertHaze++;
    TimeNext += TIME_INCREMENT1;
    if (TimeCurrent + a >= TimeMin || TimeCurrent < TimePrevious) {
        FrameCounter = 0;
        TimeNext = TimeCurrent + TIME_INCREMENT1;
        TimeMin = TimeCurrent + 1E3;
    }
    TimePrevious = TimeCurrent;
    return a
}

var ImageCounter = 0;

/*
画像クラス的な
*/
function SrImage() {
    //im.b
    this.im_image = 0;
    //im.i
    this.im_name = "";
    //im.j f h a g l c m
    this.im_font = this.im_ctx = this.im_cv = this.im_text_width = this.im_what = this.im_array = this.im_array_height = this.im_array_width = 0
}

/*
配列作る
*/
function createNewPixelArray(a, b, c) {
    //im.m
    //im.c
    a.im_array_width = b;
    a.im_array_height = c;
    for (b = 0; 16 > b; b++) {
        //なにこれ
    }
    //im.l
    a.im_array = new Int32Array(a.im_array_width * a.im_array_height)
}

/*
画像セット
*/
SrImage.prototype.imSet = function (a) {
    //im.i
    if (this.im_name != a) {
        ImageCounter++;
        this.im_name = a;
        //im.b
        this.im_image = new Image;
        this.im_image.src = CHAR_DATA_PATH + a + "?18.9";
        //im.l
        delete this.im_array;
        //im.g l
        this.im_what = this.im_array = 0
    }
};

/*
画像データを配列にする
SrImage.im_arrayを作る
*/
function imageToArray(a) {
    //im.g im.b.complete
    if (!a.im_what && a.im_image.complete) {
        ImageCounter--;
        //im.b.
        var b = a.im_image.width;
        var c = a.im_image.height;
        if (!b || !c) {
            delete a.im_image;
            a.im_name = "";
            throw CHAR_ERROR;
            //throw delete a.b, a.i = "", CHAR_ERROR;
        }
        var d = DOCUMENT.createElement(CHAR_CANVAS);
        d.width = b;
        d.height = c;
        d = d.getContext(CHAR_2D);
        d.drawImage(a.im_image, 0, 0);
        d = d.getImageData(0, 0, b, c).data;
        createNewPixelArray(a, b, c);
        b = 0;
        for (c = d.length; b < c; b += 4) {
            if (0 == d[b + 3]) {
                //透明色
                //im.l
                a.im_array[b >> 2] = -1;
            } else {
                a.im_array[b >> 2] = d[b + 0] << 16 | d[b + 1] << 8 | d[b + 2];
            }
        }
        //im.b g
        delete a.im_image;
        a.im_what = 1
    }
}

function drawVsMessage(a, b) {
    //im.g
    if (!a.im_what) {
        a.im_what = 1;
        createNewPixelArray(a, 512, 16);
        //im.h
        a.im_cv = DOCUMENT.createElement(CHAR_CANVAS);
        //im.m c
        a.im_cv.width = a.im_array_width;
        a.im_cv.height = a.im_array_height;
        //im.f
        a.im_ctx = a.im_cv.getContext(CHAR_2D);
    }
    var c = b + "sans-serif014";
    //im.j
    if (a.im_font != c) {
        a.im_font = c;
        //im.f
        a.im_ctx.fillStyle = "#000000";
        //im.m c
        a.im_ctx.fillRect(0, 0, a.im_array_width, a.im_array_height);
        a.im_ctx.font = "14px sans-serif";
        a.im_ctx.fillStyle = "#ffffff";
        a.im_ctx.fillText(b, 0, 14);
        var d = a.im_ctx.getImageData(0, 0, a.im_array_width, a.im_array_height).data
        for (var c = 0, e = d.length; c < e; c += 4) {
            if (1 <= d[c + 0]) {
                //im.l
                a.im_array[c >> 2] = 16777215;
            } else {
                a.im_array[c >> 2] = -1;
            }
        }
        //im.a c m l a a
        for (c = d = a.im_text_width = 0; d < a.im_array_height; d++) {
            for (e = 0; e < a.im_array_width; e++, c++) {
                if (16777215 == a.im_array[c] && a.im_text_width<= e) {
                    a.im_text_width = e + 1
                }
            }
        }
    }
}

var PVP_TEXT_SPACES = [[0, 2, 0, 0, 1, 0, 0, 2, 2, 1, 1, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 3, 1, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]];
var PVE_TEXT_SPACES = [[0, 1, 1, 0, 0, 0, 0, 2, 1, 2, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]];
var LARGE_TEXT = new SrText;
var SMALL_TEXT = new SrText;

/*
テキストのクラス的な
*/
function SrText() {
    //tx.f
    this.tx_image = new SrImage;
    //tx.a b g c
    this.tx_start_pos = this.tx_spacing = this.tx_height = this.tx_width = 0
}

/*
テキストのセット
*/
SrText.prototype.txSet = function (a, b, c) {
    //tx.f c g a b
    this.tx_image.imSet(a);
    this.tx_width = b;
    this.tx_height = c;
    this.tx_start_pos = this.tx_spacing = 0
};

/*
テキスト
a:SrText
*/
function showTextSolidTopLeft(a, b, c, d, e, g) {
    var h;
    var q;
    var m;
    var l;
    var A;
    var z;
    var Z;
    //tx.c
    var B = 512 - a.tx_width;
    //tx.f.m tx.c
    var S = a.tx_image.im_array_width - a.tx_width;
    var ia;
    if (-1 < e) {
        ia = 16777215;
    } else {
        ia = 1;
    }
    var za;
    if (-1 < g) {
        za = 0;
    } else {
        za = 1;
    }
    var ta = d.length;
    //tx.c b
    for (h = 0; h < ta; h++, b += a.tx_width + a.tx_spacing) {
        A = d.charCodeAt(h) - 32
        if (A) {
            if (96 <= A) {
                A = 31;
            }
            //tx.a
            if (0 != a.tx_start_pos) {
                b -= PVP_TEXT_SPACES[a.tx_start_pos - 1][A];
            }
            //tx.c
            z = A * a.tx_width;
            l = 512 * c + b;
            //tx.g c
            for (m = 0; m < a.tx_height; m++, l += B, z += S) {
                for (q = 0; q < a.tx_width; q++, l++, z++) {
                    //tx.f.l[z]
                    Z = a.tx_image.im_array[z];
                    if (Z == ia) {
                        GameCanvas[l] = e;
                    } else if (Z == za) {
                        GameCanvas[l] = g;
                    }
                }
            }
            //tx.a
            if (0 != a.tx_start_pos) {
                b -= PVE_TEXT_SPACES[a.tx_start_pos - 1][A]
            }
        }
    }
    a.tx_start_pos = 0
}

/*
中央テキスト
a:SrText
*/
function showTextSolidCenter(a, b, c, d, e, g) {
    //tx.c b g
    b -= d.length * (a.tx_width + a.tx_spacing) >> 1;
    c -= a.tx_height >> 1;
    showTextSolidTopLeft(a, b, c, d, e, g)
}

/*
テキスト
*/
function showTextSolidSpacingTopLeft(a, b, c, d, e, g) {
    var h = LARGE_TEXT;
    //tx.b
    h.tx_spacing = g;
    showTextSolidTopLeft(h, a, b, c, d, e);
    h.tx_spacing = 0
}

/*
テキスト
a:SrText
*/
function showTextTopLeft(a, b, c, d, e, g, h, q, m, l, A, z, Z, B) {
    e = e * q >> 8;
    g = g * q >> 8;
    h = h * q >> 8;
    q = 255 - q;
    m = m * z >> 8;
    l = l * z >> 8;
    A = A * z >> 8;
    z = 255 - z;
    var S;
    var ia;
    var za;
    var ta;
    var X;
    var T;
    var Y;
    var Ua;
    var eb;
    var Va = 512 - Z;
    var ua;
    if (255 != q) {
        ua = 16777215;
    } else {
        ua = 1;
    }
    var pa;
    if (255 != z) {
        pa = 0;
    } else {
        pa = 1;
    }
    var Ha = d.length;
    //tx.b
    for (S = 0; S < Ha; S++, b += Z + a.tx_spacing) {
        X = d.charCodeAt(S) - 32
        if (X) {
            if (96 <= X) {
                X = 31;
            }
            //tx.a
            if (0 != a.tx_start_pos) {
                b -= srFloor(PVP_TEXT_SPACES[a.tx_start_pos - 1][X] * Z / a.tx_width);
            }
            //tx.c
            T = X * a.tx_width;
            ta = 512 * c + b;
            for (za = 0; za < B; za++, ta += Va) {
                //tx.g tx.f.m tx.c
                for (Ua = srFloor(za * a.tx_height / B) * a.tx_image.im_array_width + T << 8, eb = srFloor((a.tx_width << 8) / Z), ia = 0; ia < Z; ia++, ta++, Ua += eb) {
                    //tx.f.l
                    Y = a.tx_image.im_array[Ua >> 8];
                    if (Y == ua) {
                        Y = GameCanvas[ta];
                        GameCanvas[ta] = e + ((Y >> 16 & 255) * q >> 8) << 16 | g + ((Y >> 8 & 255) * q >> 8) << 8 | h + ((Y & 255) * q >> 8);
                    } else if (Y == pa) {
                        Y = GameCanvas[ta];
                        GameCanvas[ta] = m + ((Y >> 16 & 255) * z >> 8) << 16 | l + ((Y >> 8 & 255) * z >> 8) << 8 | A + ((Y & 255) * z >> 8);
                    }
                }
            }
            //tx.a c
            if (0 != a.tx_start_pos) {
                b -= srFloor(PVE_TEXT_SPACES[a.tx_start_pos - 1][X] * Z / a.tx_width)
            }
        }
    }
    //tx.a
    a.tx_start_pos = 0
}

/*
テキスト
*/
function showTextCenter(a, b, c, d, e, g, h, q, m, l, A, z, Z, B) {
    //tx.b
    b -= d.length * (Z + a.tx_spacing) >> 1;
    showTextTopLeft(a, b, c - (B >> 1), d, e, g, h, q, m, l, A, z, Z, B)
}

/*
フェードインフェードアウト
*/
function screenTransition(a) {
    var b;
    var c;
    var d;
    var e;
    var g;
    b = 196608;
    for (c = 0; c < b; c++) {
        d = GameCanvas[c] >> 16 & 255;
        e = ((0 - d) * a >> 8) + d;
        d = GameCanvas[c] >> 8 & 255;
        g = ((0 - d) * a >> 8) + d;
        d = GameCanvas[c] & 255;
        d = ((0 - d) * a >> 8) + d;
        GameCanvas[c] = e << 16 | g << 8 | d
    }
}

var DisplayMode1 = 0;

function colorBlend(a, b, c) {
    var d = DisplayMode1;
    var e = 0;
    var g = 0;
    var h = 0;
    if (1 == d) {
        d = a >> 16 & 255;
        e = (((b >> 16 & 255) - d) * c >> 8) + d;
        d = a >> 8 & 255;
        g = (((b >> 8 & 255) - d) * c >> 8) + d;
        d = a & 255;
        h = (((b & 255) - d) * c >> 8) + d;
    } else if (2 == d) {
        e = ((b >> 16 & 255) * c >> 8) + (a >> 16 & 255);
        if (255 < e) {
            e = 255;
        }
        g = ((b >> 8 & 255) * c >> 8) + (a >> 8 & 255);
        if (255 < g) {
            g = 255;
        }
        h = ((b & 255) * c >> 8) + (a & 255);
        if (255 < h) {
            h = 255;
        }
    } else if (3 == d) {
        e = (a >> 16 & 255) - ((b >> 16 & 255) * c >> 8);
        if (0 > e) {
            e = 0;
        }
        g = (a >> 8 & 255) - ((b >> 8 & 255) * c >> 8);
        if (0 > g) {
            g = 0;
        }
        h = (a & 255) - ((b & 255) * c >> 8);
        if (0 > h) {
            h = 0;
        }
    } else if (4 == d) {
        e = (b >> 16 & 255) * (a >> 16 & 255) >> 8;
        g = (b >> 8 & 255) * (a >> 8 & 255) >> 8;
        h = (b & 255) * (a & 255) >> 8;
    } else if (5 == d) {
        d = a >> 16 & 255;
        e = d + ((b >> 16 & 255) * d * c >> 16);
        if (255 < e) {
            e = 255;
        }
        d = a >> 8 & 255;
        g = d + ((b >> 8 & 255) * d * c >> 16);
        if (255 < g) {
            g = 255;
        }
        d = a & 255;
        h = d + ((b & 255) * d * c >> 16);
        if (255 < h) {
            h = 255;
        }
    } else if (6 == d) {
        d = a >> 16 & 255;
        e = d + (c - (2 * d * c >> 8));
        d = a >> 8 & 255;
        g = d + (c - (2 * d * c >> 8));
        d = a & 255;
        h = d + (c - (2 * d * c >> 8));
    }
    return e << 16 | g << 8 | h
}

var DisplayMode2 = 0;

/*
線を描く
*/
function drawLine(a, b, c, d, e) {
    c -= a;
    d -= b;
    var g;
    var h;
    if (srAbs(c) >= srAbs(d)) {
        h = srFloor(srAbs(c));
        if (0 != h) {
            d = srFloor(65536 * d / h);
        }
        if (0 <= c) {
            c = 65536;
        } else {
            c = -65536;
        }
    } else {
        h = srFloor(srAbs(d));
        if (0 != h) {
            c = srFloor(65536 * c / h);
        }
        if (0 <= d) {
            d = 65536;
        } else {
            d = -65536;
        }
    }
    a = srFloor(65536 * a) + 32768;
    for (b = srFloor(65536 * b) + 32768; 0 <= h; h--, a += c, b += d) {
        if (0 <= a && 512 > a >> 16 && 0 <= b && 384 > b >> 16) {
            g = 512 * (b >> 16) + (a >> 16);
            if (DisplayMode1) {
                GameCanvas[g] = colorBlend(GameCanvas[g], e, e >> 24 & 255)
            } else {
                GameCanvas[g] = e
            }
        }
    }
}

/*
長方形枠
*/
function frameRect(a, b, c, d, e) {
    c--;
    d--;
    drawLine(a, b, a + c, b, e);
    drawLine(a, b + d, a + c, b + d, e);
    drawLine(a, b, a, b + d, e);
    drawLine(a + c, b, a + c, b + d, e)
}

/*
長方形枠の中心基準
*/
function frameRectCentered(a, b, c, d, e) {
    frameRect(a - (c >> 1), b - (d >> 1), c, d, e)
}

/*
長方形描く
*/
function filledRect(a, b, c, d, e) {
    var g;
    var h;
    if (512 < a + c) {
        c = 512;
    } else {
        c = ~~(a + c);
    }
    if (0 > a) {
        a = 0;
    } else {
        a = ~~a;
    }
    if (0 > b) {
        g = 512 * 0 + a;
    } else {
        g = 512 * ~~b + a;
    }
    h = 512 - (c - a);
    c = g + c - a;
    if (384 < b + d) {
        d = 512 * 384;
    } else {
        d = 512 * ~~(b + d);
    }
    if (DisplayMode1) {
        for (; g < d; g += h, c += 512) {
            for (; g < c; g++) {
                GameCanvas[g] = colorBlend(GameCanvas[g], e, e >> 24 & 255);
            }
        }
    } else {
        for (; g < d; g += h, c += 512) {
            for (; g < c; g++) {
                GameCanvas[g] = e
            }
        }
    }
}

/*
長方形中央基準
*/
function filledRectCentered(a, b, c, d, e) {
    filledRect(a - (c >> 1), b - (d >> 1), c, d, e)
}

/*
image,x,y,width,height,x,y,width,height
*/
function drawItem(a, b, c, d, e, g, h, q, m) {
    var l;
    var A;
    if (0 != d && 0 != e) {
        //for (q = ~~((q << 8) / d), m = ~~((m << 8) / e), g <<= 8, h <<= 8, 0 > b && (g += q * -b), 0 > c && (h += m * -c), d = 512 < b + d ? 512 : ~~(b + d), b = 0 > b ? 0 : ~~b, l = 512 * (0 > c ? 0 : ~~c) + b, A = 512 - (d - b), d = l + d - b, e = 512 * (384 < c + e ? 384 : ~~(c + e)); l < e; l += A, d += 512, h += m) {
        //for (b = ((h >> 8) * a.m << 8) + g; l < d; l++, b += q) {
        //c = a.l[b >> 8], -1 != c && (GameCanvas[l] = c)
        //}
        //}
        q = ~~((q << 8) / d);
        m = ~~((m << 8) / e);
        g <<= 8;
        h <<= 8;
        if (0 > b) {
            g += q * -b;
        }
        if (0 > c) {
            h += m * -c;
        }
        if (512 < b + d) {
            d = 512;
        } else {
            d = ~~(b + d);
        }
        if (0 > b) {
            b = 0;
        } else {
            b = ~~b;
        }
        if (0 > c) {
            l = 512 * 0 + b;
        } else {
            l = 512 * ~~c + b;
        }
        A = 512 - (d - b);
        d = l + d - b;
        if (384 < c + e) {
            e = 512 * 384
        } else {
            e = 512 * ~~(c + e)
        }
        while (l < e) {
            //im.m l
            for (b = ((h >> 8) * a.im_array_width << 8) + g; l < d; l++, b += q) {
                c = a.im_array[b >> 8];
                if (-1 != c) {
                    GameCanvas[l] = c
                }
            }
            l += A;
            d += 512;
            h += m
        }
    }
}

/*
image,x,y,width,height,x,y,width,height,color
*/
function drawFromImage(a, b, c, d, e, g, h, q, m, l) {
    var A;
    var z;
    var Z;
    var B;
    if (0 != d && 0 != e) {
        q = srFloor((q << 8) / d);
        m = srFloor((m << 8) / e);
        g <<= 8;
        h <<= 8;
        if (0 > b) {
            g += q * -b;
        }
        if (0 > c) {
            h += m * -c;
        }
        if (512 < b + d) {
            d = 512;
        } else {
            d = srFloor(b + d);
        }
        if (384 < c + e) {
            e = 384;
        } else {
            e = srFloor(c + e);
        }
        if (0 > b) {
            b = 0;
        } else {
            b = srFloor(b);
        }
        if (0 > c) {
            c = 0;
        } else {
            c = srFloor(c);
        }
        var S = l >> 24 & 255;
        var ia = l >> 16 & 255;
        var za = l >> 8 & 255;
        var ta = l & 255;
        var X;
        var T;
        var Y;
        if (!DisplayMode2) {
            for (; c < e; c++, h += m) {
                //im.m l
                for (z = 512 * c + b, Z = ((h >> 8) * a.im_array_width << 8) + g, A = b; A < d; A++, z++, Z += q) {
                    B = a.im_array[Z >> 8]
                    if (-1 != B) {
                        X = ia * (B >> 16 & 255) >> 8;
                        T = za * (B >> 8 & 255) >> 8;
                        Y = ta * (B & 255) >> 8;
                        if (!DisplayMode1) {
                            GameCanvas[z] = X << 16 | T << 8 | Y
                        } else if (1 == DisplayMode1) {
                            B = GameCanvas[z] >> 16 & 255;
                            X = ((X - B) * S >> 8) + B;
                            B = GameCanvas[z] >> 8 & 255;
                            T = ((T - B) * S >> 8) + B;
                            B = GameCanvas[z] & 255;
                            Y = ((Y - B) * S >> 8) + B;
                            GameCanvas[z] = X << 16 | T << 8 | Y
                        } else if (2 == DisplayMode1) {
                            X = (X * S >> 8) + (GameCanvas[z] >> 16 & 255);
                            if (255 < X) {
                                X = 255;
                            }
                            T = (T * S >> 8) + (GameCanvas[z] >> 8 & 255);
                            if (255 < T) {
                                T = 255;
                            }
                            Y = (Y * S >> 8) + (GameCanvas[z] & 255);
                            if (255 < Y) {
                                Y = 255;
                            }
                            GameCanvas[z] = X << 16 | T << 8 | Y
                        } else if (5 == DisplayMode1) {
                            B = GameCanvas[z] >> 16 & 255;
                            X = B + (X * B * S >> 16);
                            if (255 < X) {
                                X = 255;
                            }
                            B = GameCanvas[z] >> 8 & 255;
                            T = B + (T * B * S >> 16);
                            if (255 < T) {
                                T = 255;
                            }
                            B = GameCanvas[z] & 255;
                            Y = B + (Y * B * S >> 16);
                            if (255 < Y) {
                                Y = 255;
                            }
                            GameCanvas[z] = X << 16 | T << 8 | Y
                        }
                    }
                }
            }
        } else if (1 == DisplayMode2) {
            for (; c < e; c++, h += m) {
                //im.m l
                for (z = 512 * c + b, Z = ((h >> 8) * a.im_array_width << 8) + g, A = b; A < d; A++, z++, Z += q) {
                    B = S * (a.im_array[Z >> 8] & 255) >> 8
                    if (B) {
                        if (1 == DisplayMode1) {
                            X = GameCanvas[z] >> 16 & 255;
                            X = ((ia - X) * B >> 8) + X;
                            T = GameCanvas[z] >> 8 & 255;
                            T = ((za - T) * B >> 8) + T;
                            Y = GameCanvas[z] & 255;
                            Y = ((ta - Y) * B >> 8) + Y;
                            GameCanvas[z] = X << 16 | T << 8 | Y
                        } else if (2 == DisplayMode1) {
                            X = (GameCanvas[z] >> 16 & 255) + (ia * B >> 8);
                            if (255 < X) {
                                X = 255;
                            }
                            T = (GameCanvas[z] >> 8 & 255) + (za * B >> 8);
                            if (255 < T) {
                                T = 255;
                            }
                            Y = (GameCanvas[z] & 255) + (ta * B >> 8);
                            if (255 < Y) {
                                Y = 255;
                            }
                            GameCanvas[z] = X << 16 | T << 8 | Y
                        } else if (3 == DisplayMode1) {
                            X = (GameCanvas[z] >> 16 & 255) - B;
                            if (0 > X) {
                                X = 0;
                            }
                            T = (GameCanvas[z] >> 8 & 255) - B;
                            if (0 > T) {
                                T = 0;
                            }
                            Y = (GameCanvas[z] & 255) - B;
                            if (0 > Y) {
                                Y = 0;
                            }
                            GameCanvas[z] = X << 16 | T << 8 | Y
                        } else {
                            GameCanvas[z] = colorBlend(GameCanvas[z], l, B)
                        }
                    }
                }
            }
        } else if (2 == DisplayMode2) {
            for (; c < e; c++, h += m) {
                //im.m l
                for (z = 512 * c + b, Z = ((h >> 8) * a.im_array_width << 8) + g, A = b; A < d; A++, z++, Z += q) {
                    B = a.im_array[Z >> 8];
                    if (0 != B) {
                        X = B >> 16 & 255;
                        T = B >> 8 & 255;
                        Y = B & 255;
                        if (X == T && T == Y) {
                            GameCanvas[z] = ia * X >> 8 << 16 | za * T >> 8 << 8 | ta * Y >> 8;
                        } else {
                            GameCanvas[z] = X << 16 | T << 8 | Y;
                        }
                    }
                }
            }
        } else if (3 == DisplayMode2) {
            for (; c < e; c++, h += m) {
                //im.m l
                for (z = 512 * c + b, Z = ((h >> 8) * a.im_array_width << 8) + g, A = b; A < d; A++, z++, Z += q) {
                    B = S * (a.im_array[Z >> 8] & 255) >> 8
                    if (B) {
                        if (1 == DisplayMode1) {
                            GameCanvas[z] = ((255 - GameCanvas[z]) * B >> 8) + GameCanvas[z]
                        } else if (2 == DisplayMode1) {
                            X = (GameCanvas[z] >> 16 & 255) + (ia * B >> 8);
                            if (255 < X) {
                                X = 255;
                            }
                            T = (GameCanvas[z] >> 8 & 255) + (za * B >> 8);
                            if (255 < T) {
                                T = 255;
                            }
                            Y = (GameCanvas[z] & 255) + (ta * B >> 8);
                            if (255 < Y) {
                                Y = 255;
                            }
                            GameCanvas[z] = X << 16 | T << 8 | Y
                        } else if (3 == DisplayMode1) {
                            B = GameCanvas[z] - B;
                            if (0 > B) {
                                B = 0;
                            }
                            GameCanvas[z] = B
                        }
                    }
                }
            }
        }
    }
}

/*
描く
*/
function drawFromImageCentered(a, b, c, d, e, g, h, q, m, l) {
    drawFromImage(a, b - (d >> 1), c - (e >> 1), d, e, g, h, q, m, l)
}

/*
塗りつぶす
*/
function BackGroundFill(a, b, c, d, e) {
    var g;
    var h;
    if (512 < a + c) {
        c = 512;
    } else {
        c = ~~(a + c);
    }
    if (0 > a) {
        a = 0;
    } else {
        a = ~~a;
    }
    if (0 > b) {
        g = 512 * 0 + a;
    } else {
        g = 512 * ~~b + a;
    }
    h = 512 - (c - a);
    c = g + c - a;
    if (384 < b + d) {
        d = 512 * 384
    } else {
        d = 512 * ~~(b + d)
    }
    for (; g < d; g += h, c += 512) {
        for (; g < c; g++) {
            if (!(GameCanvas[g] & 16777215)) {
                GameCanvas[g] = e
            }
        }
    }
}

/*
わからん
*/
function colorPortraitWeap(a, b, c, d) {
    var e;
    var g;
    var h;
    var q;
    var m;
    var l;
    if (0 > a) {
        l = -a;
    } else {
        l = 0;
    }
    var A;
    if (512 < a + 24) {
        A = 24 - (a + 24 - 512);
    } else {
        A = 24;
    }
    var z;
    if (384 < b + 24) {
        z = 24 - (b + 24 - 384);
    } else {
        z = 24;
    }
    for (g = 0 > b ? -b : 0; g < z; g++) {
        //im.m l
        for (h = 512 * (b + g) + (a + l), q = (0 + srFloor(24 * g / 24)) * PlayerImage.im_array_width + c, e = l; e < A; e++, h++) {
            m = q + srFloor(24 * e / 24);
            if (16711680 == PlayerImage.im_array[m]) {
                GameCanvas[h] = d
            }
        }
    }
}

/*
描く
*/
function drawRotation(a, b, c, d, e, g, h, q) {
    var m = srMax(srAbs(e - a >> 16), srAbs(g - b >> 16)) + 1;
    e = srFloor((e - a) / m);
    g = srFloor((g - b) / m);
    h = srFloor((h - c) / m);
    q = srFloor((q - d) / m);
    c = srFloor(c);
    d = srFloor(d);
    for (var l, A, z = 0; z < m; z++, a += e, b += g, c += h, d += q) {
        l = a >> 16;
        A = b >> 16;
        if (0 <= A && 384 > A) {
            if (CanvasSub1[A] > l) {
                CanvasSub1[A] = l;
                CanvasSub3[A] = c;
                CanvasSub5[A] = d;
            }
            if (CanvasSub2[A] < l) {
                CanvasSub2[A] = l;
                CanvasSub4[A] = c;
                CanvasSub6[A] = d
            }
        }
    }
}

var VecA = new SrVec2;

/*
ジョイント引く
*/
function pullJoints(a, b, c, d, e) {
    setDistance(VecA, a, b);
    c -= normalize(VecA);
    d *= c;
    e *= c;
    a.x += VecA.x * d;
    a.y += VecA.y * d;
    b.x -= VecA.x * e;
    b.y -= VecA.y * e
}

/*
ジョイント動かす
*/
function moveJoint(a, b, c, d) {
    setDistance(VecA, a, b);
    b.vecSet(a);
    VecA.y += c;
    scaleVec2(VecA, d);
    //vecAdd
    a.vecAdd(VecA)
}

var Clicked = !1;
var Released = !1;
var LeftClickWasDown = !1;
var LeftClickIsDown = !1;
var RightClickClicked = !1;
var RightClickReleased = !1;
var RightClickWasDown = !1;
var RightClickIsDown = !1;
var LeftClickIsUp = !1;
var MouseChanged = 0;
var LeftClickDownTime = 0;
var MouseX1 = 0;
var MouseY1 = 0;
var MouseX2 = 0;
var MouseY2 = 0;
var MouseInWindow1 = 0;

/*
カーソルが中にあるかどうか
*/
function isMouseHovered(a, b, c, d) {
    if (MouseX1 < a || a + c <= MouseX1 || MouseY1 < b || b + d <= MouseY1) {
        return !1
    } else {
        return !0
    }
}

/*
カーソルが中にあるかどうか
*/
function isMouseHoveredCenter(a, b, c, d) {
    return isMouseHovered(a - c / 2, b - d / 2, c, d)
}

/*
カーソル取得
*/
function getMousePos(a) {
    var b = CV.getBoundingClientRect();
    var c = b.right - b.left;
    var d = b.bottom - b.top;
    var e = srMin(c / 512, d / 384);
    d = srFloor(d / 2 - 384 * e / 2);
    MouseX2 = srFloor((a.clientX - b.left - srFloor(c / 2 - 512 * e / 2)) / e);
    MouseY2 = srFloor((a.clientY - b.top - d) / e)
}

DOCUMENT.onmousemove = getMousePos;

/*
マウス押されたとき
*/
DOCUMENT.onmousedown = function (a) {
    getMousePos(a);
    MouseInWindow2 = !1;
    if (!(0 > MouseX2 || 512 <= MouseX2 || 0 > MouseY2 || 384 <= MouseY2)) {
        MouseInWindow2 = !0;
        if (0 == a.button) {
            LeftClickIsDown = !0;
        }
        if (2 == a.button) {
            RightClickIsDown = !0
        }
        if (MouseInWindow2) {
            return !1
        }
    }
};

/*
マウス離されたとき
*/
DOCUMENT.onmouseup = function (a) {
    getMousePos(a);
    if (0 == a.button) {
        LeftClickIsDown = !1;
    }
    if (2 == a.button) {
        RightClickIsDown = !1
    }
};

/*
右クリック
*/
DOCUMENT.oncontextmenu = function () {
    if (MouseInWindow2) {
        return !1
    }
};

/*
座標修正かなんか
*/
function fixTouchPos(a) {
    var b = CV.getBoundingClientRect();
    var c = b.right - b.left;
    var d = b.bottom - b.top;
    var e = srMin(c / 512, d / 384);
    c = srFloor(c / 2 - 512 * e / 2);
    d = srFloor(d / 2 - 384 * e / 2);
    a = a.touches;
    MouseInWindow1 = a.length;
    if (1 == MouseInWindow1) {
        MouseX2 = srFloor((a[0].clientX - b.left - c) / e);
        MouseY2 = srFloor((a[0].clientY - b.top - d) / e)
    } else if (2 == MouseInWindow1) {
        MouseX2 = srFloor((a[0].clientX - b.left - c) / e);
        MouseY2 = srFloor((a[0].clientY - b.top - d) / e);
        d = srFloor((a[1].clientY - b.top - d) / e);
        MouseX2 = srFloor((MouseX2 + srFloor((a[1].clientX - b.left - c) / e)) / 2);
        MouseY2 = srFloor((MouseY2 + d) / 2)
    }
}

/*
タッチスタート
*/
CV.ontouchstart = function (a) {
    fixTouchPos(a);
    if (1 == MouseInWindow1) {
        LeftClickIsDown = !0;
        MouseX1 = MouseX2;
        MouseY1 = MouseY2;
    } else if (2 == MouseInWindow1) {
        LeftClickIsDown = !1;
        MouseX1 = MouseX2;
        MouseY1 = MouseY2;
    }
    return !1
};

/*
スワイプ
*/
CV.ontouchmove = function (a) {
    fixTouchPos(a);
    return !1
};

/*
離す
*/
CV.ontouchend = function (a) {
    fixTouchPos(a);
    if (1 == MouseInWindow1) {
        if (0 == MouseInWindow1) {
            LeftClickIsDown = !1;
            MouseY1 = MouseY2;
        } else {
            MouseX1 = MouseX2;
            MouseY1 = MouseY2;
        }
    } else {
        if (0 == MouseInWindow1) {
            LeftClickIsDown = !1;
        } else if (2 == MouseInWindow1) {
            MouseX1 = MouseX2;
            MouseY1 = MouseY2;
        }
    }
    return !1
};

/*
タッチキャンセル
*/
CV.ontouchcancel = function () {
    MouseInWindow1 = 0;
    RightClickIsDown = LeftClickIsDown = !1
};
var IsKeyPressed = Array(256);
var IsKey2 = Array(256);
var IsKeyHeld = Array(256);
var IsKey4 = Array(256);
var IsKey5 = Array(256);

/*
キー押された
*/
DOCUMENT.onkeydown = function (a) {
    var b = a.keyCode;
    if (65 <= b & 90 >= b) {
        if (!a.shiftKey) {
            b += 32;
        }
    } else if (a.shiftKey) {
        b = IsKey5[b];
    } else {
        b = IsKey4[b];
    }
    if (0 <= b && 256 > b) {
        IsKeyHeld[b] = !0;
        IsKey2[b] = !0;
    }
    if (0 != b && MouseInWindow2) {
        return !1
    }
};

/*
キー離された
*/
DOCUMENT.onkeyup = function (a) {
    var b = a.keyCode;
    if (65 <= b & 90 >= b) {
        if (!a.shiftKey) {
            b += 32;
        }
    } else if (a.shiftKey) {
        b = IsKey5[b];
    } else {
        b = IsKey4[b];
    }
    if (0 <= b && 256 > b) {
        IsKeyHeld[b] = !1;
    }
    if (0 != b && MouseInWindow2) {
        return !1
    }
};

var MouseInWindow2 = !1;
var VsUploadCommentInput = "";
var VsUploadCommentImage = new SrImage;
var RequestResponse = Array(100);
var RequestResult = 0;
//POST
var CHAR_POST = FROM_CHAR_CODE(80, 79, 83, 84);
//&b=
var CHAR_AND_B_EQUAL = FROM_CHAR_CODE(38, 98, 61);
//&c=
var CHAR_AND_C_EQUAL = FROM_CHAR_CODE(38, 99, 61);
//&d=
var CHAR_AND_D_EQUAL = FROM_CHAR_CODE(38, 100, 61);
//&e=
var CHAR_AND_E_EQUAL = FROM_CHAR_CODE(38, 101, 61);
//&f=
FROM_CHAR_CODE(38, 102, 61);
//&g=
FROM_CHAR_CODE(38, 103, 61);
//&h=
FROM_CHAR_CODE(38, 104, 61);
//&i=
FROM_CHAR_CODE(38, 105, 61);
//&j=
FROM_CHAR_CODE(38, 106, 61);
//&k=
FROM_CHAR_CODE(38, 107, 61);
//ok
FROM_CHAR_CODE(111, 107);
//ERROR
var CHAR_ERROR = FROM_CHAR_CODE(69, 82, 82, 79, 82);
//=
var CHAR_EQUAL = FROM_CHAR_CODE(61);
//\n
var CHAR_LINE_FEED = FROM_CHAR_CODE(10);
//Content-Type
var CHAR_CONTENT_TYPE = FROM_CHAR_CODE(67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101);
//application/x-www-form-urlencoded
var CHAR_APPLICATION_X_WWW_FORM_URLENCODED = FROM_CHAR_CODE(97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 47, 120, 45, 119, 119, 119, 45, 102, 111, 114, 109, 45, 117, 114, 108, 101, 110, 99, 111, 100, 101, 100);

/*
vsの結果を送ります
*/
function httpRequest(a) {
    for (var b = RequestResult = 0; 100 > b; b++) {
        RequestResponse[b] = "";
    }
    //リクエストは送れないようにしてます
    /*
        try {
            var c = new XMLHttpRequest;
            c.onreadystatechange = function () {
                if (4 == c.readyState) {
                    if (200 == c.status) {
                        var b;
                        var g = 0;
                        var h = c.responseText.length;
                        for (var a = 0; a < h; a++) {
                            b = c.responseText[a]
                            if ( b == CHAR_EQUAL) {
                                for (a += 1; a < h; a++) {
                                    b = c.responseText[a];
                                    if (b == CHAR_LINE_FEED) {
                                        break;
                                    }
                                    RequestResponse[g] += b
                                }
                                g++
                            } else {
                                for (; a < h && c.responseText[a] != CHAR_LINE_FEED; a++);
                            }
                        }
                        RequestResult = 1
                    } else {
                        RequestResult = -1
                    }
                }
            };
            c.open(CHAR_POST, a, !0);
            c.setRequestHeader(CHAR_CONTENT_TYPE, CHAR_APPLICATION_X_WWW_FORM_URLENCODED);
            c.send("")
        } catch (d) {
            RequestResult = -2
        }
    */
    RequestResult = 1;//リクエスト成功()()()
}

/*
ベクトルのクラス的なやつ
ベクトルとは、方向と大きさがセットの値で、プログラム中ではx方向の大きさとy方向の大きさを保存する
*/
function SrVec2() {
    this.y = this.x = 0
}

/*
aのベクトルを代入
*/
SrVec2.prototype.vecSet = function (a) {
    this.x = a.x;
    this.y = a.y;
    return this
};

/*
aに(b,c)のベクトルを代入
*/
function setVec2(a, b, c) {
    a.x = b;
    a.y = c
}

/*
aのベクトルをたす
*/
SrVec2.prototype.vecAdd = function (a) {
    this.x += a.x;
    this.y += a.y;
    return this
};

/*
aにbとcのベクトルの和を代入
*/
function setSumVec2(a, b, c) {
    a.x = b.x + c.x;
    a.y = b.y + c.y
}

/*
aのベクトルをひく
*/
SrVec2.prototype.vecSub = function (a) {
    this.x -= a.x;
    this.y -= a.y;
    return this
};

/*
aにc->bベクトルを代入
*/
function setDistance(a, b, c) {
    a.x = b.x - c.x;
    a.y = b.y - c.y
}

/*
ベクトルをb倍
*/
function scaleVec2(a, b) {
    a.x *= b;
    a.y *= b
}

/*
ベクトルを反時計回りに90°回転
*/
function setPerpendicular(a) {
    var b = a.x;
    a.x = a.y;
    a.y = -b
}

/*
ベクトルの大きさ
*/
function magnitudeOf(a) {
    return Math.sqrt(a.x * a.x + a.y * a.y)
}

/*
ベクトルを単位ベクトルにする
*/
function normalize(a) {
    var b = magnitudeOf(a);
    if (0 == b) {
        return 0;
    }
    a.x /= b;
    a.y /= b;
    return b
}

/*
ベクトルの角度をラジアンで取得
*/
function angleToXAxis(a) {
    var b = Math.acos(a.x / Math.sqrt(a.x * a.x + a.y * a.y));
    if (0 < a.y) {
        b = TWOPI - b;
    }
    return b
}

var RandomArray = new Float32Array(1024);
var RandomVar1 = 0;
var RandomVar2 = 0;

/*
0以上a未満の数
*/
function srRandom(a) {
    RandomVar1 += RandomVar2;
    RandomVar1 &= 1023;
    return RandomArray[RandomVar1] * a
}

/*
a以上b未満の数
*/
function srRandomRange(a, b) {
    RandomVar1 += RandomVar2;
    RandomVar1 &= 1023;
    return RandomArray[RandomVar1] * (b - a) + a
}

/*
二分の一の確率でaかb
*/
function fiftyFifty(a, b) {
    RandomVar1 += RandomVar2;
    RandomVar1 &= 1023;
    if (.5 > RandomArray[RandomVar1]) {
        return a
    } else {
        return b
    }
}

/*
0以上a未満の整数
*/
function srRandomInt(a) {
    RandomVar1 += RandomVar2;
    RandomVar1 &= 1023;
    return ~~(RandomArray[RandomVar1] * a)
}

var AngleArray = Array(513);
var PI = 3.1415927;
var TWOPI = 6.2831855;

/*
絶対値
*/
function srAbs(a) {
    if (0 > a) {
        return -a
    } else {
        return a
    }
}

/*
大きいほう
*/
function srMax(a, b) {
    if (a > b) {
        return a
    } else {
        return b
    }
}

/*
小さいほう
*/
function srMin(a, b) {
    if (a < b) {
        return a
    } else {
        return b
    }
}

/*
aをbからcの範囲内にさせる
*/
function srClampA(a, b, c) {
    if (a < b) {
        return b
    } else if (a > c) {
        return c
    } else {
        return a
    }
}

/*
aをbからcの範囲内にさせる(逆側)
*/
function srClampSwap(a, b, c) {
    if (a < b) {
        return c
    } else if (a > c) {
        return b
    } else {
        return a
    }
}

/*
切り捨て
*/
function srFloor(a) {
    return Math.floor(a)
}
